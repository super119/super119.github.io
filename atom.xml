<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2014-04-23T14:06:35+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[需要齐次坐标的原因之二 - 所有的变换运算（平移、旋转、缩放）都可以用矩阵乘法来搞定]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/23/translation-rotation-scale-in-homogeneous-coordinate/"/>
    <updated>2014-04-23T13:55:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/23/translation-rotation-scale-in-homogeneous-coordinate</id>
    <content type="html"><![CDATA[<p>本文中的三张图片来自网络，但是我不记得当初的来源了，所以没有能给出出处。确定来源后将给出图片出处。</p>

<p>看三个图就清楚了。分别是平移、旋转和缩放的矩阵计算。如果没有额外的第四个量w（也就是齐次坐标），那么这三种变换是无法都使用矩阵乘法来解决的。变换都统一成矩阵乘法之后，就给硬件设计和软件架构带来了巨大的好处。</p>

<!-- more -->


<p>下面的三组公式就分别对应使用矩阵来实现平移（Translation）、旋转（Rotation）、缩放（Scale）：</p>

<p><img src="http://www.markzhang.cn/downloads/image/matrix-translation.png" alt="Translation" /></p>

<p><img src="http://www.markzhang.cn/downloads/image/matrix-rotation.png" alt="Rotation" /></p>

<p><img src="http://www.markzhang.cn/downloads/image/matrix-scale.png" alt="Scale" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[需要齐次坐标的原因]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/23/homogeneous-coordinates/"/>
    <updated>2014-04-23T13:40:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/23/homogeneous-coordinates</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.songho.ca/math/homogeneous/homogeneous.html">http://www.songho.ca/math/homogeneous/homogeneous.html</a></p>

<p>翻译：罗朝辉 <a href="http://www.cnblogs.com/kesalin/">http://www.cnblogs.com/kesalin/</a></p>

<!-- more -->


<p>在欧几里得几何空间里，两条平行线永远都不会相交。但是在投影空间中，两条铁轨在地平线处却是会相交的，因为在无限远处它们看起来相交于一点。</p>

<p>在欧几里得（或称笛卡尔）空间里描述2D/3D 几何物体是很理想的，但在投影空间里面却并不见得。我们用 (x, y) 表示笛卡尔空间中的一个 2D 点，而处于无限远处的点 (∞,∞) 在笛卡尔空间里是没有意义的。投影空间里的两条平行线会在无限远处相交于一点，但笛卡尔空间里面无法搞定这个问题（因为无限远处的点在笛卡尔空间里是没有意义的）。</p>

<p>由 August Ferdinand Möbius 提出的齐次坐标（Homogeneous coordinates）让我们能够在投影空间里进行图像和几何处理，齐次坐标用N + 1个分量来描述 N 维坐标。比如，2D 齐次坐标是在笛卡尔坐标(X, Y)的基础上增加一个新分量 w，变成(x, y, w)，其中笛卡尔坐标系中的大X，Y 与齐次坐标中的小x，y有如下对应关系：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">X</span> <span class="o">=</span> x / w
</span><span class='line'><span class="nv">Y</span> <span class="o">=</span> y / w
</span></code></pre></td></tr></table></div></figure>


<p>笛卡尔坐标中的点 (1, 2) 在齐次坐标中就是 (1, 2, 1) 。如果这点移动到无限远(∞,∞)处，在齐次坐标中就是 (1, 2, 0) ，这样我们就避免了用没意义的&#8221;∞&#8221; 来描述无限远处的点。</p>

<p><strong> 证明: 两平行线可以相交 </strong></p>

<p>笛卡尔坐标系中，对于如下两个直线方程：</p>

<p><img src="http://www.markzhang.cn/downloads/image/linear-formula.png" alt="直线方程" /></p>

<p>如果 C ≠ D，以上方程组无解；如果 C = D，那这两条线就是同一条线了。</p>

<p>下面我们用 x/w, y/w 代替 x, y 放到投影空间里来求解：</p>

<p><img src="http://www.markzhang.cn/downloads/image/linear-formula-homogeneous.png" alt="齐次坐标直线方程" /></p>

<p>现在我们就可以在 C ≠ D 的情况得到一组解 (x, y, 0)，代入得 (C &ndash; D)w = 0，因为 C ≠ D，所以 w = 0。因而，两条平行线相交于投影空间中无限远处的一点 (x, y, 0)。</p>

<p>齐次坐标在计算机图形学中是有用的，将 3D 场景投影到 2D 平面的过程中就用到它了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（三）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/22/git-gossip-3/"/>
    <updated>2014-04-22T07:58:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/22/git-gossip-3</id>
    <content type="html"><![CDATA[<p>这次来说说有关 <code>no branch</code> 的那些事。</p>

<p>其实之前在<a href="http://markzhang.cn/blog/2014/04/04/git-gossip-1/">Git都在说些啥（一）</a>中已经提过一些有关 <code>no branch</code> 的东西。这次再来看看其他两段git的提示信息，都是与 <code>no branch</code> 有关的。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git ck origin/master
</span><span class='line'>Note: checking out <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>
</span><span class='line'>You are in <span class="s1">&#39;detached HEAD&#39;</span> state. You can look around, make experimental
</span><span class='line'>changes and commit them, and you can discard any commits you make in this
</span><span class='line'>state without impacting any branches by performing another checkout.
</span><span class='line'>
</span><span class='line'>If you want to create a new branch to retain commits you create, you may
</span><span class='line'><span class="k">do </span>so <span class="o">(</span>now or later<span class="o">)</span> by using -b with the checkout <span class="nb">command </span>again. Example:
</span><span class='line'>
</span><span class='line'>  git checkout -b new_branch_name
</span><span class='line'>
</span><span class='line'>HEAD is now at 82b25d9b1856... HelloGL: Add missing shader files
</span><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git b
</span><span class='line'>* <span class="o">(</span>no branch<span class="o">)</span>
</span><span class='line'>  master
</span><span class='line'>  tmp
</span><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git pull
</span><span class='line'>You are not currently on a branch, so I cannot use any
</span><span class='line'><span class="s1">&#39;branch.&lt;branchname&gt;.merge&#39;</span> in your configuration file.
</span><span class='line'>Please specify which remote branch you want to use on the <span class="nb">command</span>
</span><span class='line'>line and try again <span class="o">(</span>e.g. <span class="s1">&#39;git pull &lt;repository&gt; &lt;refspec&gt;&#39;</span><span class="o">)</span>.
</span><span class='line'>See git-pull<span class="o">(</span>1<span class="o">)</span> <span class="k">for </span>details.
</span></code></pre></td></tr></table></div></figure>


<p>第一段信息来自命令 <code>git checkout origin/master</code>。Git的这段唠叨意思就是，哥们你checkout了一个版本，但是没有指定branch的名字，所以哥现在给你创建了一个特殊的branch，名字叫 <code>no branch</code>。这个branch特殊在哪呢，就是你可以在这个branch上工作，可以提交commit，但是将来你一旦离开了这个branch，比如你checkout到其他的branch上去了，那么你就再也回不来了哈。你做的那些commit就找不到了哈。所以哥们现在强烈建议你，以后checkout branch使用 <code>git checkout -b new_branch_name</code>。</p>

<p><strong> 注：</strong> 之前在<a href="http://markzhang.cn/blog/2014/04/04/git-gossip-1/">Git都在说些啥（一）</a>提到过了，使用 <code>git reflog</code> 可以找回你在 <code>no branch</code> 上提交过的commit。前提是git还帮你留着这些commits。</p>

<p>第二段提示信息来自执行 <code>git pull</code> 的时候，之前在<a href="http://markzhang.cn/blog/2014/04/21/git-gossip-2/">Git都在说些啥（二）</a>中已经详细说了 <code>git pull</code> 会出现的这种错误信息。所以，这里想说的是，只要你工作在 <code>no branch</code> 上，那么执行 <code>git pull</code> 的时候，就必须写全了，比如：<code>git pull origin master</code>，这样git才知道怎么去做merge。</p>

<p>说到这里，你可能会问，为什么git要搞这么一个莫名其貌，麻烦无比的 <code>no branch</code> 出来？其实 <code>no branch</code> 是有一些适用的场景的。<code>no branch</code> 相当于是一种临时branch，建立这个branch的唯一原因就是将来我们肯定会放弃掉这个branch，所以在做比如 <code>git rebase</code> 的时候，<code>no branch</code> 就很make sense了。因为我们知道 <code>git rebase</code> 的时候，git需要根据你的指令，将commits重新做排列、修正、squash等等，此时，git就会以第一个需要rebase的commit之前的那个commit为base，checkout到一个 <code>no branch</code> 上去，rebase做完之后，再最终将 <code>no branch</code> 覆盖掉你执行 <code>git rebase</code> 时的branch。所以，在这种场景下，使用 <code>no branch</code> 就比使用一个有名字的branch更加的make sense。</p>

<p>还有一种场景你肯定熟悉，就是使用repo的时候。repo是Google做的一个Python脚本程序，用于管理多个git仓库。你会发现，经常你做完 <code>repo sync</code> 之后，来到其中任意一个git仓库（或者叫git project吧，repo中是称为project的），执行一下 <code>git branch</code>，你会发现你都处在 <code>no branch</code> 上。我的感觉是，repo针对每一个git project，是可以定义 <code>revision</code> 的（在.repo/manifest.xml中可以定义所有的git project，其中就可以针对每个project定义revision）。而这个revision，就是一个git commit的HASH，所以在这种场景下，repo在 <code>git fetch</code> 取得了该project远端的所有更新之后，如何将你本地的文件更新到你指定的revision上？肯定是执行 <code>git checkout &lt;commit hash&gt;</code> 这样的命令了，那么这个时候自然 <code>no branch</code> 就产生了。当然repo也可以很二的约定一个俗气无比的branch名字，比如 <code>git checkout -b this_really_sucks &lt;commit hash&gt;</code>？</p>

<p>其实 <code>no branch</code> 本身没啥，只是由于相比其他的branch，<code>no branch</code> 有一些特殊的地方，所以在 <code>no branch</code> 上工作是，你就经常会收到git的一些抱怨，习惯了就好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（二）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/21/git-gossip-2/"/>
    <updated>2014-04-21T21:33:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/21/git-gossip-2</id>
    <content type="html"><![CDATA[<p>这一次我们来说说 <code>git pull</code> 的时候经常会碰到的一段信息。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git pull
</span><span class='line'>You asked me to pull without telling me which branch you
</span><span class='line'>want to merge with, and <span class="s1">&#39;branch.tmp.merge&#39;</span> in
</span><span class='line'>your configuration file does not tell me, either. Please
</span><span class='line'>specify which branch you want to use on the <span class="nb">command </span>line and
</span><span class='line'>try again <span class="o">(</span>e.g. <span class="s1">&#39;git pull &lt;repository&gt; &lt;refspec&gt;&#39;</span><span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>See git-pull<span class="o">(</span>1<span class="o">)</span> <span class="k">for </span>details.
</span><span class='line'>
</span><span class='line'>If you often merge with the same branch, you may want to
</span><span class='line'>use something like the following in your configuration file:
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>branch <span class="s2">&quot;tmp&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">remote</span> <span class="o">=</span> &lt;nickname&gt;
</span><span class='line'>    <span class="nv">merge</span> <span class="o">=</span> &lt;remote-ref&gt;
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>remote <span class="s2">&quot;&lt;nickname&gt;&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">url</span> <span class="o">=</span> &lt;url&gt;
</span><span class='line'>    <span class="nv">fetch</span> <span class="o">=</span> &lt;refspec&gt;
</span><span class='line'>
</span><span class='line'>See git-config<span class="o">(</span>1<span class="o">)</span> <span class="k">for </span>details.
</span></code></pre></td></tr></table></div></figure>


<p>首先来看一下怎么操作，git就会唠叨上面一段话（假设我们现在在一个git repository的根目录，目前位于master branch）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch tmp
</span><span class='line'>git checkout tmp
</span><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<p>上面的三个命令很简单，首先就是基于当前的branch，创建一个新的branch叫 <code>tmp</code>，然后checkout到这个branch，最后执行 <code>git pull</code>。那为什么最后执行 <code>git pull</code> 的时候就会出现上面那一大段信息呢？</p>

<p>其实很简单。我们都知道，<code>git pull</code> 是做两件事情：首先做 <code>git fetch</code>，也就是将远端仓库中的所有改动都取回来；然后就是做 <code>git merge</code>，也就是将远端仓库的某个branch和我们当前本地所在的branch做一次merge。</p>

<p>所以，当 <code>git pull</code> 做第二件事情，也就是 <code>git merge</code> 的时候，它需要知道将本地的当前所在的这个branch和远端的哪个branch进行merge。当git不知道需要和远端的哪个branch进行merge时，就会出现上述的错误信息了。</p>

<p>解决办法有两个：</p>

<ul>
<li><p>写全 <code>git pull</code> 命令，比如 <code>git pull origin master</code>。这样git就知道跟 <code>origin</code> 这个remote git仓库的master branch进行merge。</p></li>
<li><p>使用 <code>git checkout -b &lt;branch name&gt; &lt;remote refs&gt;</code> 来创建branch，比如 <code>git checkout -b tmp origin/master</code>。这里我们在checkout的时候，明确指定了checkout名为origin的remote git仓库中的master branch，所以将来我们在这个tmp branch上进行 <code>git pull</code> 的时候，git自然就知道去和哪个远端的branch merge了。</p></li>
</ul>


<p><strong> NOTE：</strong> 事实上，<code>git branch</code> / <code>git checkout</code>，也可以使用 <code>-t</code> 这个参数来明确指定新的本地branch需要”track“哪个branch。</p>

<p>最后提一下，一开头git的那段出错信息中提到的一些所谓的配置项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>If you often merge with the same branch, you may want to
</span><span class='line'>use something like the following in your configuration file:
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>branch <span class="s2">&quot;tmp&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">remote</span> <span class="o">=</span> &lt;nickname&gt;
</span><span class='line'>    <span class="nv">merge</span> <span class="o">=</span> &lt;remote-ref&gt;
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>其实，这段信息的意思就是，git无法在你的git仓库的根目录下的 <code>.git/config</code> 中找到tmp这个branch的merge信息，也没有在你的全局git配置：<code>$HOME/.gitconfig</code> 中找到。</p>

<p>而对于一个没有上述问题的branch，比如在本文所举的例子中，master branch，在 <code>.git/config</code> 中就有这样的设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>branch <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">remote</span> <span class="o">=</span> origin
</span><span class='line'>  <span class="nv">merge</span> <span class="o">=</span> refs/heads/master
</span></code></pre></td></tr></table></div></figure>


<p>所以可以看到，其实git的逻辑很简单，只是我们需要确切的知道它究竟在干些啥，这样也就能理解它的抱怨了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[厦华LC-42T18电视机维修]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/15/prime-lc-42t18-fix/"/>
    <updated>2014-04-15T23:10:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/15/prime-lc-42t18-fix</id>
    <content type="html"><![CDATA[<p>家里客厅的电视是10年前买的厦华LC-42T18，几年前维修过一次，更换掉了整块主控板（也就是数字信号板）。但是上周电视再次罢工，如果让厦华再来维修，那又是大几百块，所以决定自己拆开来修修看。</p>

<p>之所以想自己维修，是因为故障现象跟上次差不多：</p>

<p>开机之后，红色电源指示灯亮，此时按电视上的POWER按键，电源指示灯能从红灯切换到蓝灯，但是没有图像没有声音。此时遥控和电视上的按键全部失灵，只能拔电源或者按电源总开关将电视关闭。</p>

<!-- more -->


<p>由于现象跟上次差不多，所以怀疑还是主控板出现了问题。首先就是使用万能的Google，发现这是该款电视的一个常见问题。网上包括淘宝上，有很多人可以维修。但是没有搜到该问题的原因以及如何维修。这也正常，能搜到人家就不用赚钱了。但是值得欣喜的是，搜到了该款电视的主控板的部分电路图：</p>

<p><a href="http://www.markzhang.cn/downloads/file/lc-42t18-schematic.pdf">厦华LC-42T18电路图</a></p>

<p>注：以上电路图下载自这里：<a href="http://www.dzbzw.com/zlxz/dltz/03042011/1954.html#ecms">http://www.dzbzw.com/zlxz/dltz/03042011/1954.html#ecms</a></p>

<p>所以，首先根据上图，用万用表量主控板是否有电源输入，发现输入的12v/5v均正常（上述电路图中是18v，这应该是不同批次的电视导致的）。再量几个稳压器，如N608/N603，都有输入输出电压，看起来一切正常。再由电路图可以看出，主控板上有一个主要的芯片N601/PW218-10，这颗芯片是power芯片，负责给板子上其他芯片供电，如果这颗芯片不能稳定工作，那么出现上述的现象就不奇怪了。用万用表量了一下主控板上其他主要芯片，都没有输入，所以可以确定就是这颗N601没有正常工作。</p>

<p>所以为什么这颗芯片没有正常工作呢？难道是给该芯片供电的几个稳压芯片有问题？再次Google，终于发现了这篇文章：</p>

<blockquote><p>失效原因分析：:
由于C641（贴片电解电容）周围存在发热量大的芯片如：PW118、N603（AMS1117）等，长时间使用后会造成C641（10V100u）容量变小，导致无法滤除N603（AMS1117）输出端的自激振荡,使得N603（AMS1117）的输出电压产生干扰脉冲，造成PW118停止工作，最终引起黑屏。为了防止C641（10V100u）漏液后引起短路，所以将其拆除，并在N603（AMS1117）的输出端并联上容量较大的电解电容替代。把改机的电解电容放置在下图中的所示的位置，使其远离发热源防止再次损坏。</p>

<p>更改步骤
拆除电容C641（10V100u）
取25V/220u电容一只，电容的负极接N603的第1脚（即左边第1脚，N603的接地脚），电容的正极接N603的第2脚（即中间脚，N603输出脚），最后给新加上的25V/220u电容点热熔胶固定。</p>

<p>厦华LC-37T25彩电黑屏，开机指示灯由红灯转成蓝灯，屏一直不亮
电源板强制开机各电压正常，24V带负载正常。可能是CPU板上N603（AMS1117—18）IC或N701（MX29LV800）FLASHIC虚焊引起。打开CPU板铁皮发现LED1微亮不闪烁，测N603（AMS1117）的输出电压为1.85V（正常1.8V）。补焊N701后开机正常，后按公司更改方案加10欧/2W电阻和换C641，上电故障排除。试机几天后，热机有时黑屏，一般为N603过热不良引起，在N603上加焊半封装IC做散热片（如K3116）。之后有2个多月了用户再也没有反映问题了。　　小结：由于N603温度过高，导致内部参数变化引起输出电压变高。因N603靠电路板来散热，散热不良，增加散热，使IC能够恒定在一个温度上，正常工作。</p></blockquote>

<p>注：上面的内容来自：<a href="http://www.jdwxs.com/xh/201303/00066725.html">http://www.jdwxs.com/xh/201303/00066725.html</a></p>

<p>上面说的比较乱，总结一下就是：</p>

<ul>
<li><p>上面的内容针对的是37寸的一款厦华电视，所以上面提到的PW118，就是我们这里的PW218。</p></li>
<li><p>有一种故障现象是开机后过一段时间，电视就能正常工作，这是因为N603的旁路电容C641出现了问题导致。而C641会出现问题是因为其周边存在发热量大的芯片。像N603这种稳压器，就是一个MOS管，或者可以理解成一个可变电阻，输入3.3v，输出1.0v，自然在它上面就有压降，导致发热；而PW218发热就更加容易理解。所以，要等到N603输出稳定了，PW218才能开始工作。</p></li>
<li><p>至于我遇到的现象，上面的内容也提到了，可能是由于N603/N701虚焊或不良导致。</p></li>
</ul>


<p>所以简单说来，问题就出在N603/C641它们身上，先对它们开刀。</p>

<p>首先是C641，发现我手上的这块主控板已经按照上文的描述，做过了修改。C641已经没有了，而N603的两个脚上被手工焊上了一个电解电容：</p>

<p><a href="http://www.markzhang.cn/downloads/image/lc-42t18-mb.jpg"><img src="http://www.markzhang.cn/downloads/image/lc-42t18-mb.jpg" alt="C641被一个电解电容替代" /></a></p>

<p>嗯。。想来是上次几年前厦华来给我更换的这款主控板，他们已经做了技改。解决了C641受热不良的问题。Cool。</p>

<p>所以问题就是N603了，想更换掉它但是我手上没有配件啊。。。仔细查看了电路板，发现有一个N405，跟N603应该是一样的一个稳压器，N405应该是用于VGA接口的，一般不用，所以我可以将它们两个调换一下。</p>

<p>用电烙铁将它们两个焊下来调换，为了保险再给N603加一个稳压管上去，全部搞定开机，哈哈，电视开始工作了！</p>

<p>所以现在回头想想，修电视跟修电脑也差不多，基本上就是首先找到几个怀疑对象，然后替换法来试验。唯一麻烦一点的就是，电脑是一个一个模块的换，而电路板可能就是一个芯片、一个电容、一个电阻这样的替换测试，相对来说麻烦许多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux设备驱动suspend/resume的顺序]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/09/linux-driver-suspend-orders/"/>
    <updated>2014-04-09T16:07:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/09/linux-driver-suspend-orders</id>
    <content type="html"><![CDATA[<p>Linux在进入suspend的时候，会首先freeze userspace，然后挨个去调用设备驱动程序的suspend，最后调用architecture dependent的callback（非常奔放的描述了，其实有大量的细节问题存在）。Resume就是反过来执行一遍，最后重新enable userspace。那么作为设备驱动程序的编写者来说，主要就是要实现本驱动的suspend/resume逻辑。但是事实上，很多设备之间是有依赖性的，比如在ARM上，很多设备在resume之前，要求 <code>IOMMU</code> 要已经被enable，否则硬件上就会出现问题，因为访问的地址不对了。</p>

<p>那么Linux是如何设计/定义各个设备驱动之间的suspend/resume的顺序的呢？</p>

<!-- more -->


<p>简单来说，就是以下几条逻辑：</p>

<ul>
<li><p>各设备驱动程序按照其对应的设备（device）注册的先后次序，来决定其suspend/resume的顺序。注意是该驱动对应的设备的注册顺序，不是驱动注册的顺序，所以和驱动的注册优先级无关（也就是和module_init, rootfs_init, subsys_initcall这些无关）。越早被注册的设备，其对应的驱动的suspend越晚被调用，其对应驱动的resume越早被调用；越晚被注册的设备，其对应的驱动的suspend越早被调用，其对应的驱动的resume越晚被调用。</p></li>
<li><p>上面所说的逻辑往往不能满足我们的要求，因为现在的设备（device）都通过DT（Device Tree）的方式进行注册。那么，在DTS文件中，出现的越早的设备就越早被注册（可以参考函数 <code>of_platform_populate</code>）。而按照现在upstream linux kernel的约定，设备在DTS文件中，是按照其寄存器的地址，从低到高排序的，所以自然不可能满足我们的需求。</p></li>
</ul>


<p>那要怎么办？答案是驱动程序执行probe的时候返回 <code>-EPROBE_DEFER</code> 。</p>

<p>对于现在ARM SoC上的设备和其驱动程序来说，Linux kernel都使用Platform device/Platform driver来描述他们。而Platform driver的probe函数就相当于是驱动的初始化函数，一般用来映射寄存器，分配必需的内存等等，看一个驱动程序的代码，一般也可以从Probe开始看起。</p>

<p>Probe函数返回 <code>-EPROBE_DEFER</code>，指的是当一个设备驱动程序检测到其依赖的设备的驱动程序还没有ready的时候，返回这个出错码告诉kernel driver framework，我需要延缓自身的probe。还是举上面那个IOMMU的例子，如果一个设备依赖IOMMU，那么该设备的驱动在probe的时候，就应该检测iommu的驱动是否已经ready，如果没有那就要defer自己的probe。在Linux kernel driver framework中，收到驱动probe返回 <code>-EPROBE_DEFER</code>，就会将该驱动放入一个list中，一个workqueue来负责遍历这个list，从而再次执行这些驱动的probe函数（事实上，由于kernel driver framework不知道驱动互相之间的依赖关系，所以一旦有一个驱动成功probe了，kernel都会触发这个workqueue，让其去遍历一遍list）。</p>

<p>上面说的是 <code>-EPROBE_DEFER</code> 的背景故事了，而事实上，当一个驱动的probe返回过 <code>-EPROBE_DEFER</code> ，而最终成功probe之后，kernel就会修改该驱动的suspend/resume的顺序了。这就是为什么驱动probe的时候返回 <code>-EPROBE_DEFER</code> 能影响其suspend/resume的次序的原因了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Force the device to the end of the dpm_list since</span>
</span><span class='line'><span class="cm"> * the PM code assumes that the order we add things to</span>
</span><span class='line'><span class="cm"> * the list is a good order for suspend but deferred</span>
</span><span class='line'><span class="cm"> * probe makes that very unsafe.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">device_pm_lock</span><span class="p">();</span>
</span><span class='line'><span class="n">device_pm_move_last</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="n">device_pm_unlock</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码来自函数：<code>deferred_probe_work_func</code>，也就是上面所说的defer probe的workqueue的工作函数。所以这里可以看到，当一个驱动最终在probe defer的work函数中probe成功之后，kernel会修改该驱动对应的设备（device）在 <code>dpm_list</code> 中的位置，而 <code>dpm_list</code> 正是kernel suspend/resume 驱动时候遍历的链表。看到调用了函数：<code>device_pm_move_last(dev);</code> 没？这个设备被移到了 <code>dpm_list</code> 的末尾。</p>

<ul>
<li>事情到此为止，可以说已经有了解决方案：我们可以使用 DEFER PROBE 的方式来调整驱动 suspend/resume 的顺序。不过这里要提一下，还有一条路也是可行的，那就是利用 <code>syscore suspend/resume</code>。</li>
</ul>


<p>syscore是Linux kernel定义的一个framework，我们可以将我们的驱动注册到syscore中去。syscore比较关键的就是 <code>syscore_ops</code> 这个结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">syscore_ops</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">list_head</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">suspend</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">resume</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">shutdown</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到只有 suspend/resume/shutdown 这三个ops，所以看到这里大概也可以猜到了，注册到syscore中的驱动，其suspend函数是在所有其他驱动的suspend都调用过之后调用的，而其resume函数是在所有其他驱动的resume调用之前调用的。简单来说，syscore的驱动，suspend被晚调用保证其他驱动suspend的时候，syscore的驱动还活着；syscore的驱动，resume被很早调用，从而保证其他驱动resume的时候，syscore的驱动已经活着了。好绕。。。</p>

<p>要将驱动注册到syscore中很简单，调用函数：<code>register_syscore_ops(&amp;your_driver_syscore_ops);</code> 就可以了。至于上面说到的syscore的suspend/resume的顺序，实现代码在这里：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="n">syscore_suspend</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">wakeup</span> <span class="o">=</span> <span class="n">pm_wakeup_pending</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">suspend_test</span><span class="p">(</span><span class="n">TEST_CORE</span><span class="p">)</span> <span class="o">||</span> <span class="o">*</span><span class="n">wakeup</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">error</span> <span class="o">=</span> <span class="n">suspend_ops</span><span class="o">-&gt;</span><span class="n">enter</span><span class="p">(</span><span class="n">state</span><span class="p">);</span>
</span><span class='line'>      <span class="n">events_check_enabled</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">syscore_resume</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码来自函数：<code>suspend_enter</code>。可以看到当syscore_suspend被调用之后，就调用architecture dependent的 <code>suspend_ops-&gt;enter</code> 了，到这里整个系统就已经停下来了，进入suspend状态了。而当resume开始，<code>suspend_ops-&gt;enter</code> 返回之后，第一个被调用的就是 <code>syscore_resume</code>，所以上面那一段听起来好绕的逻辑就这么区区几行代码解释了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一站式密码管理器 - LastPass]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/08/lastpass/"/>
    <updated>2014-04-08T19:56:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/08/lastpass</id>
    <content type="html"><![CDATA[<p>我个人感觉，密码是相当反人类的设计。当你刚接触互联网的时候，可能感觉不到，甚至感觉理所当然，银行卡也需要设置密码呢。但是当访问的网站越来越多，各个站点论坛都需要注册用户、设置密码，多了之后密码就会变成非常痛苦的一种体验。</p>

<!-- more -->


<p>其实人自身就有很多唯一（Unique）的存在，密码不应该有存在的理由。之前我看过一个BBC的纪录片，为此还写过一篇博文：</p>

<p><a href="http://markzhang.cn/blog/2013/12/17/defeating-the-hackers/">密码之外的新的安全认证手段</a></p>

<p>之所以现在密码还被大量使用，可能现在技术还没有成熟、成本还没有降低到能普及的程度吧。</p>

<p>所以现在也涌现出了很多“密码管理”类的网站和应用，LastPass就是其中之一。我简单使用了一下，感觉还是挺方便的。</p>

<p>首先就是去<a href="http://www.lastpass.com">http://www.lastpass.com</a>注册一个账号了，不好意思，这里你又需要设置一个密码了。好在的是，设置了这个密码之后，以后的所有密码都不需要再记忆了，LastPass会帮你管理。所以，反过来说，一旦你的LastPass的密码被泄露的话，那后果就不堪设想了，所以为了安全起见，一些涉及到钱财类的密码还是单独设置吧，别依赖LastPass了。。。比如支付宝。:)</p>

<p>然后就是在LastPass的主页上，点击“下载”，就会下载一个针对你的浏览器的插件。我使用的是Chrome，所以一个Chrome插件就自动下载并安装了。安装完成之后，点击工具栏上出现的 <code>*</code> 字图标，输入你的LastPass的账号和密码，一切就已经就绪了。</p>

<p>LastPass有许多功能，比如表单的自动填写、Profile的设定等，但是我只使用了它的一个功能：自动生成密码。LastPass自动生成密码可以选择密码长度，默认是12个字符，也可以选择字符种类，比如包不包含特殊字符（默认不包含，因为有一些网站只接受字母和数字作为密码）等。</p>

<p>所以接下来我就先登录了一个我常去的网站，进入到账户设定，修改密码的页面，在新密码设定的输入框中，点击LastPass，选择自动生成密码，LastPass就会生成一个12个字符的密码并自动填充到密码框中，并且该密码自动保存在了你的LastPass的账户里面：</p>

<p><img src="http://www.markzhang.cn/downloads/image/lastpass-saved-passwd.png" alt="LastPass自动生成并保存的密码" /></p>

<p>上图显示的就是我新生成的淘宝的密码，这里面URL这一项很重要，LastPass会根据URL中的 <code>domain name</code> ，来检测你当前访问的网站是否在LastPass中有对应的密码记录。举上面的例子来说，URL是 <code>http://110.taobao.com/...</code>，所以下次只要你访问 <code>xxx.taobao.com/xxxx</code> 这样的网址，在网页中所有的密码输入框中都会出现一个 <code>*</code> 字图标，并且有一个下标1，表示该网站LastPass中有一个匹配的密码记录，只要点击这个 <code>*</code> 字图标，密码就自动填到密码框中了，很方便：</p>

<p><img src="http://www.markzhang.cn/downloads/image/lastpass-autofill.png" alt="LastPass自动填充密码" /></p>

<p>那有的时候，有些网站，比如淘宝，支付宝，网银等，密码输入都是有控件的，所以LastPass没法自动在密码框里面插入那个 <code>*</code> 字图标，这个时候怎么办？这也没有问题，只是稍微麻烦一点。以我使用Chrome浏览器，还是访问淘宝来举例，只需要去点击工具栏上那个LastPass的图标（这个图标也有一个1字的下标，表示该网站有一个对应的密码记录），选择 <code>Show matching sites</code> &ndash;> <code>Generated password for taobao.com</code> &ndash;> <code>Copy password</code>，然后再到密码输入框里面去粘贴就好了。如果很不幸你的网站的密码输入框不允许粘贴，那你只能手动去LastPass的密码保存页面，找到那个密码，然后手动输入了。。。</p>

<p>最后说一个我觉得是必须要设置的地方，就是 <code>Equivalent Domains</code>。要设置这个东西的原因在于，很多网站密码设置、修改不在一个domain上。比如126邮箱，使用的时候，我们登录的是www.126.com，但是修改密码的时候，是跳转到网易通行证的网站，也就是163.com；再比如139邮箱，登录的是139.com，但网页会自动跳转到10086.cn，又或者是cmpassport.com；淘宝也是，taobao.com/alipay.com/zhifubao.com这三个域名很多时候都是关联的，其实需要的都是相同的用户名和密码。上面提到，LastPass是根据 <code>domain name</code>，也就是域名来检测你当前访问的网页是否有匹配的密码记录的，所以如果你保存密码的时候，密码对应的域名是taobao.com，但是你现在访问某个alipay.com的网页，也需要这个密码，这个时候如果你不设置 <code>Equivalent Domains</code>的话，LastPass就不会自动提示密码了。</p>

<p>所以，点击工具栏上LastPass的图标，选择 <code>My LastPass Vault</code> &ndash;> <code>Settings</code> &ndash;> <code>Equivalent Domains</code>标签页，在里面新增一个记录，比如这样：</p>

<p><code>taobao.com, alipay.com</code></p>

<p><img src="http://www.markzhang.cn/downloads/image/lastpass-equivalent-domains.png" alt="LastPass Equivalent Domains" /></p>

<p>保存之后，下次你访问某个alipay.com的页面，LastPass就会提示你淘宝的密码了。当然这里只是举例，如果你的淘宝账户和alipay的账户是分开的，那自然就不需要这样设置。</p>

<p>最后，给你的LastPass的账户设置一个强密码，然后祈祷LastPass不会被墙，LastPass的密码数据库不会被盗吧！还有就是，真正涉及到钱的网站，比如支付宝、网银等，还是不要使用LastPass来管理密码吧，虽然记忆N个密码实在麻烦，但是麻烦总好过丢钱吧。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（一）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/04/git-gossip-1/"/>
    <updated>2014-04-04T14:28:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/04/git-gossip-1</id>
    <content type="html"><![CDATA[<p>当我们在做某些git操作的时候，git有的时候会给出一段一段的提示信息，而往往这些信息都是比较重要的。因为按照UNIX的设计哲学，执行成功或是无害操作，这些都是不会有任何提示信息的。做Linux的Hackers也奉行这种哲学，所以当git开始唠叨的时候，你真的需要关注一下它到底在罗嗦些啥。</p>

<p>这篇文章描述的就是某一个git的唠叨。</p>

<!-- more -->


<p>有的时候，特别是当执行 <code>git checkout</code> 的时候，你可能会看到这样的信息：</p>

<blockquote><p>Warning: you are leaving 30 commits behind, not connected to
any of your branches:</p>

<p>2553655 Merge branch &lsquo;master&rsquo; into prod</p>

<p>6b07300 Fix build</p>

<p>&hellip; and 28 more.</p>

<p>If you want to keep them by creating a new branch, this may be a good time
to do so with:</p>

<p>git branch new_branch_name 654646464</p></blockquote>

<p>注：以上信息来自：<a href="https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM">https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM</a></p>

<p>所以git的这段罗嗦到底是什么意思？</p>

<p>发生这种情况时，你一般工作在 <code>no branch</code> 上，也就是说，这个branch没有名字。也就是说，一旦你发生了 <code>git checkout</code> 操作之后，无法你是checkout到了一个有名字的branch，还是没有指定checkout的branch，就是更新本地的文件，这个 <code>no branch</code> 就再也回不去了，因为这个branch没有名字，所以你无法告诉git，我需要再回到这个branch上去。</p>

<p>基于此，如果你在 <code>no branch</code> 上有一些commit（无论是你自己commit的，还是你cherry-pick的），那么，当发生 <code>git checkout</code> 的时候，git就会给出上面的信息，告诉你，如果你现在不做点事的话，之前你所在的 <code>no branch</code> 就再也回不去了，所以，这个时候你最好建一个branch来保证你还能回到 <code>no branch</code> 上去：</p>

<blockquote><p>If you want to keep them by creating a new branch, this may be a good time
to do so with:</p>

<p>git branch new_branch_name 654646464</p></blockquote>

<p>事实上，如果你真的碰到了这种情况，而且当git给出上面一段信息告诉了你利害关系之后，你仍然义无反顾的无视了git的警告，没有创建一个有名字的branch来保存之前你在 <code>no branch</code> 上的工作成果，最终在某一天你想起来，想要找回N久之前在 <code>no branch</code> 上的一些commit的话，你仍然还有一根救命稻草：</p>

<p><code>git reflog</code></p>

<p>基本上，<code>git reflog</code> 将给出所有“失联”的commit。也就是说，这些commit不属于任何branch（no connection），从git数据库中删掉也无所谓。</p>

<p>所以，你最好期望 <code>git reflog</code> 中有你需要的commit，因为就像上面所说，这些commit本就是可以被安全删除的commit，如果你做过 <code>git gc</code>，或者是git自动做过 <code>git gc</code> 的话（git有一套逻辑来判断什么时候应该做一次gc），这些commit就真的没有了。</p>

<p>注：上面一段说的有点严重，事实上，git对待失联的commit，有一个expire time的设定，所以也不是说一旦执行过 <code>git gc</code>，这些commit就真的没有了。但是为了安全起见，对于重要的commit，还是需要注意不要丢了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Mac OS X上的Chrome添加SSL证书]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification/"/>
    <updated>2014-03-25T21:49:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification</id>
    <content type="html"><![CDATA[<p>Chrome在访问自签名SSL证书的网站时，会给出一个warning的页面，每次都要去点一下那个 <code>Proceed</code> 按钮特烦。每天点一次，日积月累下来每年也要花不少时间来点这个破玩意。Chrome就不能聪明一点来个诸如”记住我的选择“这样的按钮么？</p>

<p>折腾总是发生在忍无可忍的时候，幸好要解决这个问题不麻烦。</p>

<!-- more -->


<ul>
<li><p>首先就是把SSL证书导出了。这个非常容易，访问一下有SSL warning的那个网站，在Chrome给出的warning页面，地址栏的开头有一个被划了斜线的https，点那里就可以看到证书的信息，从而可以将证书导出出来。</p></li>
<li><p>然后就是导入这个证书了。直接在Mac OS X的应用列表中启动 <code>Keychain Access</code>，当然你也可以在Chrome里面选择Settings &ndash;> Advanced settings &ndash;> Manage Certification，这样出来的就是Mac OS X的 <code>Keychain Access</code> 这个应用程序。</p></li>
</ul>


<p><img src="http://www.markzhang.cn/downloads/image/keychain-access.png" alt="Keychain Access" /></p>

<ul>
<li><p>在 <code>Keychain Access</code> 的界面中，点击左下的 + 按钮，选择刚才得到的SSL证书，就将该证书导入了。</p></li>
<li><p>最后我们要选择 <code>Always Trust</code> 这个证书，否则SSL warning还是会有。在 <code>Keychain Access</code> 中，双击刚才导入的证书，在出现的对话框中，展开 <code>Trust</code> 那个部分，然后选择 <code>Always Trust</code> 就可以了。比如下图就是12306网站的SSL证书：</p></li>
</ul>


<p><img src="http://www.markzhang.cn/downloads/image/keychain-always-trust.png" alt="Always trust SSL certification" /></p>

<ul>
<li>重启Chrome，再访问那个网站，就没有SSL warning了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架设无线桥接网络（WDS）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/22/setup-wireless-wds/"/>
    <updated>2014-03-22T19:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/22/setup-wireless-wds</id>
    <content type="html"><![CDATA[<p>现在的无线路由器动辄3根天线，号称穿墙能力如何如何，信号可以从一楼一直覆盖到三楼。但是根据我几年来使用了N款无线路由器之后，发现都是扯。我现在使用的是一台ASUS的，3根天线，128M内存的无线路由器，支持刷第三方固件（如DD-WRT, Tomato），但是穿墙效果还是无法让人满意。路由器放在房间，客厅的信号就是时有时无。当然，我指的是使用ipad或者手机时，信号较弱，如果使用笔记本电脑要好一些。</p>

<p>忍受了2年之后，我决定在客厅再放一个无线路由器，做无线桥接（WDS）使用，彻底摆脱信号之苦。</p>

<!-- more -->


<p>简单说下两台路由器：</p>

<ol>
<li><p>做AP用的，也是连接着Internet的，就是那台ASUS的，放在书房。</p></li>
<li><p>做桥接用的，放在客厅的，是一台特价的时候买的四十块钱的Tenda（腾达）的无线路由器。</p></li>
</ol>


<p>其实网上介绍WDS的文章很多，但是很多文章都不适用于我的情况，所以做了很多次测试。</p>

<p>最后配置完成之后，发现其实非常简单：</p>

<h2>主路由器（做AP用的ASUS的那台）的配置</h2>

<p>由于我这台ASUS的路由器给我刷了Tomato的固件，所以这里是Tomato中的配置方法。按照下图配置即可：</p>

<p><img src="http://www.markzhang.cn/downloads/image/tomato-ap-wds.png" alt="Tomato AP+WDS 配置" /></p>

<ul>
<li>工作模式设置成 <code>AP + WDS</code></li>
<li>通道尽量选择一个没人使用的。现在每家每户都有无线路由器，所以常见通道很多人都在使用，挑一个没人使用的比较好</li>
<li>无线加密还是按照以前的就好，现在基本上用的都是 <code>WPA2 Personal</code> 了</li>
<li>WDS一项中，你可以将辅路由器的MAC地址填写进去，也可以像上面的图中所示，选成AUTO</li>
</ul>


<h2>辅路由器（做桥接用的Tenda的那台）的配置</h2>

<p>忘记截图了，但是只需要确保以下几点即可：</p>

<ul>
<li>Internet连接要关闭，因为是做桥接用。没有关闭就设成有线网络连接Internet，反正我们不会插网线上去，所以等于禁用了</li>
<li>LAN的网段不要设成跟主路由器一个网段，以免冲突。比如主路由器是192.168.1.x, 辅路由器就可以设成192.168.2.x</li>
<li>关闭DHCP，因为所有的WIFI数据会被发送到主路由器去</li>
<li>工作模式设成WDS，然后填写主路由器的无线MAC地址。一般的路由器都会有一个Scan按钮，可以给出所有的无线网络，选择主路由器那个即可</li>
<li>无线加密设置成跟主路由器一样（加密方法、密钥），这很重要</li>
</ul>


<p>我这个Tenda的路由器，设成WDS模式之后，无线的SSID就会自动设置成跟主路由器一样。所以，当做完上面的设置之后，家里就只有一个无线信号，走到书房就自动连接到主路由器，走到客厅就会自动连接到辅路由器，Cool。</p>

<p>Have a good day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu上连接Juniper SSL VPN]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/20/juniper-vpn-on-ubuntu/"/>
    <updated>2014-03-20T22:26:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/20/juniper-vpn-on-ubuntu</id>
    <content type="html"><![CDATA[<p>现在国内很多外企都使用Juniper SSL VPN，来让员工可以在家连入到公司的网络。但是我发现，Juniper的SSL VPN在windows和Mac OS X上都可以很好的工作，但是在Ubuntu上貌似就有问题。就算你正确安装了Java Runtime，打开浏览器，<code>Host Checker</code> 和 <code>Network Connect</code> 也无法正常运行。有人说这是因为现在我们大多使用64位的Ubuntu，而 <code>Host Checker</code> 和 <code>Network Connect</code> 需要32位的浏览器和32位的JRE才能工作。</p>

<p>我没有去深究32位的Ubuntu下是否Juniper VPN就真的可以正常工作了，因为我找到了一个更简单的办法。</p>

<!-- more -->


<p>这个方法来自这位大神，他自己分析了Juniper SSL VPN的工作过程，然后写了一个perl脚本解决了这个问题：</p>

<p><a href="http://smallhacks.wordpress.com/2012/07/15/jvpn-perl-script-to-connect-to-the-juniper-vpn-with-host-checker-enabled/">http://smallhacks.wordpress.com/2012/07/15/jvpn-perl-script-to-connect-to-the-juniper-vpn-with-host-checker-enabled/</a></p>

<p>对原理感兴趣的可以自己去看这篇文章（可能需要翻墙），这里简述一下步骤：</p>

<ul>
<li><p>从上面的文章提供的地址，下载 <code>jvpn-0.7.0.tar.bz2</code>。</p></li>
<li><p>解开，将配置文件 <code>jvpn.ini</code> 拷贝一份以便输入自己的配置，比如：<code>cp jvpn.ini mark.ini</code>，然后编辑这些配置项：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>host: 你的VPN server的地址
</span><span class='line'>username: 用户名
</span><span class='line'>realm: 区域，一般的外企应该是 <span class="sb">`</span>Employee<span class="sb">`</span> 或者 <span class="sb">`</span>Contractor<span class="sb">`</span>
</span><span class='line'>verifycert: 是否验证SSL证书，如果你本地没有导入你的VPN server的SSL的证书的，可以写0，否则写1
</span><span class='line'>dnsprotect: 这可以防止Ubuntu的NetworkManager修改 <span class="sb">`</span>/etc/resolv.conf<span class="sb">`</span> 。我们需要修改这个文件从而修改DNS server的配置。
</span><span class='line'>mode: <span class="sb">`</span>ncsvc/ncui<span class="sb">`</span> 都可以
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后就可以执行：<code>sudo perl ./jvpn.pl --conf mark.ini</code>。成功了就可以看到连到了VPN，按 <code>Ctrl+C</code> 可以中断连接。</li>
</ul>


<p><strong> Troubleshooting </strong></p>

<ul>
<li><code>sudo apt-get install libterm-readkey-perl</code>，如果jvpn.pl说 <code>Term::ReadKey module</code> 找不到的话</li>
<li><code>sudo apt-get install lib32z1</code>，如果出现这样的错误： <code>libz.so.1: cannot open shared object file: No such file or directory</code></li>
<li><code>sudo apt-get install gcc-multilib</code>，如果看到这样的错误： <code>bits/predefs.h: No such file or directory</code></li>
<li><code>sudo apt-get install libhttp-request-ascgi-perl</code>，如果jvpn.pl说 <code>HTTP::Request module</code> 找不到的话</li>
</ul>


<p>这样在Ubuntu下，就可以使用Juniper SSL VPN了。很多外企的网络，自带翻墙，所以拨上VPN之后，除了工作之外，还可以实现自动翻墙。配合上chnroute，就完美了。不清楚chnroute有啥作用的，可以看我之前写的一篇文章：</p>

<p><a href="http://markzhang.cn/blog/2013/12/04/chnroutes-on-mac/">Chnroutes的使用（Mac OS X Mavericks）</a></p>

<p>最后附上目前最新版本的jvpn 0.7.0：<a href="http://www.markzhang.cn/downloads/soft/jvpn-0.7.0.tar.bz2">jvpn-0.7.0.tar.bz2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGDB使用简介]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/10/kgdb-howto/"/>
    <updated>2014-03-10T13:57:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/10/kgdb-howto</id>
    <content type="html"><![CDATA[<p>KGDB是调试linux kernel的一个工具，虽然没有userspace的gdb那么好用，但有些时候还是能派上一些用处。比如kernel启动的时候自动重启，用kgdb连上之后就可以在kernel重启之前被KGDB截获，从而打印出调用栈来。</p>

<!-- more -->


<p>具体步骤是这样：</p>

<h2>Kernel配置</h2>

<ul>
<li><code>make menuconfig</code>, under &ldquo;Kernel Hacking&rdquo;, enable &ldquo;KGDB&rdquo; &amp; &ldquo;KGDB over serial line&rdquo;. Enable &ldquo;compile kernel with debug info&rdquo;(CONFIG_DEBUG_INFO) &amp; &ldquo;enable frame pointer&rdquo;(CONFIG_FRAME_POINTER) options(both are under &ldquo;Kernel Hacking&rdquo;).</li>
</ul>


<p>有关CONFIG_FRAME_POINTER这个option，需要在enable了ARCH_CONFIG_FRAME_POINTERS这个option之后才会出现在Kernel hacking下面。</p>

<p>这ARCH_CONFIG_FRAME_POINTERS在make menuconfig里面是找不到的。这个option是专门给其他人select用的。一般都是在ARCH config的时候会去select这个option</p>

<p>比如x86下，一般会enable这个option。而ARM则不会（可能是考虑到生成的kernel文件尺寸和性能）。</p>

<p>所以，在ARM下，可以编辑arch/arm/Kconfig，在CONFIG_ARM下面的一堆select的最后，添加上一句select CONFIG_ARCH_FRAME_POINTERS就可以了。</p>

<p>从实验结果来看，只要enable了CONFIG_DEBUG_INFO，基本上就差不多了，能看到代码了。</p>

<ul>
<li>Add kernel option: <code>kgdboc=ttyS0,38400 kgdbwait</code> into kernel command line.</li>
</ul>


<p>根据我的实验，这里115200不行。在后面gdb设置<code>target remote /dev/ttyS0</code>的时候，会被告知最高支持到38400.</p>

<p>所以，这里如果115200不行，就改成38400。</p>

<p>注意这里将<code>/dev/ttyS0</code>修改成你的串口设备文件。</p>

<ul>
<li>Start kernel, kernel will wait for connection from remote PC&rsquo;s gdb.</li>
</ul>


<h2>PC端（remote machine）设置</h2>

<ul>
<li>On remote machine, <code>&lt;gdb path&gt; ./vmlinux</code> &mdash; this &ldquo;vmlinux&rdquo; mostly is under the root directory of kernel(a big kernel image with debug infos, not the one under arch/arm/boot, that is stripped version).</li>
</ul>


<p>需要注意的是，这里的GDB必须使用host是x86-64，target是ARM的那种GDB。我们PC上的gdb一般host和target都是x86-64。</p>

<p>这样的GDB可以在一些常见的toolchain网站找到，比如linaro。</p>

<ul>
<li>Enter gdb commands:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span>remotebaud 38400
</span><span class='line'>target remote /dev/ttyS0
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Done. You can list source codes, set breakpoints now. Continue the debugging after finished.</li>
</ul>


<p><em>CAUTION</em>: Close any other programs(normally it&rsquo;s minicom which we use to monitor serial outputs) which may occupy &ldquo;/dev/ttyS0&rdquo; before running gdb on remote machine. Otherwise gdb can&rsquo;t connect with target board.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox中安装Ubuntu，在有VPN的情况下会有DNS的问题]]></title>
    <link href="http://www.markzhang.cn/blog/2014/02/08/virtualbox-ubuntu-dns-issue/"/>
    <updated>2014-02-08T21:11:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/02/08/virtualbox-ubuntu-dns-issue</id>
    <content type="html"><![CDATA[<p>标题表达的不是很清楚（否则标题就太长了。。。），意思是：如果我们在一台windows的机器上安装了VirtualBox，然后在里面安装Ubuntu，然后在windows中连上VPN，此时Ubuntu虚拟机中就会有DNS的问题。我测试的是最新版本的VirtualBox，Ubuntu是12.04的版本，不知道将来这个问题会不会解决。</p>

<!-- more -->


<p>发现这个问题是因为我使用的VPN是可以翻墙的，举例来说可以访问到youtube，但是我发现在我的Ubuntu虚拟机中就无法访问youtube和其他一些我需要的网站。而且我发现Ubuntu中，浏览器的现象就是DNS解析都完成不了，所以就一直无法打开。</p>

<p>经过Google，在这里发现了答案：</p>

<p><a href="http://superuser.com/questions/570984/virtualbox-guest-ubuntu-loses-dns-when-host-connects-to-vpn">http://superuser.com/questions/570984/virtualbox-guest-ubuntu-loses-dns-when-host-connects-to-vpn</a></p>

<p>简单来说，你只需要这样做：</p>

<ol>
<li>关闭虚拟机</li>
<li>在Windows中打开cmd.exe，然后输入：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\Program Files\Oracle\VirtualBox\VBoxManage.exe modifyvm "ubuntu" --natdnshostresolver1 on</span></code></pre></td></tr></table></div></figure>


<p>命令中的<code>ubuntu</code>是我的ubuntu虚拟机的名字（VM name）。</p>

<p>上述链接中，作者也不太明白为什么，他是这么说的：</p>

<blockquote><p>I suspect it&rsquo;s because when the VPN is active, the host is doing something special for DNS lookups besides just forwarding requests to the specified DNS servers that VirtualBox picked up from the Windows config.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[陀螺进动（Gyroscope Precession）和循环螺距（Cyclic Pitch）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/28/gyroscope-precession/"/>
    <updated>2014-01-28T16:10:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/28/gyroscope-precession</id>
    <content type="html"><![CDATA[<p>循环螺距就是通过改变十字盘（Swashplate），使直升机双桨上的升力造成差异，从而使直升机可以向前、向后、向左、向右移动。之所以称为“循环”（Cyclic），是因为双桨在旋转的过程中，其螺距循环的，有规律的进行改变。</p>

<p>在这其中有一个有意思的现象：陀螺进动（Gyroscope Precession）。有关这个现象我首先是在这里看到的：</p>

<!-- more -->


<p><a href="http://www.rchelicopterfun.com/gyroscopic-precession.html">http://www.rchelicopterfun.com/gyroscopic-precession.html</a></p>

<p>这篇文章写的很不错，特别是老外还自己拍了两段视频来解释这个事情，非常有趣。</p>

<p>所谓“陀螺进动（Gyroscope Precession）“，指的是如果你给一个正在旋转的陀螺一个力的话，那么这个力产生的运动将与力的方向偏离90度。</p>

<p>所以，在直升机上，高速旋转的主旋翼就相当于一个陀螺，那么当我们试图通过改变十字盘的姿态来使直升机向前后左右移动时，就需要注意这个90度的问题。</p>

<p>举例来说：假设我们想让直升机向前运动。那么很自然的，我们想象中应该是这样来实现：</p>

<p>假设直升机的姿态是这样：视点是从上往下俯视直升机，直升机的头对准12点，尾对准6点，两个旋翼和直升机没有夹角，也就是旋翼也是对准12点和6点。那么此时我们只需要加大对准6点的旋翼的螺距，同时减小（甚至无需减小）对准12点的旋翼的螺距，那么这两片旋翼立刻产生升力差，从而导致直升机前倾从而向前运动。</p>

<p>但是由于陀螺进动，我们知道如果按照上面的方法来做，直升机将会向右运动（如果是旋翼是顺时针旋转的话），而不是向前运动。所以，我们需要让旋翼在对准9点和3点这两个位置时，改变两片旋翼的螺距，产生升力差，最后由于陀螺进动，使直升机向前运动。</p>

<p>OK，明白了上面的内容之后，很自然的，我们就会想到上述这些东西在直升机是，具体来说是在十字盘上，是如何实现的呢？我们知道，当我们操纵直升机向前后左右移动的时候，十字盘也是向前后左右倾斜的，那在陀螺进动下，为什么能让直升机正确的运动呢？</p>

<p>答案是，旋翼的桨夹和十字盘有一个90度的夹角。引用一下论坛上某位模友的一张图：</p>

<p><img src="http://www.markzhang.cn/downloads/image/rotor-hub.jpg" alt="直升机桨夹 Helicopter Rotor Hub" /></p>

<p>引用帖子的地址是：</p>

<p><a href="http://bbs.mx3g.com/forum.php?mod=viewthread&amp;tid=208032&amp;ordertype=1">http://bbs.mx3g.com/forum.php?mod=viewthread&amp;tid=208032&amp;ordertype=1</a></p>

<p>这下就很清楚了，虽然十字盘的姿态跟我们控制的是一致的，但是由于桨夹有90度的一个偏转，所以正好就满足了陀螺进动的要求。如果还是想不明白，拿出直升机来一看便知。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X Mavericks上的浏览器插件的问题]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/20/internet-plugins-on-mavericks/"/>
    <updated>2014-01-20T21:30:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/20/internet-plugins-on-mavericks</id>
    <content type="html"><![CDATA[<p>升级了Mavericks之后，发现浏览器中的一些插件出问题了。最先遇到的就是在Safari中经常会蹦出来对话框说，是否要在该网站上运行迅雷（Thunder xxx）插件，有几个选项，yes/no/never for this site&hellip;. 后来又发现旺旺不工作了，也就是在浏览器中点击旺旺图标，旺旺出不来了&hellip;.</p>

<p>所以花了点时间看了一下，原来现在在Safari中有专门的 <code>Internet plug-ins</code> 这样的设置了，而且该设置影响安装的所有浏览器（如Chrome, Firefox）。</p>

<!-- more -->


<p>首先进入Safari的Preferences（COMMAND + ,），在 <code>Security</code> 标签中，有 <code>Internet plug-ins</code> 这一项，我们需要先点击 <code>Allow Plug-ins</code>，然后点击后面的 <code>Manage Website Settings...</code> 按钮出现对话框：</p>

<p><img src="http://www.markzhang.cn/downloads/image/manage-website-settings.png" alt="Manage Website Settings" /></p>

<p>在这里就可以设置每个plugin的处理方式了，如上图所示，针对旺旺插件，我们选择了 <code>Allow Always</code>。你还可以在这里找到其他很多你需要用到的插件，比如淘宝的 <code>AliEdit</code>，也就是密码输入框的插件、迅雷的下载插件等等。值得一提的还有就是支付宝的插件，名字有点怪，叫：<code>npalicdo plugin</code>。</p>

<p>有意思的是，在MacOS X上，所有的插件是统一安装在一个地方的：<code>/Library/Internet Plug-Ins</code>。所以插件一旦安装了，所有的浏览器就都能使用了。只是每个浏览器是否使能某个插件，在各自的设置里面，如上面介绍的Safari的。在Chrome中，那就是在页面：<code>chrome://plugins</code> 里面。</p>

<p>所以其实比如下载了支付宝的浏览器插件，安装的时候，其实就是把文件拷贝到了 <code>/Library/Internet Plug-Ins</code> 这个目录下而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL Programming on MacOS X (Mavericks)]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/06/hellogl-on-macosx/"/>
    <updated>2014-01-06T21:30:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/06/hellogl-on-macosx</id>
    <content type="html"><![CDATA[<p>最近开始看《OpenGL Programming Guide 8th Edition》一书。所以很自然的，就会想把书中的源代码在MacOS X Mavericks上试验一遍。很显然程序是没法在Mavericks上run的，所以就对程序做了一些修改。在试验的过程中，自然也发现了一些书中没有说到的内容，所以记录下来。</p>

<p>事实上，这本书中的代码是在Windows上测试的，所以MacOS X上就会有一些不同。尤其体现在一些第三方的framework/library上。</p>

<p>本文是在试验该书中第一个源程序的时候，发现的一些东西。和我们第一个编写的HelloWorld程序一样，我称该程序为HelloGL。</p>

<!-- more -->


<p>为了方便阅读，所有的代码在最后给出。系统的环境是Mavericks + Xcode 4.6.1。这里说一下我在原书给出的代码上，做出的一些修改：</p>

<h2>有关GLEW</h2>

<p>GLEW当然是可以使用的，只是不像GLUT，Mavericks没有自带GLEW，需要自己下载安装。不过安装也超级简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make glew.lib
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>我尝试过直接make，也就是编译所有的内容（其中包括glewinfo等实用程序），在Mavericks上会编译失败（提示缺少AGL/agl.h）。所以我只编译了glew的库，事实上我们也只需要库就可以了。</p>

<p>有了GLEW之后，只需要include一个 <code>GL/glew.h</code> 就搞定了。因为GLEW会将OpenGL中用到的所有的数据类型和函数都定义一遍，而且提供大量的宏，使我们可以查询一个具体的 <code>feature/函数</code> 在当前平台上是否存在。这也是GLEW的主要功能了。对于函数，GLEW会根据不同平台，去打开对应的库，取出对应函数的地址，从而让我们可以调用到该平台上正确的实现。参看书中的附录F：<code>OpenGL and Window Systems</code>，有详细的解释。</p>

<p>不过StackOverflow上说，其实在MacOS X中，GLEW并不需要。我试验了一下，的确是不需要（当然我只是用本文中的这个简单的程序试验了一下）。理由是：</p>

<blockquote><p>About glew, normally you don&rsquo;t require glew on MacOS due the way how the OpenGL layer is implemented in MacOS. You are restricted to the OpenGL features MacOS provides/exposes. So either the features are available via the headers of MacOS or not.</p>

<p>The header would be #include &lt;OpenGL/gl3.h> where also the naming is missleading, it does not mean only OpenGL 3, it is the same like with the context.</p></blockquote>

<h2>主程序的改动</h2>

<p>主要改动了以下几点：</p>

<ul>
<li><p>去掉了 <code>include "vgl.h"</code>。因为这个头文件中啥实在东西没有，唯一一个需要用到的就是一个 <code>BUFFER_OFFSET</code> 宏的定义，把它拿到主程序文件中来了。</p></li>
<li><p>代码中涉及的两个shader程序：<code>triangle.vert</code> 和 <code>triangle.frag</code>，改名成了 <code>simple.vert</code> 和 <code>simple.frag</code>。一来是感觉更贴切，二来是这两个shader程序在该书的源代码包中有，拷贝过来就能用了。</p></li>
<li><p>如上面所说，GLEW不是必须的，所以我去掉了GLEW相关的代码。</p></li>
<li><p>在main函数中增加了一行，用来打印当前GLSL的版本：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Supported GLSL version is: &quot;</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>  <span class="n">glGetString</span><span class="p">(</span><span class="n">GL_SHADING_LANGUAGE_VERSION</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为后续也会提到，一开始运行程序的时候，会发现shader程序无法编译，所以增加了这一行打印，方便调试。这个也是来自StackOverflow上大佬们的建议。</p>

<ul>
<li>去掉了main函数中这两行代码：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">glutInitContextVersion</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">glutInitContextProfile</span><span class="p">(</span><span class="n">GLUT_CORE_PROFILE</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>理由是，我没有使用书中建议的 <code>freeglut</code>。因为Mavericks，或者准确点来说Xcode自带了GLUT（应该是openglut），所以就没有必要再安装一个类似的玩意了。
而Xcode自带的GLUT，是没有上述的两个函数的。</p>

<ul>
<li>最关键的一点改动：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_RGBA</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>改成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_3_2_CORE_PROFILE</span> <span class="o">|</span> <span class="n">GLUT_RGBA</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>正是由于改动#4，导致程序运行的时候，没有正确的选择OpenGL的版本和profile。所以如果没有这个改动，程序运行会发现shader程序没法编译，错误信息是：<code>unsupported version xxx</code>（shader程序的第一行就是#version）。所以我很小白的在StackOverflow上问了这个问题，最终得到了大佬的回答：</p>

<blockquote><p>MacOS uses Legacy Profile as default for all created OpenGL context. Therefor by default only OpenGL up to 2.1 and GLSL up to 1.20 is supported.</p>

<p>To use OpenGL 3.2+ you need to switch to the Core Profile. The naming here is a little bit confusing because it stats only 3.2Core profile, but actually this 3.2 or later (every OpenGL profile that is supported by the system/driver that is backwards compatible to 3.2)</p>

<p>For glut (depends on the version of glut if it works) the command on MacOS is:</p>

<p>glutInitDisplayMode(GLUT_3_2_CORE_PROFILE | &hellip;  ) Where | &hellip; would be the other options you want to pass to glutInitDisplayMode.</p></blockquote>

<p>正如上面所说，虽然名字叫3_2_CORE_PROFILE，但是其实会使用系统当前最新版本的OpenGL实现啦。上面GLEW一节中也说道，虽然include的头文件名字叫 <code>OpenGL/gl3.h</code>，但其实不是真的只是OpenGL 3啦。</p>

<h2>LoadShaders的改动</h2>

<p>LoadShaders是书中提供的一个用来读取、编译shader程序的一小段代码。这部分内容我几乎没有改动，除了：</p>

<ul>
<li><p>去掉了 <code>#include &lt;GL/gl.h&gt;</code> 等，改成了 <code>#include &lt;OpenGL/gl3.h&gt;</code>，当然如果你用GLEW，也可以改成：<code>#include &lt;GL/glew.h&gt;</code>。</p></li>
<li><p>将LoadShader.cpp中的 <code>_DEBUG</code> 改成了 <code>DEBUG</code>。理由是：Xcode的Project中，如果是编译运行Debug版本，默认就会定义 <code>DEBUG</code> 这个宏，所以做这个修改就省的以后每次新建项目，都要再去定义 <code>_DEBUG</code> 了。</p></li>
</ul>


<h2>其他一些Tips</h2>

<p>代码的改动就是上述的一些内容了。不过为了让程序能在Xcode中编译和运行，还需要做一些工作。这里就作为Tips来描述一下。</p>

<p>注：其实也是没事找事，在终端下自己写一个Makefile就可以搞定的事情，偏要用Xcode。只是自从用了MacOS X之后，还没有用过Xcode，想尝试一下而已。</p>

<ul>
<li><p>有关GLEW的头文件。Xcode中的Project，有一个配置项叫做：<code>Always Search User Paths</code>。需要将这个改成Yes，并将 <code>User Header Search Paths</code> 设置成 <code>/usr/include</code>。否则代码编译的时候就会错误：找不到 <code>GL/glew.h</code>。从Linux编程过来的人表示极度不适应&hellip;</p></li>
<li><p>GLEW的库文件。和Linux下的C编程一样，我们都知道需要在编译的时候给出一个链接的参数：<code>-lGLEW</code>。这可以在Xcode中Project设定的 <code>Other Linker Flags</code> 中设置。但是设置完了之后，再次报告链接错误：找不到libGLEW，但是文件明明就在 <code>/usr/lib</code> 目录下。从Linux编程过来的人再次表示极度不适应&hellip; 最后没办法，只能这样：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /usr/lib/libGLEW.dylib /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk/usr/lib/libGLEW.dylib
</span></code></pre></td></tr></table></div></figure>


<p>所以到了这里，可以基本明白了，Xcode是一个相对独立而且封闭的环境，所有的dependencies都被约束在了Xcode的体系下。我能再次吐槽么？</p>

<ul>
<li>如果要在Xcode中run/debug程序的话，两个shader文件：<code>simple.vert</code> 和 <code>simple.frag</code> 要放到Xcode运行程序的working directory中，也就是这个目录：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/Users/mark/Library/Developer/Xcode/DerivedData/HelloGL-&lt;debug <span class="nb">hash </span>id&gt;/Build/Products/Debug
</span></code></pre></td></tr></table></div></figure>


<p>记得我们在主程序中添加的一行用来打印当前GLSL的版本的代码么？这里派上用处了，将你的shader程序中的 <code>#version xxx</code> 修改成这里打印出来的值，因为这才是你的系统当前支持的GLSL的版本。</p>

<ul>
<li>在Xcode Project设定中，将GLUT和OpenGL添加到 <code>Link Binary with Libraries</code> 中去。这个用过Xcode的都应该知道：</li>
</ul>


<p><img src="http://www.markzhang.cn/downloads/image/HelloGL-link-libs.png" alt="HelloGL Link Binary with Libraries" /></p>

<p>整个项目的文件列表是长这个样子的：</p>

<p><img src="http://www.markzhang.cn/downloads/image/HelloGL-files.png" alt="HelloGL files" /></p>

<h2>代码</h2>

<figure class='code'><figcaption><span>HelloGL主程序 c++ (main.cpp)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/main.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Installed by building glew source</span>
</span><span class='line'><span class="cm"> * Also need to be included first because it defines all &quot;gl&quot; stuffs</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * About glew, normally you don&#39;t require glew on MacOS due the way how the</span>
</span><span class='line'><span class="cm"> * OpenGL layer is implemented in MacOS. You are restricted to the OpenGL</span>
</span><span class='line'><span class="cm"> * features MacOS provides/exposes. So either the features are available via</span>
</span><span class='line'><span class="cm"> * the headers of MacOS or not. There header would be #include &lt;OpenGL/gl3.h&gt;</span>
</span><span class='line'><span class="cm"> * where also the naming is missleading, it does not mean only OpenGL 3,</span>
</span><span class='line'><span class="cm"> * it is the same like with the context.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="c1">//#include &lt;GL/glew.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;LoadShaders.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;GLUT/GLUT.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BUFFER_OFFSET(x) ((const void*)(x))</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">VAO_IDs</span> <span class="p">{</span> <span class="n">Triangles</span><span class="p">,</span> <span class="n">NumVAOs</span> <span class="p">};</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Buffer_IDs</span> <span class="p">{</span> <span class="n">ArrayBuffer</span><span class="p">,</span> <span class="n">NumBuffers</span> <span class="p">};</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Attrib_IDs</span> <span class="p">{</span> <span class="n">vPosition</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span> <span class="n">VAOs</span><span class="p">[</span><span class="n">NumVAOs</span><span class="p">];</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">Buffers</span><span class="p">[</span><span class="n">NumBuffers</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">GLuint</span> <span class="n">NumVertices</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glGenVertexArrays</span><span class="p">(</span><span class="n">NumVAOs</span><span class="p">,</span> <span class="n">VAOs</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAOs</span><span class="p">[</span><span class="n">Triangles</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">GLfloat</span> <span class="n">vertices</span><span class="p">[</span><span class="n">NumVertices</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">{</span> <span class="o">-</span><span class="mf">0.90</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.90</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>  <span class="mf">0.85</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.90</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="o">-</span><span class="mf">0.90</span><span class="p">,</span>  <span class="mf">0.85</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>  <span class="mf">0.90</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.85</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>  <span class="mf">0.90</span><span class="p">,</span>  <span class="mf">0.90</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="o">-</span><span class="mf">0.85</span><span class="p">,</span>  <span class="mf">0.90</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glGenBuffers</span><span class="p">(</span><span class="n">NumBuffers</span><span class="p">,</span> <span class="n">Buffers</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span> <span class="n">Buffers</span><span class="p">[</span><span class="n">ArrayBuffer</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">glBufferData</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">vertices</span><span class="p">),</span>
</span><span class='line'>           <span class="n">vertices</span><span class="p">,</span> <span class="n">GL_STATIC_DRAW</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">ShaderInfo</span> <span class="n">shaders</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">GL_VERTEX_SHADER</span><span class="p">,</span> <span class="s">&quot;simple.vert&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">GL_FRAGMENT_SHADER</span><span class="p">,</span> <span class="s">&quot;simple.frag&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">GL_NONE</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">GLuint</span> <span class="n">program</span> <span class="o">=</span> <span class="n">LoadShaders</span><span class="p">(</span><span class="n">shaders</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glUseProgram</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">vPosition</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span>
</span><span class='line'>                <span class="n">GL_FALSE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">BUFFER_OFFSET</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">vPosition</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAOs</span><span class="p">[</span><span class="n">Triangles</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">NumVertices</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glFlush</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glutInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_3_2_CORE_PROFILE</span> <span class="o">|</span> <span class="n">GLUT_RGBA</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glutInitWindowSize</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glutCreateWindow</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Normally don&#39;t need GLEW on MacOSX.</span>
</span><span class='line'><span class="cm">  * But set glewExperimental to TRUE if you want to use it.</span>
</span><span class='line'><span class="cm">  * Otherwise some funcs like &quot;glGenVertexArray&quot; will be NULL.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="cm">/* glewExperimental = GL_TRUE;</span>
</span><span class='line'><span class="cm"> if (glewInit()) {</span>
</span><span class='line'><span class="cm">     cerr &lt;&lt; &quot;Unable to initialize GLEW... exiting&quot; &lt;&lt; endl;</span>
</span><span class='line'><span class="cm">     exit(EXIT_FAILURE);</span>
</span><span class='line'><span class="cm"> } */</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Supported GLSL version is: &quot;</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>      <span class="n">glGetString</span><span class="p">(</span><span class="n">GL_SHADING_LANGUAGE_VERSION</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">init</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glutDisplayFunc</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glutMainLoop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>LoadShaders c++ (LoadShaders.cpp)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/LoadShaders.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  --- LoadShaders.cxx ---</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;LoadShaders.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __cplusplus</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span>
</span><span class='line'><span class="n">ReadShader</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">filename</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FILE</span><span class="o">*</span> <span class="n">infile</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span> <span class="n">filename</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">infile</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Unable to open file &#39;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">filename</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&#39;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* DEBUG */</span><span class="cp"></span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fseek</span><span class="p">(</span> <span class="n">infile</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_END</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">len</span> <span class="o">=</span> <span class="n">ftell</span><span class="p">(</span> <span class="n">infile</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">fseek</span><span class="p">(</span> <span class="n">infile</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_SET</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLchar</span><span class="o">*</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fread</span><span class="p">(</span> <span class="n">source</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">infile</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span> <span class="n">infile</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">source</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">GLchar</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">source</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span>
</span><span class='line'><span class="n">LoadShaders</span><span class="p">(</span> <span class="n">ShaderInfo</span><span class="o">*</span> <span class="n">shaders</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">shaders</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLuint</span> <span class="n">program</span> <span class="o">=</span> <span class="n">glCreateProgram</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ShaderInfo</span><span class="o">*</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">shaders</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">GL_NONE</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">GLuint</span> <span class="n">shader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="o">=</span> <span class="n">shader</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span> <span class="n">source</span> <span class="o">=</span> <span class="n">ReadShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">filename</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">source</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">shaders</span><span class="p">;</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">GL_NONE</span><span class="p">;</span> <span class="o">++</span><span class="n">entry</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">glDeleteShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glShaderSource</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">source</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">source</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glCompileShader</span><span class="p">(</span> <span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">GLint</span> <span class="n">compiled</span><span class="p">;</span>
</span><span class='line'>        <span class="n">glGetShaderiv</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="n">GL_COMPILE_STATUS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">compiled</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">compiled</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>            <span class="n">GLsizei</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>            <span class="n">glGetShaderiv</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="n">GL_INFO_LOG_LENGTH</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GLchar</span><span class="o">*</span> <span class="n">log</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="n">glGetShaderInfoLog</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">log</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Shader compilation failed: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">log</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="k">delete</span> <span class="p">[]</span> <span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* DEBUG */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glAttachShader</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">++</span><span class="n">entry</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef GL_VERSION_4_1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">GLEW_VERSION_4_1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// glProgramParameteri( program, GL_PROGRAM_SEPARABLE, GL_TRUE );</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* GL_VERSION_4_1 */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glLinkProgram</span><span class="p">(</span> <span class="n">program</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLint</span> <span class="n">linked</span><span class="p">;</span>
</span><span class='line'>    <span class="n">glGetProgramiv</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">GL_LINK_STATUS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">linked</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">linked</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>        <span class="n">GLsizei</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>        <span class="n">glGetProgramiv</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">GL_INFO_LOG_LENGTH</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">GLchar</span><span class="o">*</span> <span class="n">log</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">glGetProgramInfoLog</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">log</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Shader linking failed: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">log</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* DEBUG */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">shaders</span><span class="p">;</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">GL_NONE</span><span class="p">;</span> <span class="o">++</span><span class="n">entry</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">glDeleteShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __cplusplus</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>LoadShaders头文件 cpp (LoadShaders.h)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/LoadShaders.h'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef __LOAD_SHADERS_H__</span>
</span><span class='line'><span class="cp">#define __LOAD_SHADERS_H__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;OpenGL/gl3.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif  </span><span class="c1">// __cplusplus</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  LoadShaders() takes an array of ShaderFile structures, each of which</span>
</span><span class='line'><span class="c1">//    contains the type of the shader, and a pointer a C-style character</span>
</span><span class='line'><span class="c1">//    string (i.e., a NULL-terminated array of characters) containing the</span>
</span><span class='line'><span class="c1">//    entire shader source.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  The array of structures is terminated by a final Shader with the</span>
</span><span class='line'><span class="c1">//    &quot;type&quot; field set to GL_NONE.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  LoadShaders() returns the shader program value (as returned by</span>
</span><span class='line'><span class="c1">//    glCreateProgram()) on success, or zero on failure. </span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GLenum</span>       <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span>  <span class="n">filename</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GLuint</span>       <span class="n">shader</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">ShaderInfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span> <span class="n">LoadShaders</span><span class="p">(</span> <span class="n">ShaderInfo</span><span class="o">*</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __cplusplus</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __LOAD_SHADERS_H__</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>simple.vert cpp (simple.vert)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/simple.vert'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#version 410 core</span>
</span><span class='line'>
</span><span class='line'><span class="n">layout</span><span class="p">(</span><span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">in</span> <span class="n">vec4</span> <span class="n">vPosition</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">gl_Position</span> <span class="o">=</span> <span class="n">vPosition</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>simple.frag cpp (simple.frag)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/simple.frag'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#version 410 core</span>
</span><span class='line'>
</span><span class='line'><span class="n">out</span> <span class="n">vec4</span> <span class="n">fColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">fColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[伟力v911-2 心得体会]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/02/v911-2-tips/"/>
    <updated>2014-01-02T20:56:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/02/v911-2-tips</id>
    <content type="html"><![CDATA[<p>伟力v911-2是一款很不错的入门4通航模。说不错，主要是它有以下的优点：</p>

<ul>
<li>便宜，两百块不到搞定  :)</li>
<li>耐炸，主要是飞机自重小。相比外观很漂亮，带什么合金外壳，还带闪灯的那种，增加了自重，所以电机相对要大功率的，还要增加电池容量。此外虽然机身有合金外壳，但是主轴、尾部没有啊，所以掉下来这些部分就很容易挂掉。</li>
<li>体积小，可以在室内飞行，不用专门到户外去找飞场。</li>
<li>整机只有30个零件，维修方便</li>
</ul>


<!-- more -->


<p>应该说这种结构简单，零件少容易拆解的飞机，可以方便的让我们了解直升机的一些基本原理。但是理论知识是一方面，真的摔坏了开始动手修理了，那就是另外一个问题了，有很多实际操作上的经验。</p>

<p>网上都说尾电机是第一个容易挂的，很奇怪我的尾电机到现在还算“工作正常”。有的时候会发现不转，但概率很小。现在尾电机的主要问题就是有一些异响，但鉴于飞机锁尾、自旋都正常，就懒得去折腾它了。</p>

<p>我的感受是，主旋翼容易挂。“挂”并不意味着一定是断掉了或是变形了，由于在炸机的时候主旋翼多多少少都会有一些损伤，所以炸多了就会发现飞机有一些异常情况，比如有异响，飞机震动的厉害等。这个时候就有可能是：</p>

<ul>
<li>主旋翼变形了，虽然看起来好像是好的。</li>
<li>主旋翼磨损之后，两片桨可能重量不一致了，重心不对称了。</li>
</ul>


<p>所以，如果怀疑是主旋翼的问题，直接换一对上去试了再说。平常买配件的时候可以一次多买几对，反正五块钱一对。</p>

<p>换主旋翼的时候，有一个问题，就是要重新安装那三个球头锁扣。我换了N次之后，发现有这么几个问题：</p>

<ul>
<li>这三个锁扣都是塑料的，而且很软，而安装的时候又需要用力按，所以一不小心就会变形。</li>
<li>一旦变形，特别是和桨连接的（中间那个）那个变形的话，会导致飞机向左或向右偏。因为变形之后，舵机拉动旋翼左右倾斜从而左右侧飞的时候，这个变形的锁扣会导致旋翼左右倾斜不顺畅。可以用手捏着平衡杆的一头，上下摇动，如果有阻滞感，那就是锁扣固定的不太好。正常情况下，平衡杆上下摇动是非常顺畅的。</li>
</ul>


<p>所以，换这三个球头锁扣的时候，我是这样的：</p>

<ol>
<li>先连接平衡杆</li>
<li>另一头接好要接到桨上去的那个锁扣，然后将这个锁扣竖着对准桨的连接点按上去</li>
<li>摇动一下平衡杆，让中间这个锁扣横过来，自然就扣住了桨。不要去尝试横着强行将这个锁扣按到桨上去，这样最容易变形</li>
<li>连接好最后一个挂在十字盘上的锁扣</li>
</ol>


<p>如果原来十字盘上的锁扣是扣着的，那么先拆下这个，然后再从第一步开始。我的经验是，当平衡杆和十字盘的锁扣都是扣着的时候，想尝试去安装中间那个锁扣（就是扣到桨上的那个），那是很困难的。因为这个时候这个锁扣只有横着才能扣上去，而想要横着扣上去那是相当的麻烦，很容易变形。要让这个锁扣竖着套上桨，然后动一下平衡杆，它就横过来了，很方便而且不会变形。</p>

<p>其他还有一些体会，网上都有一些文章，就不说了。比如连接舵机摇臂和十字盘的连杆，是有螺纹的，可以顺时针、逆时针旋转，从而加长或缩短连杆的长度，从而影响舵量。其实我觉得这个完全可以用遥控器上的微调来做到，没有必要大动干戈拆机去调这个连杆。</p>

<p><img src="http://www.markzhang.cn/downloads/image/v911.jpg" alt="v911-2" /></p>

<p>零件：</p>

<p><img src="http://www.markzhang.cn/downloads/image/v911-parts.jpg" alt="v911-2 零件图" /></p>

<p>炸机：</p>

<p><img src="http://www.markzhang.cn/downloads/image/v911-zha.jpg" alt="v911-2 炸机图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress - 有条件的为文章添加转载声明]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/27/add-origin-statement-conditionally/"/>
    <updated>2013-12-27T15:33:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/27/add-origin-statement-conditionally</id>
    <content type="html"><![CDATA[<p>对于原创的文章，我在Octopress的post模板文件中，加入了一段转载声明。但对于一些好的文章，经常也会忍不住想要转载。所以，对于转载的文章，还出现这么一个转载声明就是打自己耳光了。很显然，要做个小手脚，对于转载的文章，去掉这个转载声明。有意思的是，在这个过程中，我居然发现 <code>liquid</code> 语法中没有 <code>逻辑非</code> ?!</p>

<!-- more -->


<p>模板文件的改动非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/source/_layouts/post.html b/source/_layouts/post.html</span>
</span><span class='line'><span class="gh">index 5d83b4d201f6..12d6466734ec 100644</span>
</span><span class='line'><span class="gd">--- a/source/_layouts/post.html</span>
</span><span class='line'><span class="gi">+++ b/source/_layouts/post.html</span>
</span><span class='line'><span class="gu">@@ -7,11 +7,14 @@ single: true</span>
</span><span class='line'> &lt;article class=&quot;hentry&quot; role=&quot;article&quot;&gt;
</span><span class='line'>   {% include article.html %}
</span><span class='line'>   &lt;footer&gt;
</span><span class='line'><span class="gi">+    {% if page.categories contains &quot;reprints&quot; %}</span>
</span><span class='line'><span class="gi">+    {% else %}</span>
</span><span class='line'>     &lt;section style=&quot;margin-top:15px;background:none repeat scroll 0pt 0pt rgb(220,220,220);padding:0.4em 0.8em&quot;&gt;
</span><span class='line'>       &lt;strong&gt;版权所有 &amp;copy;{{ site.time | date: &#39;%Y&#39; }} 转载本站文章请注明： &lt;/strong&gt;转载自 http://markzhang.cn&lt;br&gt;
</span><span class='line'> 原文链接: http://www.markzhang.cn{{ page.url }}&lt;br&gt;
</span><span class='line'> 您可以随意地转载本站的文章，但是必须在醒目位置注明来源及本站链接，不可以将本站文章商业化使用，或者修改、转换或者以本作品为基础进行创作。
</span><span class='line'>     &lt;/section&gt;
</span><span class='line'><span class="gi">+    {% endif %}</span>
</span><span class='line'>
</span><span class='line'>     &lt;p class=&quot;meta&quot;&gt;
</span><span class='line'>       {% include post/author.html %}
</span></code></pre></td></tr></table></div></figure>


<p>所以，大体上是这样：</p>

<ol>
<li>代码检查当前的文章是否属于 <code>reprints</code> 这个category，如果是的话，就不会加入转载声明那一段文字。</li>
<li>由于Octopress中一篇文章可以属于多个category，所以，新增 <code>reprints</code> 这么一个category不会带来什么影响，反而还可以让我们通过这个category快速的浏览所有我们转载的文章。</li>
<li>有意思的就是，正如前面所说，<code>liquid</code> 语法中没有 <code>逻辑非</code>，所以我在StackOverflow上找到了大家一般是这么做的：if后面直接接else. 相当的ugly，但是it works!</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X 如何截屏]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot/"/>
    <updated>2013-12-25T21:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot</id>
    <content type="html"><![CDATA[<p><em>文章是从网上找来的，但是忘记当初的网址了，所以没写上转载的地址。如果您发现这是您的原创，请告知，我会加上转载信息，谢谢。</em></p>

<p>在Mac OS X下有很强大的截屏功能，它不仅仅是对屏幕的全屏COPY，而是包括很多细节在里面，就从这点来看，已经比过所有版本的Windows了。</p>

<p>下面我来向大家详细介绍一下： 　　</p>

<!-- more -->


<p>对全屏的截图我们可以通过按 苹果键（花键）+ Shift键 + 3来执行，之后伴随着清脆的一声提示音后，在桌面上就会生成一个图片文件，这就是刚刚截屏的图片了，默认文件类型是PNG的。</p>

<p>自定义截屏是很方便的一个功能，是可以通过按 苹果键（花键）+ Shift键 + 4来执行，当执行组合按键之后鼠标指针的光标会变成十字，现在你就可以画出你想要截取屏幕的范围了，画好后截出的图片也会放在桌面上。</p>

<p>另外，如果在按 苹果键（花键）+ Shift键 + 4后按下 空格键，鼠标指针就会变成一个小照相机，这时是截取对象方式的截屏，把小照相机放在你想截图的窗口上按鼠标左键后就执行了对该窗口的截屏，很方便吧，</p>

<p>还有一个用法就是苹果键（花键）+Shift键再 + Ctrl键 + 4，这样截出的文件就放入系统的剪贴板了，不会生成文件出来，在做文档时直接粘贴就很方便了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defeating the Hackers]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/17/defeating-the-hackers/"/>
    <updated>2013-12-17T14:06:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/17/defeating-the-hackers</id>
    <content type="html"><![CDATA[<p>Defeating the Hackers是BBC拍摄的一部纪录片。本片主要描述了目前生活中，特别是网络中的各种安全问题（窃取隐私，盗取帐号，删除资料，控制设备。。。），然后引申出了计算机技术中的一些安全防范技术和手段，是相当通俗易懂的科普类纪录片。</p>

<p><a href="http://www.youtube.com/watch?v=_4NrrKTYmBI">http://www.youtube.com/watch?v=_4NrrKTYmBI</a></p>

<!-- more -->


<p>片子中依次讲到了这么一些东西：</p>

<h2>社交黑客</h2>

<p>简单来说，就是利用搜索引擎，搜索你论坛的用户名、微博帐号、Apple ID&hellip; 从而得到更多的目标的相关信息，比如生日、喜好、邮箱、朋友名字、经常在哪里活动等等。然后就可以利用安保问题来重置你的账户密码。</p>

<p>我见过更加暴力的，直接HACK你的邮箱，得到你的EMail，里面很有可能就会包含你在各大网站、论坛的注册邮件，从而进一步HACK掉你更多的帐户。而且，现在很多的网站都提供利用EMail找回密码的功能，所以邮箱一旦失守，那后果将非常严重。</p>

<h2>RSA 公钥/私钥</h2>

<p>这是现在使用非常普遍和广泛的加密算法。从银行、加密网页、SSH等无处不在。但是说起来它的基础原理却非常简单。就是一个有趣的数学现象（我不知道这个是否被证明了，如果证明了那就应该是定理了）：<code>semi-prime</code>。当两个质数相乘，得到的就是一个 <code>semi-prime</code> 。<code>semi-prime</code> 和只能被1和自己整除的质数相比，只能被四个数整除：1、自己和形成该semi-prime的两个质数。</p>

<p>所以这就变的非常的有意思了。我们可以将两个巨大无比的质数相乘，得到一个更巨大无比的 <code>semi-prime</code> ，然后将这个 <code>semi-prime</code> 作为公钥分发出去，而私钥就是形成该 <code>semi-prime</code> 的两个质数。用脚趾头想都能知道，生成这个巨大无比的 <code>semi-prime</code> 很容易，但是如果给定一个巨大无比的 <code>semi-prime</code> ，要找出形成该 <code>semi-prime</code> 的两个质数，那则是非常困难的事情。</p>

<p>影片中展示了一个打印出来需要上千页 A4 纸的一个 <code>semi-prime</code>，说如果利用现在的计算机要破解该 <code>semi-prime</code>，则需要上百万年的时间&hellip;</p>

<h2>量子计算机 &ndash; RSA的克星</h2>

<p>有关量子力学，我只听说过一件事情：薛定谔的猫。引用一下百度百科上的内容：</p>

<blockquote><p>处于所谓“叠加态”的微观粒子之状态是不确定的，例如：电子可以几乎同时位于几个不同的地点，直到被观察测量（观测）时，才在某处出现。这种事如果发生在宏观世界的日常生活中，就好比：我在家中何处是不确定的，你看我一眼，我就突然现身于某处——客厅、餐厅、厨房、书房或卧室都有可能，而在你看我之前，我像云雾般隐身在家中，穿墙透壁到处游荡。这种“魔术”别说常人认为荒谬，物理学家如薛定谔也想不通。于是薛定谔就在1935年编出了这个佯谬，以引起注意。薛定谔想要借此阐述的物理问题是：宏观世界是否也遵从适用于微观尺度的量子叠加原理。“薛定谔的猫”佯谬巧妙地把微观放射源和宏观的猫联系起来，旨在否定宏观世界存在量子叠加态。是薛定谔试图证明量子力学在宏观条件下的不完备性而提出的一个思想实验。</p>

<p>把一只猫放进一个不透明的盒子里，然后把这个盒子连接到一个包含一个放射性原子核和一个装有有毒气体的容器的实验装置。设想这个放射性原子核在一个小时内有50%的可能性发生衰变。如果发生衰变，它将会发射出一个粒子，而发射出的这个粒子将会触发这个实验装置，打开装有毒气的容器，从而杀死这只猫。根据量子力学，未进行观察时，这个原子核处于已衰变和未衰变的叠加态，但是，如果在一个小时后把盒子打开，实验者只能看到“衰变的原子核和死猫”或者“未衰变的原子核和活猫”两种情况。薛定谔在1935年发表了一篇论文，题为《量子力学的现状》，在论文的第5节，薛定谔描述了那个常被视为恶梦的猫实验：哥本哈根学派说，没有测量之前，一个粒子的状态模糊不清，处于各种可能性的混合叠加。比如一个放射性原子，它何时衰变是完全概率性的。只要没有观察，它便处于衰变/不衰变的叠加状态中，只有确实地测量了，它才会随机地选择一种状态而出现。那么让我们把这个原子放在一个不透明的箱子中让它保持这种叠加状态。薛定谔想象了一种结构巧妙的精密装置，每当原子衰变而放出一个中子，它就激发一连串连锁反应，最终结果是打破箱子里的一个毒气瓶，而同时在箱子里的还有一只可怜的猫。事情很明显：如果原子衰变了，那么毒气瓶就被打破，猫就被毒死。要是原子没有衰变，那么猫就好好地活着。</p>

<p>这个理想实验的巧妙之处，在于通过“检测器－原子－毒药瓶”这条因果链，似乎将铀原子的“衰变－未衰变叠加态”与猫的“死－活叠加态”联系在一起，使量子力学的微观不确定性变为宏观不确定性；微观的混沌变为宏观的荒谬——猫要么死了，要么活着，两者必居其一，不可能同时既死又活！难怪英国著名科学家霍金听到薛定谔猫佯谬时说：“我去拿枪来把猫打死！”</p></blockquote>

<p>所以现在的科学家在尝试制作量子计算机，我不明白量子力学，我的理解是：由于微观粒子处在不确定的状态，只有被观测时才有一个你看到的确定状态，所以量子计算机非常适合做海量并行的工作。</p>

<p>片子中的科学家在尝试制造一台量子计算机，计算出 <code>15 = 3 x 5</code>。所以利用量子计算机可以同时处理海量并行计算的特点，求解一个大 <code>semi-prime</code> 就将变的不再不可行，所以说量子计算机的出现，会导致 RSA 出现挑战。</p>

<h2>利用量子力学的新的认证机制</h2>

<p>这是一个很有趣的新的认证机制。拿经典的Alice、Bob和Eve来举例。</p>

<p>Alice想给Bob发送数据。Alice使用一些光子作为媒介，让这些光子通过她事先设定好的一组光栅，这些光栅可以是两种，一种是横或竖的，另外一种是四十五度角的。当然光子通过这些光栅，就会变成横或竖的，或者是四十五度角的。所以你可以定义横或竖的光子是1，四十五度角的是0。</p>

<p>所以当Bob收到这一组光子的时候，Bob也必须利用一组光栅来观测这些光子。由于Bob不知道每个光子Alice的光栅的设置，所以Bob就随机选用这两种光栅来观测这一组光子，同时将观测的结果发回给Alice。Alice会告诉Bob，哪些光子他观测的是错误的，从而Alice和Bob就知道哪些光子需要从这组光子中剔除出去。他们可以使用剩下的，他们两人都观测到同一结果的光子来做为一个密钥，从而加密后续的真正的数据的传输。</p>

<p>此时如果Eve想窃听Alice和Bob之间的数据，她就面临一个问题：该如何选用正确的光栅来观测这组光子。由于量子力学中，粒子本身处于不确定状态，而一旦你选用了一种观测手段之后，粒子就会发生改变。所以Eve在不知道正确的光栅序列（也就是正确的观测方法）之前，是无法得到正确的光子数据的。这就避免了数据在传输的过程中被第三方监听。</p>

<p>而如果Eve在观测了这组光子之后，再把数据发给Bob或是Alice，他们也可以判断出该组光子是否被人监听过，因为光子一旦被Eve使用了不正确的观测方法观测过之后，就已经发生了改变。</p>

<p>Awesome, Hah?</p>

<p>但是需要明白的是，这种机制无法防范 “中间人” 攻击。也就是面对Alice，Eve伪装成Bob，而面对Bob，Eve伪装成Alice。这种机制只能做到：</p>

<ol>
<li><p>让Alice和Bob能知道他们之间的数据是否被人窃听过。</p></li>
<li><p>在Alice和Bob两人之间，直接流转的数据是安全的。</p></li>
</ol>


<h2>密码之外的新的安全认证手段</h2>

<p>片子的最后，谈到了除了密码之外的新的安全认证手段。谈到这个，人们第一反应就是指纹、虹膜这些。但是指纹、虹膜也是可以复制的，所以也并不安全。</p>

<p>所以有一些科学家现在在利用更 Unique 的一些东西作为安全认证的载体：比如片子中举的例子：<code>muscle memory</code></p>

<p>片子中举了一个例子很有意思。科学家们做了一个音乐游戏，类似于跳舞机，只不过这是弹吉他。屏幕上掉下来不同的球，等球到屏幕底部的一个框中的时候，就需要弹奏吉他上不同的部位。通过反复练习，让你的肌肉熟悉这种模式和感觉，同时计算机也会记录下你的这种 Unique 的 <code>muscle memory</code>。</p>

<p>然后，每次需要开机登录、认证的时候，计算机会启动一个特别设计的弹吉他游戏，你需要再次弹奏一次（只不过这次会简短很多），此时计算机就可以跟你之前弹奏的数据进行比较，从而对使用者的身份做认证。</p>

<p>老实说，不管使用什么方式，我只希望这些东西尽快的实现并进入实用阶段，我实在厌烦了密码这个破玩意，不安全而且还需要你记忆他们。</p>
]]></content>
  </entry>
  
</feed>
