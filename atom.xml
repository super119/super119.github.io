<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2014-08-01T13:18:31+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Winbox for Mac OS X，修改界面字体]]></title>
    <link href="http://www.markzhang.cn/blog/2014/07/24/winbox-mac-change-font/"/>
    <updated>2014-07-24T18:19:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/07/24/winbox-mac-change-font</id>
    <content type="html"><![CDATA[<p>RouterOS（或简称ROS）是拉脱维亚的Mikrotik开发的一个强大到变态（对于个人用户而言）的路由系统。基于Linux，支持x86和MIPS（routerboard）。也就是说，你可以找一台PC来，装上routeros，就变身成了一台路由器。所以也有很多人称RouterOS为软路由。</p>

<p>Winbox是Mikrotik开发的RouterOS的管理工具（客户端）。当然，RouterOS也有网页版和命令行（终端，支持SSH，串口等）的管理界面，但是Winbox是相对来说最直观和好用的（当然用多了肯定到最后就是纯命令行了）。</p>

<p>有一个问题就是，Winbox只有windows版的。在Mac和Linux上，要使用wine来运行（或安装虚拟机）。</p>

<!-- more -->


<p>对于Mac OS X，网上有爱好者已经做好了一个包，下载下来安装即可，不用自己去折腾安装和配置 <code>wine</code>。地址在这里：</p>

<p><a href="http://wiki.mikrotik.com/wiki/MikroTik_WinBox_for_Mac_StandAlone">http://wiki.mikrotik.com/wiki/MikroTik_WinBox_for_Mac_StandAlone</a></p>

<p>的确很好用，就是有一个问题，字体太难看。看起来用的是默认的宋体，所以英文显示效果不忍直视。</p>

<p>所以很自然想修改字体。说起修改这个字体，其实就是修改windows的默认字体。参考了这篇文章：</p>

<p><a href="http://linfan.info/blog/2012/03/01/wine-mac/">http://linfan.info/blog/2012/03/01/wine-mac/</a></p>

<p>具体可以这么做：</p>

<ul>
<li>找一个喜欢的字体（Mac OS X自带了很多字体，如果安装了Office for Mac，那微软的很多字体也都有了），拷贝到 <code>/Applications/Winbox.app/drive_c/windows/Fonts</code> 目录下。比如我用的是微软雅黑：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cp /Library/Fonts/Microsoft/Microsoft<span class="se">\ </span>Yahei.ttf /Applications/WinBox.app/drive_c/windows/Fonts
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>使用Wine运行注册表编辑器。这个打包好的Winbox for Mac，使用的是Wineskin（就是一个wine的wrapper，这样就把winbox.exe做成了Mac上的Winbox.app），所以这样：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>open /Applications/WinBox.app/Wineskin.app/
</span></code></pre></td></tr></table></div></figure>


<p>然后点击 <code>Advanced</code> 按钮，再选择 <code>Tools</code> 标签页，最后点击 <code>Registry Editor (regedit)</code> 按钮，出现windows的注册表编辑器，导入这个注册表：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="err">REGEDIT4</span>
</span><span class='line'>
</span><span class='line'><span class="k">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span>
</span><span class='line'><span class="na">&quot;Microsoft Yahei&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Comic Sans MS&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Courier&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Courier New&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Fixedsys&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Helv&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Helvetica&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Lucida Console&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Lucida Sans&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Microsoft Sans Serif&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MingLiU&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;PMingLiu&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS Shell Dlg&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS Shell Dlg 2&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS Dialog&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS Gothic&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS PGothic&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS UI Gothic&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS Mincho&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;MS PMincho&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;SimHei&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;SimSun&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;NSimSun&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;System&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Tahoma&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Times&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Times New Roman&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Tms Rmn&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Trebuchet MS&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span><span class='line'><span class="na">&quot;Verdana&quot;</span><span class="o">=</span><span class="s">&quot;Microsoft Yahei&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就OK了，再次打开Winbox，终于看到舒服的界面了：</p>

<p><img src="http://www.markzhang.cn/downloads/image/mac-winbox-change-font.png" alt="Mac Winbox changed font" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux netfilter概述，mangle/nat/filter, prerouting/input/forward...到底是啥]]></title>
    <link href="http://www.markzhang.cn/blog/2014/07/23/netfilter-overview/"/>
    <updated>2014-07-23T18:30:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/07/23/netfilter-overview</id>
    <content type="html"><![CDATA[<p>本文转载自：</p>

<p><a href="http://shorewall.net/NetfilterOverview.html">http://shorewall.net/NetfilterOverview.html</a></p>

<!-- more -->


<p>Netfilter consists of three tables: Filter, Nat and Mangle. Each table has a number of build-in chains: PREROUTING, INPUT, FORWARD, OUTPUT and POSTROUTING.</p>

<p>Rules in the various tables are used as follows:</p>

<p>Filter
Packet filtering (rejecting, dropping or accepting packets)</p>

<p>Nat
Network Address Translation including DNAT, SNAT and Masquerading</p>

<p>Mangle
General packet header modification such as setting the TOS value or marking packets for policy routing and traffic shaping.</p>

<p>Raw
Used primarily for creating exemptions from connection tracking with the NOTRACK target. Also used for stateless DNAT.</p>

<p>Rawpost
Used for stateless SNAT.</p>

<p>The following diagram shows how packets traverse the various builtin chains within Netfilter. Note that not all table/chain combinations are used.</p>

<p><img src="http://www.markzhang.cn/downloads/image/netfilter-overview.png" alt="Netfilter Overview" /></p>

<p>&ldquo;Local Process” means a process running on the Shorewall system itself.</p>

<p>A more elaborate version of this flow is available here and this one contrasts the Netfilter flow with that of ipchains.</p>

<p>In the above diagram are boxes similar to this:</p>

<p><img src="http://www.markzhang.cn/downloads/image/netfilter-input-chain.png" alt="Input chain" /></p>

<p>The above box gives the name of the built-in chain (INPUT) along with the names of the tables (Mangle and Filter) that the chain exists in and in the order that the chains are traversed. The above sample indicates that packets go first through the INPUT chain of the Mangle table then through the INPUT chain of the Filter table. When a chain is enclosed in parentheses, Shorewall does not use the named chain (INPUT) in that table (Mangle).</p>

<p><strong> Keep in mind that chains in the Nat table are only traversed for new connection requests (including those related to existing connections) while the chains in the other tables are traversed on every packet. </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X（Mavericks）共享VPN给其他设备]]></title>
    <link href="http://www.markzhang.cn/blog/2014/07/17/mac-share-vpn-connection/"/>
    <updated>2014-07-17T11:22:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/07/17/mac-share-vpn-connection</id>
    <content type="html"><![CDATA[<p>之前写过一篇文章叫“Chnroutes的使用“，主要说的是如何通过使用 <code>chnroutes</code> 从而将国内和国外的路由分开，国内走正常路由，国外则走VPN。现在的问题是，如果在一台电脑上有了VPN之后，如何将这个VPN share给其他设备，比如PS3？</p>

<!-- more -->


<p>首先很自然想到的是Mac OS X（Mavericks）自带的 <code>Internet Sharing</code> 功能：</p>

<p><img src="http://www.markzhang.cn/downloads/image/mac-internet-sharing.png" alt="Mac OS X Internet Sharing" /></p>

<p>但是通过使用后发现有如下的问题：</p>

<ol>
<li><p>你需要有两个网络设备，才能开始share。上面的截图也可以看到，你要选择一个 <code>From</code> 的设备，再选择 <code>To</code> 的网络设备（也就是说其他设备是通过本机的这个网络设备连接的）。</p></li>
<li><p>当然你可以说，VPN在Mac OS X里面也是一个单独的网络设备啊。是，但是通过试验，如果你只有一个网络设备，比如WIFI，那么就意味着我们既需要通过这个WIFI去连接VPN，还要通过这个WIFI让其他的设备能够连到本机，这是没法做到的。试验的结果就是，当你开了 <code>Internet Sharing</code> 之后，你的VPN就拨不上去（一拨就掉）；当你开了VPN之后，<code>Inetnet Sharing</code> 一开你的VPN就掉。事实上，如果通过WIFI来share的话，你会发现Mac OS X会将WIFI配置成一个AP，所以自然一旦被enable，你的VPN就掉了。</p></li>
<li><p>就算以上两点对你来说都没问题，这第三点就是绝望的来源：Mac OS X不会forward VPN的数据。也就是说，你想要通过Mac OS X的这个 <code>Internet Sharing</code> 功能来share你的VPN的话，是不可行的。</p></li>
</ol>


<p>所以没办法还是通过万能的Google来寻找答案，答案在这里：</p>

<p><a href="http://rodrigo.sharpcube.com/2010/06/20/using-and-sharing-a-vpn-connection-on-your-mac/">http://rodrigo.sharpcube.com/2010/06/20/using-and-sharing-a-vpn-connection-on-your-mac/</a></p>

<p>基本上就是需要我们写脚本来实现，上面这篇文章中，VPN使用的是OpenVPN，我测试的时候，使用的是PPTP的VPN，所以根据上文中 <code>Troubleshooting</code> 一节的描述，我做了这么两个脚本：</p>

<figure class='code'><figcaption><span>开启VPN共享 bash (share-pptp-vpn.sh)</span> <a href='http://www.markzhang.cn/downloads/code/share-pptp-vpn.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>natd -same_ports -use_sockets -unregistered_only -dynamic -interface ppp0 -clamp_mss
</span><span class='line'>ipfw -f flush
</span><span class='line'>ipfw add divert natd ip from any to any via ppp0
</span><span class='line'>ipfw add pass all from any to any
</span><span class='line'>sysctl -w net.inet.ip.forwarding<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>关闭VPN共享 bash (off-share-pptp-vpn.sh)</span> <a href='http://www.markzhang.cn/downloads/code/off-share-pptp-vpn.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>killall natd
</span><span class='line'>ipfw -f flush
</span><span class='line'>sysctl -w net.inet.ip.forwarding<span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure>


<p>所以当拨上了VPN之后，运行开启VPN共享那个脚本就OK了。在PS3上将网关指到Macbook的IP地址就可以了。</p>

<p>最后一个遗留问题。Mac OS X的VPN高级设定中有这么一个checkbox：</p>

<p><img src="http://www.markzhang.cn/downloads/image/mac-send-traffic-over-vpn.png" alt="Send all traffic over VPN" /></p>

<p>这个 <code>Send all traffic over VPN</code> 我不太理解是什么意思，是指本地NAT网络的地址不走VPN么？还是Mac OS X内置了类似 <code>chnroutes</code> 这样的功能？</p>

<p>有意思的是，有的时候如果enable了这个选项，我发现PS3连接网络就会出现问题。而如果VPN已经拨上去了，再去enable这个选项貌似就没有影响。</p>

<p>没有深究这个，所以这是目前的一个遗留问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X(Mavericks) CommandLineTools 和 osx-gcc-installer]]></title>
    <link href="http://www.markzhang.cn/blog/2014/07/03/apple-cli-and-osx-gcc-installer/"/>
    <updated>2014-07-03T13:22:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/07/03/apple-cli-and-osx-gcc-installer</id>
    <content type="html"><![CDATA[<p>Mac OS X Command Line Tools是Mac开发人员经常会遇到的一个问题。Command Line Tools（以下简称CLI）其实就是一堆Unix/Linux上开发需要的基础东西，比如gcc, make, g++等。在Mac上开发，如果使用Xcode的话，是不需要这些东西的，因为Xcode已经集成了这些东西，在Xcode的IDE中直接进行编译调试，所以用户不需要关心这些东西有没有，在哪。</p>

<p>但是如果我们在开发自己的基于Makefile的程序时，或者是要porting UNIX/Linux上的一些程序时，这些东西就变成必须的了。</p>

<!-- more -->


<p>苹果官方的CLI在苹果的网站上可以下载到，地址不需要自己去找，如果你已经安装了Xcode的话，那启动Xcode，选择菜单：<code>Xcode -&gt; Open Develop Tool -&gt; More Develop Tools</code>，然后浏览器就会被启动并来到下载苹果CLI的地方。下载dmg然后安装就完了。</p>

<p>苹果的CLI安装完成之后，其实是安装了两个pkg：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>com.apple.pkg.CLTools_Executables
</span><span class='line'>com.apple.pkg.MacOSX10_9_SDK
</span></code></pre></td></tr></table></div></figure>


<p>用 <code>pkgutils --files &lt;pkg name&gt;</code> 就可以看到安装了哪些文件，在什么地方。所以CLTools_Executables这个package，是安装在 <code>/Library/Developer</code> 目录下的，所以如果要使用gcc的话，把路径：<code>/Library/Developer/CommandLineTools/usr/bin/</code> 添加到PATH中去。</p>

<p>你可以看到，苹果的这个CLI，有很多llvm, gcc, clang这样的东西，这里有篇文章解释的很好：</p>

<p><a href="http://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html">http://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html</a></p>

<p>说来就是这么简单的事情，但是你如果在Google上尝试寻找答案的话，你会发现这些答案基本上在Mac OS X 10.9（Mavericks）上都没法用，典型的答案有：</p>

<ul>
<li>运行 <code>xcode-select --install</code>，反正在我的机器上，<code>xcode-select</code> 压根没有 <code>--install</code> 这个option。</li>
<li>执行程序：<code>/System/Library/CoreServices/Install Command Line Developer Tools.app</code>，其实这就是 <code>xcode-select --install</code> 去执行的程序，在我的Mac上运行没反应。</li>
<li>还有一些文章说直接在终端运行gcc，就会跳出一个对话框让你安装CLI的，我也没有碰到这么神奇的事情。</li>
</ul>


<p>现在再来说说 <code>osx-gcc-installer</code>。</p>

<p><code>osx-gcc-installer</code> 是github上一个开源的东西，估计是作者自己编译了苹果的一些open source的东西得到的：</p>

<p><a href="https://github.com/kennethreitz/osx-gcc-installer">https://github.com/kennethreitz/osx-gcc-installer</a></p>

<p>我对这个东西的理解是，在Mac OS X Lion/Mountain Lion之前，要安装苹果的CLI，是需要首先安装Xcode的（貌似是需要在安装了Xcode之后，在Xcode中有一个地方可以下载CLI），所以为了让我们在不安装Xcode的前提下得到gcc/make，就有了这个项目。该项目的README文件印证了这一点：</p>

<blockquote><p>For Lion and Mountain Lion users, Apple now provides an official Command Line Tools for Xcode package that you can install without needing to install Xcode itself! You can download it from Apple&rsquo;s developer site (free registration required) and search for &ldquo;Command Line Tools&rdquo;.</p></blockquote>

<p>之前我也安装过这个东西，现在如上面所说，我已经安装了苹果官方的CLI，所以很自然的我就想卸载掉这个东西，照例Google了一大圈之后，发现一般都是这么说的：</p>

<blockquote><p>According to the creator of the package, you can install Xcode on top of it since it is just a subset. Then you can use the uninstall command to completely remove:</p>

<p>sudo /Developer/Library/uninstall-devtools &mdash;mode=all</p>

<p>Definitely not a quick uninstall, but it should work.</p></blockquote>

<p>以上摘自StackOverflow: <a href="http://stackoverflow.com/questions/9332196/how-to-remove-the-osx-gcc-installer">http://stackoverflow.com/questions/9332196/how-to-remove-the-osx-gcc-installer</a></p>

<p>但事实上，这个做法在Mavericks上也是不行的，首先，我压根就没有 <code>/Developer</code> 这个目录，据说是Xcode从4.3开始就是一个“绿色软件”，所有东西都在 <code>/Applications/Xcode.app</code> 下面了。</p>

<p>此外，事实上我之前的确装过老版本的Xcode，在安装了 <code>osx-gcc-installer</code> 之后，的确有 <code>/Developer</code> 这个目录，但是运行了那个脚本之后，什么事情都没发生。<code>/usr/bin/gcc, /usr/bin/llvm-gcc-4.2</code> 这些文件还在那。</p>

<p>所以还是自己想办法了，通过 <code>pkgutils --expand GCC-10.7-v2.pkg tmp</code> ，可以在 <code>GCC-10.7-v2.pkg</code> 解开（这个pkg也就是osx-gcc-installer在Mac OS X 10.8上的安装文件），可以看到这个pkg包含了9个package：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DevSDK.pkg
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DeveloperToolsCLI.pkg
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DeveloperToolsSystemSupport.pkg
</span><span class='line'>-rw-r--r--  1 mark  staff   6.7K  8 12  2011 Distribution
</span><span class='line'>drwxr-xr-x  3 mark  staff   102B  7  3 14:00 Resources
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 VersionedDeveloperToolsSystemSupport.pkg
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 X11SDK.pkg
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 XcodeUserSystemSupport.pkg
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 clang.pkg
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 gcc4.2.pkg
</span><span class='line'>drwxr-xr-x  6 mark  staff   204B  7  3 14:00 llvm-gcc4.2.pkg
</span></code></pre></td></tr></table></div></figure>


<p>所以我使用 UninstallPKG 这个软件将这9个packag都删除掉就OK了。UninstallPKG是收费软件，售价9.99美元，试用版只能执行三次Uninstall，不过通过使用我发现不是只能uninstall 3个package，而是限制只能使用3次，也就是说，你可以一次选择多个package一并删除。</p>

<p>所以打开UninstallPKG，选择这9个package然后uninstall即可。注意这9个package的包名是上述名字后面都加了一个 <code>Leo</code>（估计是Snow Leopad的意思）。</p>

<p><img src="http://www.markzhang.cn/downloads/image/uninstallpkg.png" alt="UninstallPKG" /></p>

<p>所以到此简单来说，现在由于苹果提供了官方的CLI，所以其实 <code>osx-gcc-installer</code> 这个东西已经不再需要了。除非有一些你需要的其他东西依赖它。貌似现在新版的 HomeBrew 也是需要苹果的CLI而不是osx-gcc-installer了。<code>osx-gcc-installer</code> 的TroubleShooting是这样说的：</p>

<blockquote><p>Do not install this if you already have Xcode installed! Mixing Xcode and osx-gcc-installer is known to cause various difficult-to-diagnose problems and is not recommended.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[450 FBL 相位臂不顺滑？缺少一个小垫片]]></title>
    <link href="http://www.markzhang.cn/blog/2014/06/17/fbl-phase-arm-pad/"/>
    <updated>2014-06-17T15:37:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/06/17/fbl-phase-arm-pad</id>
    <content type="html"><![CDATA[<p>450 FBL有一个相位臂，没有这个相位臂那旋翼一旋转，十字盘拉杆就转成麻花了。但是由于十字盘是需要上下移动的（改变集体螺距），所以这个相位臂也是需要能运动的。基本上，当十字盘上下运动时，相位臂有两个地方也会发生运动：一个是中间部位，能改变角度；另外一个地方不起眼容易被忽略，就是相位臂固定在中联的那个位置，会发生转动。</p>

<p>所以最近在拆装相位臂的时候，突然发现相位臂的转动不顺畅了，非常的生涩，结果发现丢了一个小垫片。</p>

<!-- more -->


<p>相位臂是长这个样子的：</p>

<p><img src="http://www.markzhang.cn/downloads/image/fbl-phase-arm.png" alt="450 FBL相位臂" /></p>

<p><strong> 注：以上图片来自淘宝冰人工作室。 </strong></p>

<p>有了图片就非常的容易理解了，很明显中间部分是可以转动的，这样十字盘上下的时候，这部分可以活动。另外一个可以活动的，如上所说，就是相位臂固定到中联的那个部分，也就是图片上穿过螺丝的那个部分。这部分看起来很简单，但其实里面有一个轴承。</p>

<p>需要轴承也很容易想到，因为当十字盘上下运动的时候，相位臂中间部分被带动，从而也会最终带动相位臂固定在中联的这个头部，而头部被螺丝穿过固定在了中联上，那还怎么能转动呢？所以就需要一个轴承了。</p>

<p>现在的问题是，光有一个轴承还不够，还缺少一个垫片。之前我就丢了这个垫片，导致相位臂安装在了中联上面之后，相位臂的运动非常的涩，此时如果把固定螺丝松一些，立马会感觉顺滑很多，但是很显然这个固定螺丝不能拧的太松，所以最终发现缺少了这么一个垫片：</p>

<p><img src="http://www.markzhang.cn/downloads/image/fbl-phase-arm-pad.png" alt="450 FBL相位臂垫片" /></p>

<p><strong> 注：以上图片来自淘宝光明五金城。 </strong></p>

<p>这个垫片的尺寸是：2.1x3.8x0.5，如果你用尺量一下相位臂头部的尺寸的话，会发现这个垫片正好嵌在相位臂上，覆盖住了头部轴承但是没有覆盖到外部的垫圈。这样一来就能说通了，加了这个垫片之后，相位臂头部的外部垫圈部分就不会接触到中联，从而就没有了巨大的摩擦阻力，而当相位臂头部要转动的时候，这个小垫片就会转动（因为垫片是最终贴合在中联上的），而这个垫片又是覆盖在相位臂头部轴承上的，所以轴承就被带动可以转动了。</p>

<p>虽然说无副翼的直升机不一定需要FBL相位臂（比如亚拓的DFC），但是有FBL相位臂的，基本上都会需要这么一个垫片。之前没有研究这个问题，还以为是轴承坏了，差点买了一组新的相位臂（一百多块），其实就是缺了一个垫片，淘宝上五块钱一百个的东西。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机械盲科普：推力轴承和单向轴承]]></title>
    <link href="http://www.markzhang.cn/blog/2014/06/08/thrust-bearing-and-one-way-bearing/"/>
    <updated>2014-06-08T21:08:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/06/08/thrust-bearing-and-one-way-bearing</id>
    <content type="html"><![CDATA[<p>航模直升机中有两个重要的轴承。一个是位于旋翼桨夹内的推力轴承，另外一个是位于大齿盘中间的单向轴承。由于自己对机械不怎么懂，所以就去琢磨了一下这两个玩意，也在5imx上发了帖子询问，最终整理成了此文。</p>

<p>本文中所有内容都来自<a href="http://bbs.5imx.com">http://bbs.5imx.com</a>。</p>

<!-- more -->


<h2>推力轴承</h2>

<p>这个轴承指的是直升机旋翼头部分，装在桨夹里面的一个轴承：</p>

<p><img src="http://www.markzhang.cn/downloads/image/thrust-bearing.png" alt="推力轴承" /></p>

<p>论坛上，网络上也有叫这个轴承为 <code>止推轴承</code> 的，但是这个名字我感觉不准确，因为这个轴承的主要作用不是 <code>止推</code>，也无法防止 <code>射桨</code>，所以我这里还是叫它 <code>推力轴承</code>。当今世界通过网络获取信息的确方便了很多，但是也带来了很多误解，就是因为信息源、信息量太大了，需要自己琢磨理解才行。</p>

<p>需要这个轴承的原因是：我们都知道直升机的桨夹是可以绕横轴方向小幅度旋转的，也正是通过桨夹的这种旋转，来改变旋翼螺距的。注意这里我说的是旋翼头里面那根横轴，不是竖直的穿过十字盘的那根轴，那根叫主轴。横轴和主轴是垂直的。</p>

<p>所以，为了让桨夹能够做这样的旋转运动，在桨夹内部，就必须要有一个套在横轴上的轴承，这样桨夹就可以顺着轴承做翻转，而横轴不需要运动。这样问题就出现了，当桨夹随着旋翼高速旋转时，桨夹会产生巨大的离心力，这个向外的离心力会导致轴承紧紧贴在固定横轴、桨夹的末尾的螺母上，从而使得轴承的转动变的费力，生涩。于是，推力轴承就被加入到了旋翼头的机械部件中来。</p>

<p>推力轴承和普通轴承不同的是，它承受的是横轴轴向的力，也就是和桨夹高速旋转时产生的离心力方向一样的力。这样有了推力轴承专门承受离心力之后，使桨夹旋转的轴承就变的灵活、顺滑起来，从而可以轻松的实现螺距的变化。</p>

<p>这里附上一张450 FBL直升机旋翼头的图，清晰的描述了上述的桨夹、横轴、轴承、推力轴承的安装方式和关系：</p>

<p><img src="http://www.markzhang.cn/downloads/image/thrust-bearing-install.jpg" alt="旋翼头桨夹安装图" /></p>

<p>最后再说一次，推力轴承和防射桨没有关系，防止射桨主要还是靠安装在横轴两端的圆头内六角螺母。也就是上图中最末尾的那个方块。这也是为什么论坛上很多人都建议经常检查并更换这个螺母的原因。</p>

<p>5imx的这个帖子有有关推力轴承的很多讨论，很有帮助：</p>

<p><a href="http://bbs.5imx.com/bbs/forum.php?mod=viewthread&amp;tid=930379">http://bbs.5imx.com/bbs/forum.php?mod=viewthread&amp;tid=930379</a></p>

<h2>单向轴承</h2>

<p>这里指的是大齿盘里面那个单向轴承：</p>

<p><img src="http://www.markzhang.cn/downloads/image/one-way-bearing.png" alt="单向轴承" /></p>

<p>提到单向轴承，论坛上网上一般说它的作用是：在熄火降落（auto-rotation）的时候，由于此时电机停转，所以如果没有这个轴承，那么旋翼转动将带动电机旋转，而电机在不工作的时候，由于内部巨大的磁场阻力，会迅速消耗掉旋翼的旋转惯性，从而使熄火降落无法实现。</p>

<p>但是这么说很容易就会产生误解：如果单向轴承的目的就是因为这个，那大齿盘中放一个普通的轴承不就可以了么？反正你不就是要求旋翼转，电机不转嘛？</p>

<p>但是再仔细想一想，的确必须要单向轴承。因为如果是一个普通轴承的话，那电机旋转，大齿盘虽然跟着转，但旋翼和主轴就不会旋转了。论坛上举的很多的一个例子就是自行车的脚踏板，脚踏板和轮子中间就有一个单向轴承，这样我们踩脚踏板，轮子会转，而轮子转的时候，脚踏板并不会运动，一样的道理。</p>

<p>所以再反过来解释一遍就是，当电机旋转，带动大齿盘转动，此时需要再带动主轴和旋翼旋转的话，就只有两个选择，第一就是大齿盘中没有轴承，大齿盘和主轴是固定连接在一起的；第二就是大齿盘中是一个单向轴承。而显然第一种情况下，就无法实现熄火降落了（如上所说），所以这个单向轴承是必须的。</p>

<p>单向轴承也需要经常检查，如果单向轴承磨损的厉害，就会导致电机旋转时，旋翼 <code>打滑</code>，此时飞机上天后就会出现事故。最简单的检查单向轴承的方法是，把大齿盘捏住，然后转动旋翼头，应该是只可以朝一个方向旋转，朝另外一个方向旋转会有较大的阻力。如果两个方向上都可以旋转，那单向轴承就需要更换了。事实上，如果两个方向都可以非常顺利的旋转，那电机转旋翼就不会跟着转了。</p>

<p>5imx上这个帖子很好的解释了单向轴承：</p>

<p><a href="http://bbs.5imx.com/bbs/forum.php?mod=viewthread&amp;tid=938911">http://bbs.5imx.com/bbs/forum.php?mod=viewthread&amp;tid=938911</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卓普大黑（Zopo C7/zp990）刷原生ROM，root，升级触控屏，修改GPS]]></title>
    <link href="http://www.markzhang.cn/blog/2014/06/08/zopo-c7-flash/"/>
    <updated>2014-06-08T15:00:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/06/08/zopo-c7-flash</id>
    <content type="html"><![CDATA[<p>卓普（Zopo）大黑（C7）手机在国内的行货默认安装的是阿里的云OS，而向国外销售的版本称为zp990，装的是原生的安卓（当然有一些针对这款手机的改动，比如FOTA部分，双卡设置部分等）。</p>

<p>如果你用云OS用腻了的话，肯定会想刷机，而要刷机，刷zp990的原生安卓版本成为一个好的选择。我的使用感受是，这个版本相比其他的民间ROM（比如民间做的MIUI的ROM）要稳定一些，所以你不想经常折腾的话，刷这个版本会安逸很多。</p>

<p>本文中所有内容都是来自：</p>

<ul>
<li>移动叔叔论坛（bbs.ydss.cn），卓普大黑版块</li>
<li><a href="http://forum.xda-developers.com/showthread.php?t=2403825">http://forum.xda-developers.com/showthread.php?t=2403825</a></li>
</ul>


<!-- more -->


<h2>准备工作</h2>

<p>刷机需要以下一些东西：</p>

<ul>
<li>ROM，这里我使用的是移动叔叔论坛上arboby提供的线刷包：</li>
</ul>


<p><a href="http://bbs.ydss.cn/thread-355478-1-1.html">http://bbs.ydss.cn/thread-355478-1-1.html</a></p>

<p>这里说明两点：</p>

<ol>
<li><p>之所以采用线刷包，是因为相比在Recovery下刷机，你不需要首先去root手机，然后安装第三方的recovery，最后再刷入zip格式的ROM包。线刷包只需要你安装手机的线刷驱动（对于卓普这款MTK的手机来说，就是安装MTK Preloader驱动），然后运行MTK的Flash工具即可，非常的简单快速。</p></li>
<li><p>arboby提供的这个线刷包，相比原生的我上面提到的，卓普在海外销售的zp990的ROM，只修改了一个image，就是recovery image。这样我们线刷一次，就得到了ROM和第三方的recovery，非常的方便。其实我下载过原生的zp990的ROM，跟arbody的ROM做过diff，只有一个recovery image是不同的。</p></li>
<li><p>MTK的线刷软件：SP Flash tool。</p></li>
<li><p>MTK线刷的驱动，也就是上面提到的MTK Preloader的驱动。</p></li>
</ol>


<p>所有上述的东西在我的百度盘上都可以下载到：<a href="http://pan.baidu.com/s/1hq5klU0">http://pan.baidu.com/s/1hq5klU0</a>。</p>

<h2>开始刷机</h2>

<ul>
<li>首先是安装线刷驱动，这里移动叔叔论坛上有了很不错的教程：</li>
</ul>


<p><a href="http://bbs.ydss.cn/thread-343673-1-1.html">http://bbs.ydss.cn/thread-343673-1-1.html</a></p>

<p>我是在Windows 7 64bit上安装的。论坛上很多人说推荐使用XP的系统，因为win7，尤其是64bit的win7很难安装。其实我的感觉不是这样，我感觉很多人安装不上这个驱动是因为他们使用的是Ghost win7。只要是正常安装的win7，无论是否64bit，安装这个驱动都是没有问题的。</p>

<p>其次就是注意要安装这个驱动，是手机关机、拔下电池，然后连接USB到电脑上。此时电脑上的设备管理器中就会出现一个未知设备，然后按照移动叔叔上那个教程一步一步做就可以了。安装好了之后，这个设备就叫MTK Preloader &hellip;，而且这个设备会不停的消失、出现，这是正常现象。只要一旦开始刷机，这个设备就不会再不停的消失出现了。</p>

<p>我之前有在虚拟机的win7上尝试安装过这个驱动，感觉要困难一些（也不是完全不可能）。因为对于虚拟机来说，所有设备是先到Host system上，然后你需要去手动选择将该设备切换到虚拟机中来。考虑到这个坑爹的MTK的设备会不停的出现消失，这就增加了安装的难度。所以简单来说，不想找麻烦就别在虚拟机的windows上安装了吧。</p>

<ul>
<li>然后就是运行MTK的Flash tool刷机了。过程超级简单，就是把刷机包中的bootloader, kernel, system.img, recovery.img等等全部刷到手机的EMMC中的不同的分区上即可（当然bootloader一般是刷到SPI ROM上，我没研究过MTK的这个逻辑）。移动叔叔上也有教程：</li>
</ul>


<p><a href="http://bbs.ydss.cn/thread-344988-1-1.html">http://bbs.ydss.cn/thread-344988-1-1.html</a></p>

<p>最后刷完就会看到一个对话框，里面是一个绿色的圆。使用一张移动叔叔论坛上的图装饰一下：</p>

<p><img src="http://www.markzhang.cn/downloads/image/mtk-flash-tool.jpg" alt="MTK SP Flash Tool" /></p>

<p>刷完之后开机就可以看到原生的安卓了。这里有一个小插曲，在我上面给出的arboby线刷包的link上也提到了，就是刷完之后，你会发现你的EMMC只有3G。我的卓普大黑是32G的版本，我没有额外再安装SD卡了，所以应该是一个3G的data分区（用来安装APK），剩下来会有一个25G多的分区作为/sdcard分区。</p>

<p>对于这个问题，arboby在帖子中说，只需要进入到系统设置中，做一次 <code>恢复出厂设置</code> 就可以。这个方法在我的手机上不行，在我的大黑上，做了一次 <code>恢复出厂设置</code> 后，系统重启后会卡死，无法进入Android。我试验过两次都是这样。所以我后来使用了另外一种方法，就是进入Recovery去做一次 <code>双清</code> ，也就是format data和cache两个分区。</p>

<p>说到这里，又要提到一个该手机和其他手机不一样的地方了。该手机不是按住音量的上或者下，然后按power键开机就进入了 <code>recovery</code> 模式。该手机进入 <code>recovery</code> 的方法是：</p>

<p><strong> 手机在关机状态下，按住音量+，然后将USB线连接到手机上并插入电脑 </strong></p>

<p>所以并不是按power开机，而是按住 音量+ 然后连接USB线，就会自动进入recovery了。</p>

<p>在xda-developers上，采用的方法是在PC端运行一个叫做 <code>MTKDroidTools</code> 的软件从而进入recovery，我没有试验过因为我觉得这种方法太麻烦。</p>

<h2>后续</h2>

<p>刷机完成了，貌似结束了，其实还有一些东西是可以做的（当然不做也可以，看个人需要）：</p>

<ul>
<li><p>Root手机。其实root手机会带来安全隐患，但是为了升级触控屏的firmware（下面会提到），必须要先root。root就使用arboby提供的一键root的那个程序即可。前提条件是，PC上要安装好Android adb驱动并且手机上要打开USB调试（老生常谈了）。ADB的驱动我是直接在PC上安装了91助手，然后连接手机，91助手自动帮我安装的ADB驱动，你也可以去网上搜索找一下这个驱动，就是MTK的ADB驱动。</p></li>
<li><p>升级触控屏（touch screen）的firmware。我的手机上，这个firmware的版本是0x14，根据arboby的描述，升级到0x17版本就可以完美支持 <code>小皮套</code>。这个皮套我也有一个，就是可以合上休眠，打开唤醒，同时还有一个透明窗口可以在不开皮套的情况下接电话。虽然我平常不使用这个，但是我认为升级一下还是有必要的。</p></li>
<li><p>修改GPS的一个设置。这个来自xda-developers，据称不修改这个GPS的定位将会非常的慢。具体的做法倒是特别简单（但是也需要先root手机），就是编辑文件：<code>/system/build.prop</code>，在最后面加入一行：<code>Dalvik.vm.execution-mode=int:fast</code> ，然后重启手机即可。</p></li>
<li><p>最后是调手机通话音量的，这款手机几乎所有人都知道有个问题就是通话音量太小，不是你听对方的声音小，是对方听你的声音小。据说原因是手机麦克风外面的防尘网做的太密？也据说论坛上有人暴力将这个防尘网的缝隙扩大了一些，立马声音变的很洪亮？但是如果不想做硬件上的HACK，那有一个设置是可以做的，就是增加手机麦克风的灵敏度（航模上我们叫感度）：</p></li>
</ul>


<p><a href="http://bbs.ydss.cn/thread-367161-1-1.html">http://bbs.ydss.cn/thread-367161-1-1.html</a></p>

<h2>结束</h2>

<p>整个Android手机就意味着折腾的开始，不喜欢的折腾的，还是买iPhone吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CloneZilla磁盘克隆，超快的更换硬盘]]></title>
    <link href="http://www.markzhang.cn/blog/2014/06/03/ubuntu-disk-clone/"/>
    <updated>2014-06-03T12:49:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/06/03/ubuntu-disk-clone</id>
    <content type="html"><![CDATA[<p>开发用的PC机用的是一块128G的SSD，安装的Ubuntu 12.04，速度明显比机械硬盘快了好多，唯一的不足就是容量太小。于是最近购入了一块新的240G的SSD，需要将原来128G的SSD上的东西全部克隆过来。</p>

<p>对于Linux ext4文件分区系统的磁盘来说，<code>ghost</code>工作的并不好，工作的比较好的是<code>CloneZilla</code>，因为它能识别ext4的文件系统，从而使克隆变的无比快速，之前我写过一篇类似的文章：</p>

<p><a href="http://www.cnblogs.com/super119/archive/2012/09/26/2703479.html">http://www.cnblogs.com/super119/archive/2012/09/26/2703479.html</a></p>

<p>但是那一次的克隆是两块容量一样的磁盘，而这一次两块SSD的容量并不相同，所以我做了一些改变。</p>

<!-- more -->


<p>两块磁盘的容量不一样，我能想到的问题是，如果是克隆整块硬盘的话，那MBR部分也会被克隆过去，也就是说，源磁盘的分区信息也会被克隆到目的盘上，这样，会不会240G的SSD就会变成120G？我没有试验，有可能 <code>CloneZilla</code> 能帮我们解决这个问题，但是为了避免麻烦，我还是手动的克隆了。</p>

<p>所以我的做法是，不是克隆整个硬盘，而是只克隆源磁盘上的分区。完成之后，在目的盘上重建MBR信息，也就是在目的盘上恢复grub。具体我是这么做的：</p>

<ul>
<li><p>使用Ubuntu 12.04安装盘，进入Ubuntu Live（不是安装Ubuntu那个选项），然后使用Ubuntu的Disk Utility给目的盘分区</p></li>
<li><p>使用CloneZilla的启动ISO启动系统，可以把这个ISO刻成光盘，也可以使用UltraISO这种工具将ISO烧录到U盘上，然后从USB启动电脑。启动起来之后，按照 <code>CloneZilla</code> 提供的向导，一步一步进行即可，超级简单。将源磁盘每个分区都克隆到目的盘对应的分区上即可。100G的数据五分钟搞定。</p></li>
</ul>


<p><img src="http://www.markzhang.cn/downloads/image/clonezilla.jpg" alt="CloneZilla Cloning" /></p>

<ul>
<li>接下来就可以将源磁盘从机器中拿出来了，我们只需要再把目的磁盘的MBR恢复就可以成功启动系统了。其实就是恢复grub的标准做法：首先还是使用Ubuntu的安装盘进入Ubuntu Live，然后打开终端，输入以下命令：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Mount root partition to /mnt</span>
</span><span class='line'>sudo mount /dev/sda1 /mnt
</span><span class='line'>sudo mount --bind /dev /mnt/dev
</span><span class='line'>sudo mount --bind /dev/pts /mnt/dev/pts
</span><span class='line'>sudo mount --bind /proc /mnt/proc
</span><span class='line'>sudo mount --bind /sys /mnt/sys
</span><span class='line'>
</span><span class='line'><span class="c"># Chroot into it and update grub</span>
</span><span class='line'>sudo chroot /mnt
</span><span class='line'>grub-install /dev/sda
</span><span class='line'>grub-install --recheck /dev/sda
</span><span class='line'>update-grub
</span><span class='line'><span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Quit chroot environment and umount all stuffs</span>
</span><span class='line'>sudo umount /mnt/dev <span class="o">&amp;&amp;</span>
</span><span class='line'>sudo umount /mnt/dev/pts <span class="o">&amp;&amp;</span>
</span><span class='line'>sudo umount /mnt/proc <span class="o">&amp;&amp;</span>
</span><span class='line'>sudo umount /mnt/sys <span class="o">&amp;&amp;</span>
</span><span class='line'>sudo umount /mnt
</span></code></pre></td></tr></table></div></figure>


<p>这样就完成了，在我的机器上，/dev/sda就是我新更换的240G的SSD，你需要根据你的机器上的磁盘配置来决定使用哪个磁盘。</p>

<p>上述操作来自文章：</p>

<p><a href="http://howtoubuntu.org/how-to-repair-restore-reinstall-grub-2-with-a-ubuntu-live-cd">http://howtoubuntu.org/how-to-repair-restore-reinstall-grub-2-with-a-ubuntu-live-cd</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Mavericks上使用Makefile编写wxWidgets程序]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/23/wxwidget-on-mavericks/"/>
    <updated>2014-04-23T23:31:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/23/wxwidget-on-mavericks</id>
    <content type="html"><![CDATA[<p>OpenGL的设计与操作系统无关，与窗口系统也无关，所以，要编写一个可以运行（能看到界面）的程序，还需要一些额外的GUI的框架，比如glut。</p>

<p>glut基本上是所有OpenGL教科书上的唯一推荐了，因为它的API简单，跨平台。所以读者不需要花额外的时间去了解并使用glut。但是glut比较老了，有点跟不上时代了。而且编译出来的东西是一个可执行文件，不是Mac OS X上的 <code>.app</code> 的那种Applicaiton。所以在StackOverflow上也有很多人推荐使用 <code>glfw</code>。我也去试用了一下，感觉还是太单薄了。</p>

<p>既然要编写一个像样的OpenGL程序，就选择一个像样的GUI framework library吧，于是我决定使用wxWidgets。</p>

<!-- more -->


<h2>wxWidgets的编译安装</h2>

<p>wxWidgets在Mac OS X Mavericks上的安装很简单，就是标准的configure/make/make install。只是configure需要指定一些option，否则wxWidgets无法找到一些必须的库。</p>

<p>结合了wxWidgets wiki上的一些内容，我的编译过程是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> &lt;root directory of wxWidgets <span class="nb">source</span>&gt;
</span><span class='line'>mkdir build-release
</span><span class='line'><span class="nb">cd </span>build-release
</span><span class='line'>../configure --with-osx_cocoa --with-macosx-version-min<span class="o">=</span>10.7 --with-macosx-sdk<span class="o">=</span>/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk --prefix<span class="o">=</span><span class="s2">&quot;$(pwd)&quot;</span> --with-opengl
</span><span class='line'>make
</span></code></pre></td></tr></table></div></figure>


<p>我安装的还是较老版本的Xcode，所以可以看到上面的命令行中，SDK用的还是10.8的，不过不妨碍了。</p>

<p>此外我没有执行make install，因为我也没打算给其他用户来使用。反正make过了之后，该有的东西（wx-config、wxWidgets的libraries）都有了。</p>

<p>还有一点：执行完configure之后，你会发现这样的一行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>OpenGL support:   no
</span></code></pre></td></tr></table></div></figure>


<p>但其实我们已经加了 <code>--with-opengl</code> 了，难道是configure没有找到Xcode中的OpenGL framework？经过一番Google，以及最后使用 <code>wx-config --libs</code> 来确认，其实OpenGL的支持已经有了，这个信息是一个错误信息。所以这应该算是一个bug了。</p>

<h2>第一个使用Makefile的程序</h2>

<p>接下来就是重头戏了，因为我不想使用Xcode来编写运行程序，太笨重了，而且写一个HelloWorld也需要在Xcode中建立一个Project，并且设置一堆东西。更何况使用Xcode，也无法详细了解整个编译过程。Linux程序员都懂的。</p>

<p>所以我想要的是一个Makefile，我执行make就可以编译，而且要生成Mac OS X上的applicaiton（.app），而不是像使用glut的时候，只是生成了一个可执行文件。执行这个文件是能看到一个界面，但是无法拖动，某些功能还不正常。</p>

<p>我看到wxWidgets自带的samples，就是可以通过make生成Mac OS X的 <code>.app</code> 应用的，所以这一定是可行的。于是Google了一下，果然发现wxWidgets的论坛上有答案：</p>

<p><a href="http://forums.wxwidgets.org/viewtopic.php?f=23&amp;t=3768">http://forums.wxwidgets.org/viewtopic.php?f=23&amp;t=3768</a></p>

<p>这个帖子中，帖子的作者Mark最后就给出了一个Makefile的template，使用这个Makefile就可以编译并最终生成一个 <code>.app</code>。</p>

<p>于是立刻把这个Makefile拿过来试验了一下，需要做两处小改动：</p>

<ul>
<li><p>OUTPUTPATH必须要设置，而不是像注释中说的那样可以留空。否则后续的 <code>mkdir -p</code> 这个命令会失败。</p></li>
<li><p>这个Makefile中所有的 <code>@echo</code> 命令要换成 <code>@/bin/echo</code>。因为这个Makefile中有三行这样的代码：<code>@echo -n xxxx</code>，<code>-n</code> 的意思是输出末尾不要加换行，但是Mavericks上，这个bash built-in的echo是没有 <code>-n</code> 这个option的，所以会导致最终生成的 <code>PkgInfo</code> 和 <code>Info.plist</code> 中有 <code>-n</code> 这样的字符串，从而导致最终的 <code>.app</code> 没法运行。在 <code>man echo</code> 中也提到了这个事情：</p></li>
</ul>


<blockquote><p>Some shells may provide a builtin echo command which is similar or identical to this utility. Most notably, the builtin echo in sh(1) does not accept the -n option. Consult the builtin(1) manual page.</p></blockquote>

<p>做完这两处小改动之后，输入make就可以生成 <code>.app</code> 了，Cool！</p>

<p>最后附上我的Makefile的模板：</p>

<figure class='code'><figcaption><span>Makefile模板 bash (wxwidgets-makefile-template)</span> <a href='http://www.markzhang.cn/downloads/code/wxwidgets-makefile-template'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
</pre></td><td class='code'><pre><code class=''><span class='line'><span class="c">##############################################################</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  Makefile Template for wxMac Applications</span>
</span><span class='line'><span class="c">#  Mark Wilkinson</span>
</span><span class='line'><span class="c">#  August 2005</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  This makefile is designed for experienced UNIX </span>
</span><span class='line'><span class="c">#  developers who wish to learn how to build Mac OS X </span>
</span><span class='line'><span class="c">#  packages (.app) using Makefiles rather than Apple&#39;s </span>
</span><span class='line'><span class="c">#  Xcode IDE.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  Developed with the assistance of Kevin Hock, CHB, </span>
</span><span class='line'><span class="c">#    and DialogBlocks examples.</span>
</span><span class='line'><span class="c">#  Distribution of this file is subject to the terms of </span>
</span><span class='line'><span class="c">#    the wxWindows License, see www.wxwidgets.org</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  A Brief Tutorial on Packages</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  Rather than use resource forks on application</span>
</span><span class='line'><span class="c">#    files, as Apple did in their Classic operating</span>
</span><span class='line'><span class="c">#    system, Mac OS X uses application packages.</span>
</span><span class='line'><span class="c">#  Application packages have a .app extension and</span>
</span><span class='line'><span class="c">#    are actually directories which contain the</span>
</span><span class='line'><span class="c">#    true executable as well as several resource </span>
</span><span class='line'><span class="c">#    files.  The structure of an application</span>
</span><span class='line'><span class="c">#    package is:</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    (program).app</span>
</span><span class='line'><span class="c">#     |</span>
</span><span class='line'><span class="c">#     +-- Contents</span>
</span><span class='line'><span class="c">#          |</span>
</span><span class='line'><span class="c">#          +--  Info.plist</span>
</span><span class='line'><span class="c">#          |</span>
</span><span class='line'><span class="c">#          +--  MacOS</span>
</span><span class='line'><span class="c">#          |     |</span>
</span><span class='line'><span class="c">#          |     +--  (program)</span>
</span><span class='line'><span class="c">#          |</span>
</span><span class='line'><span class="c">#          +--  PkgInfo</span>
</span><span class='line'><span class="c">#          |</span>
</span><span class='line'><span class="c">#          +--  Resources</span>
</span><span class='line'><span class="c">#                |</span>
</span><span class='line'><span class="c">#                +-- (icon file)</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#    In this diagram &quot;(program)&quot; is the name of </span>
</span><span class='line'><span class="c">#    the executable program.  &quot;Contents,&quot; &quot;MacOS,&quot; </span>
</span><span class='line'><span class="c">#    and &quot;Resouces,&quot; are directories.  &quot;Info.plist&quot;</span>
</span><span class='line'><span class="c">#    is an XML DTD file.  And &quot;PkgInfo&quot; is a text</span>
</span><span class='line'><span class="c">#    file containing data.</span>
</span><span class='line'><span class="c">#  This makefile generates the package directory</span>
</span><span class='line'><span class="c">#    structure, and it compiles and places the </span>
</span><span class='line'><span class="c">#    executabel in the MacOS directory.  This </span>
</span><span class='line'><span class="c">#    makefile also creates the &quot;PkgInfo&quot; and </span>
</span><span class='line'><span class="c">#    &quot;Info.plist&quot; files.  The PkgInfo file is very</span>
</span><span class='line'><span class="c">#    simple.  Info.plist is an XML DTD and contains</span>
</span><span class='line'><span class="c">#    several variables, which can be examined in</span>
</span><span class='line'><span class="c">#    this makefile.</span>
</span><span class='line'><span class="c">#  You need to supply the source code and the icon</span>
</span><span class='line'><span class="c">#    file.  The icon file is copied into the </span>
</span><span class='line'><span class="c">#    Resources directory of the package.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  These variables are used to compile the program.  You </span>
</span><span class='line'><span class="c">#    will need to provide this information.  You may need</span>
</span><span class='line'><span class="c">#    to specify the full path to the wx-config executable.</span>
</span><span class='line'><span class="c">#    The output path can&#39;t be blank.  The program name</span>
</span><span class='line'><span class="c">#    and object names are essential.  You may use the icon</span>
</span><span class='line'><span class="c">#    file included with the wxMac distribution </span>
</span><span class='line'><span class="c">#    (wxMac-2.6.1/src/mac/wxmac.icns) or create your own</span>
</span><span class='line'><span class="c">#    icon using the Apple Developer Tools </span>
</span><span class='line'><span class="c">#    (/Developer/Applications/Utilities/Icon Composer).</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">WXCONFIG</span><span class="p">=</span><span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">mark</span><span class="o">/</span><span class="n">Graphics</span><span class="o">/</span><span class="n">wxWidgets</span><span class="o">-</span><span class="mf">3.0</span><span class="p">.</span><span class="mi">0</span><span class="o">/</span><span class="n">build</span><span class="o">-</span><span class="n">release</span><span class="o">/</span><span class="n">wx</span><span class="o">-</span><span class="n">config</span>
</span><span class='line'>
</span><span class='line'><span class="c"># can&#39;t be blank, otherwise &quot;mkdir -p&quot; fails</span>
</span><span class='line'><span class="n">OUTPUTPATH</span><span class="p">=</span><span class="n">out</span>
</span><span class='line'>
</span><span class='line'><span class="n">PROGRAM</span><span class="p">=</span><span class="n">HelloWxGL</span>
</span><span class='line'><span class="n">PROGVER</span><span class="p">=</span><span class="mf">1.0</span>
</span><span class='line'>
</span><span class='line'><span class="n">OBJECTS</span><span class="p">=</span><span class="n">HelloWxGL</span><span class="p">.</span><span class="n">o</span>
</span><span class='line'>
</span><span class='line'><span class="n">ICONFILE</span><span class="p">=</span><span class="n">wxmac</span><span class="p">.</span><span class="n">icns</span>
</span><span class='line'>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  These variables are used in the Info.plist and PkgInfo</span>
</span><span class='line'><span class="c">#    files.  Aside from the company name (which should have</span>
</span><span class='line'><span class="c">#    no spaces, like a domain name), you should not have</span>
</span><span class='line'><span class="c">#    to modify these variables.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">COMPANY</span><span class="p">=</span><span class="n">markzhang</span>
</span><span class='line'>
</span><span class='line'><span class="n">BUNDLEPACKAGE</span><span class="p">=</span><span class="n">APPL</span>
</span><span class='line'>
</span><span class='line'><span class="n">BUNDLESIGNATURE</span><span class="p">=</span>????
</span><span class='line'>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#  It should not be necessary to modify the Makefile</span>
</span><span class='line'><span class="c">#    below this line; although, you may have to make</span>
</span><span class='line'><span class="c">#    changes depending on your system configuration.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">##############################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">CXX</span><span class="p">=</span><span class="n">g</span><span class="o">++</span>
</span><span class='line'>
</span><span class='line'><span class="n">BUNDLE</span><span class="p">=</span>$<span class="p">(</span><span class="n">OUTPUTPATH</span><span class="p">)</span><span class="o">/</span>$<span class="p">(</span><span class="n">PROGRAM</span><span class="p">).</span><span class="n">app</span>
</span><span class='line'><span class="n">MACICON</span><span class="p">=</span>$<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span>$<span class="p">(</span><span class="n">ICONFILE</span><span class="p">)</span>
</span><span class='line'><span class="n">MACPKGINFO</span><span class="p">=</span>$<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">PkgInfo</span>
</span><span class='line'><span class="n">MACINFOPLIST</span><span class="p">=</span>$<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">Info</span><span class="p">.</span><span class="n">plist</span>
</span><span class='line'>
</span><span class='line'><span class="n">LIBS</span><span class="p">=</span>`$<span class="p">(</span><span class="n">WXCONFIG</span><span class="p">)</span> <span class="o">--</span><span class="n">libs</span>`
</span><span class='line'><span class="n">LINKERFLAGS</span><span class="p">=</span> <span class="o">-</span><span class="n">lstdc</span><span class="o">++</span>
</span><span class='line'><span class="n">WARNINGFLAGS</span><span class="p">=</span>
</span><span class='line'><span class="n">OPTFLAGS</span><span class="p">=</span>
</span><span class='line'><span class="n">DEBUGFLAGS</span><span class="p">=</span><span class="o">-</span><span class="n">g</span>
</span><span class='line'>
</span><span class='line'><span class="n">CPPINC</span><span class="p">=</span>`$<span class="p">(</span><span class="n">WXCONFIG</span><span class="p">)</span> <span class="o">--</span><span class="n">inplace</span> <span class="o">--</span><span class="n">cxxflags</span>`
</span><span class='line'><span class="n">LDFLAGS</span><span class="p">=</span>$<span class="p">(</span><span class="n">LIBS</span><span class="p">)</span> $<span class="p">(</span><span class="n">LINKERFLAGS</span><span class="p">)</span>
</span><span class='line'><span class="n">CPPFLAGS</span><span class="p">=</span>$<span class="p">(</span><span class="n">CPPINC</span><span class="p">)</span> $<span class="p">(</span><span class="n">GCCFLAGS</span><span class="p">)</span> $<span class="p">(</span><span class="n">DEBUGFLAGS</span><span class="p">)</span> $<span class="p">(</span><span class="n">OPTFLAGS</span><span class="p">)</span> $<span class="p">(</span><span class="n">WARNINGFLAGS</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">all</span><span class="p">:</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">MacOS</span><span class="o">/</span>$<span class="p">(</span><span class="n">PROGRAM</span><span class="p">)</span> $<span class="p">(</span><span class="n">MACICON</span><span class="p">)</span> $<span class="p">(</span><span class="n">MACPKGINFO</span><span class="p">)</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">clean</span><span class="p">:</span>
</span><span class='line'>  <span class="n">rm</span> <span class="o">-</span><span class="n">f</span> $<span class="p">(</span><span class="n">OBJECTS</span><span class="p">)</span>
</span><span class='line'>  <span class="n">rm</span> <span class="o">-</span><span class="n">fr</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">help</span><span class="p">:</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;Usage: make -f Makefile [all|clean|help]&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#  This builds the bundle&#39;s directory structure.</span>
</span><span class='line'>$<span class="p">(</span><span class="n">BUNDLE</span><span class="p">):</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;==== Building bundle directory structure ====&quot;</span>
</span><span class='line'>  <span class="nb">mkdir</span> <span class="o">-</span><span class="n">p</span> $<span class="p">(</span><span class="n">OUTPUTPATH</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">mkdir</span> <span class="o">-</span><span class="n">p</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span>
</span><span class='line'>  <span class="nb">mkdir</span> <span class="o">-</span><span class="n">p</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">MacOS</span>
</span><span class='line'>  <span class="nb">mkdir</span> <span class="o">-</span><span class="n">p</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">Resources</span>
</span><span class='line'>
</span><span class='line'><span class="c">#  This builds the executable right inside the bundle.</span>
</span><span class='line'>$<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">MacOS</span><span class="o">/</span>$<span class="p">(</span><span class="n">PROGRAM</span><span class="p">):</span> $<span class="p">(</span><span class="n">OBJECTS</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;==== Building executable ====&quot;</span>
</span><span class='line'>  $<span class="p">(</span><span class="n">CXX</span><span class="p">)</span> <span class="o">-</span><span class="n">o</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">MacOS</span><span class="o">/</span>$<span class="p">(</span><span class="n">PROGRAM</span><span class="p">)</span> $<span class="p">(</span><span class="n">OBJECTS</span><span class="p">)</span> $<span class="p">(</span><span class="n">LDFLAGS</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#  This copies the icon file into the bundle.</span>
</span><span class='line'>$<span class="p">(</span><span class="n">MACICON</span><span class="p">):</span> $<span class="p">(</span><span class="n">ICONFILE</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;==== Copying icon file into bundle ====&quot;</span>
</span><span class='line'>  <span class="n">cp</span> <span class="o">-</span><span class="n">f</span> $<span class="p">(</span><span class="n">ICONFILE</span><span class="p">)</span> $<span class="p">(</span><span class="n">BUNDLE</span><span class="p">)</span><span class="o">/</span><span class="n">Contents</span><span class="o">/</span><span class="n">Resources</span><span class="o">/</span>$<span class="p">(</span><span class="n">ICONFILE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#  NOTICE</span>
</span><span class='line'><span class="c">#  We need to use &quot;/bin/echo&quot;, since the &quot;echo&quot; is the builtin program</span>
</span><span class='line'><span class="c">#  which doesn&#39;t have &quot;-n&quot; option.</span>
</span><span class='line'>
</span><span class='line'><span class="c">#  This creates the Contents/PkgInfo file.</span>
</span><span class='line'>$<span class="p">(</span><span class="n">MACPKGINFO</span><span class="p">):</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;==== Creating PkgInfo ====&quot;</span>
</span><span class='line'>  <span class="n">touch</span> $<span class="p">(</span><span class="n">MACPKGINFO</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s">&quot;$(BUNDLEPACKAGE)$(BUNDLESIGNATURE)&quot;</span> <span class="o">&gt;</span> $<span class="p">(</span><span class="n">MACPKGINFO</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#  This creates the Contents/Info.plist file.</span>
</span><span class='line'>$<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">):</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;==== Creating Info.plist ====&quot;</span>
</span><span class='line'>  <span class="n">touch</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;&lt;?xml version=\&quot;</span><span class="mf">1.0</span><span class="o">\</span><span class="s">&quot; encoding=\&quot;</span><span class="n">UTF</span><span class="o">-</span><span class="mi">8</span><span class="o">\</span><span class="s">&quot;?&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s">&quot;&lt;!DOCTYPE plist PUBLIC &quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="o">-</span><span class="n">n</span> <span class="s">&quot;\&quot;</span><span class="o">-//</span><span class="n">Apple</span> <span class="n">Computer</span><span class="o">//</span><span class="n">DTD</span> <span class="n">PLIST</span> <span class="mf">1.0</span><span class="o">//</span><span class="n">EN</span><span class="o">\</span><span class="s">&quot; &quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;\&quot;</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">www</span><span class="p">.</span><span class="n">apple</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">DTDs</span><span class="o">/</span><span class="n">PropertyList</span><span class="o">-</span><span class="mf">1.0</span><span class="p">.</span><span class="n">dtd</span><span class="o">\</span><span class="s">&quot;&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;&lt;plist version=\&quot;</span><span class="mf">1.0</span><span class="o">\</span><span class="s">&quot;&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;&lt;dict&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleDevelopmentRegion&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;English&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleExecutable&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(PROGRAM)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleIconFile&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(ICONFILE)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleName&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(PROGRAM)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleIdentifier&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;com.$(COMPANY).$(PROGRAM)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleInfoDictionaryVersion&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;6.0&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundlePackageType&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(BUNDLEPACKAGE)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleSignature&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(BUNDLESIGNATURE)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleVersion&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(PROGVER)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleShortVersionString&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(PROGVER)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;key&gt;CFBundleGetInfoString&lt;/key&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;   &lt;string&gt;$(PROGRAM), Version $(PROGVER), $(COMPANY)&lt;/string&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;&lt;/dict&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>  <span class="p">@</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">echo</span> <span class="s">&quot;&lt;/plist&gt;&quot;</span> <span class="o">&gt;&gt;</span> $<span class="p">(</span><span class="n">MACINFOPLIST</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>$<span class="p">(</span><span class="n">OBJECTS</span><span class="p">):</span> <span class="c">%.o: %.cpp</span>
</span><span class='line'>  $<span class="p">(</span><span class="n">CXX</span><span class="p">)</span> <span class="o">-</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> $<span class="p">@</span> $<span class="p">(</span><span class="n">CPPFLAGS</span><span class="p">)</span> $<span class="o">&lt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="n">PHONY</span><span class="p">:</span>    <span class="nb">all</span> <span class="n">clean</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://www.markzhang.cn/downloads/image/hellowxgl.png" alt="wxWidgets HelloWorld" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[需要齐次坐标的原因之二 - 所有的变换运算（平移、旋转、缩放）都可以用矩阵乘法来搞定]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/23/translation-rotation-scale-in-homogeneous-coordinate/"/>
    <updated>2014-04-23T13:55:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/23/translation-rotation-scale-in-homogeneous-coordinate</id>
    <content type="html"><![CDATA[<p>本文中的三张图片来自网络，但是我不记得当初的来源了，所以没有能给出出处。确定来源后将给出图片出处。</p>

<p>看三个图就清楚了。分别是平移、旋转和缩放的矩阵计算。如果没有额外的第四个量w（也就是齐次坐标），那么这三种变换是无法都使用矩阵乘法来解决的。变换都统一成矩阵乘法之后，就给硬件设计和软件架构带来了巨大的好处。</p>

<!-- more -->


<p>下面的三组公式就分别对应使用矩阵来实现平移（Translation）、旋转（Rotation）、缩放（Scale）：</p>

<p><img src="http://www.markzhang.cn/downloads/image/matrix-translation.png" alt="Translation" /></p>

<p><img src="http://www.markzhang.cn/downloads/image/matrix-rotation.png" alt="Rotation" /></p>

<p><img src="http://www.markzhang.cn/downloads/image/matrix-scale.png" alt="Scale" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[需要齐次坐标的原因]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/23/homogeneous-coordinates/"/>
    <updated>2014-04-23T13:40:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/23/homogeneous-coordinates</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.songho.ca/math/homogeneous/homogeneous.html">http://www.songho.ca/math/homogeneous/homogeneous.html</a></p>

<p>翻译：罗朝辉 <a href="http://www.cnblogs.com/kesalin/">http://www.cnblogs.com/kesalin/</a></p>

<!-- more -->


<p>在欧几里得几何空间里，两条平行线永远都不会相交。但是在投影空间中，两条铁轨在地平线处却是会相交的，因为在无限远处它们看起来相交于一点。</p>

<p>在欧几里得（或称笛卡尔）空间里描述2D/3D 几何物体是很理想的，但在投影空间里面却并不见得。我们用 (x, y) 表示笛卡尔空间中的一个 2D 点，而处于无限远处的点 (∞,∞) 在笛卡尔空间里是没有意义的。投影空间里的两条平行线会在无限远处相交于一点，但笛卡尔空间里面无法搞定这个问题（因为无限远处的点在笛卡尔空间里是没有意义的）。</p>

<p>由 August Ferdinand Möbius 提出的齐次坐标（Homogeneous coordinates）让我们能够在投影空间里进行图像和几何处理，齐次坐标用N + 1个分量来描述 N 维坐标。比如，2D 齐次坐标是在笛卡尔坐标(X, Y)的基础上增加一个新分量 w，变成(x, y, w)，其中笛卡尔坐标系中的大X，Y 与齐次坐标中的小x，y有如下对应关系：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">X</span> <span class="o">=</span> x / w
</span><span class='line'><span class="nv">Y</span> <span class="o">=</span> y / w
</span></code></pre></td></tr></table></div></figure>


<p>笛卡尔坐标中的点 (1, 2) 在齐次坐标中就是 (1, 2, 1) 。如果这点移动到无限远(∞,∞)处，在齐次坐标中就是 (1, 2, 0) ，这样我们就避免了用没意义的&#8221;∞&#8221; 来描述无限远处的点。</p>

<p><strong> 证明: 两平行线可以相交 </strong></p>

<p>笛卡尔坐标系中，对于如下两个直线方程：</p>

<p><img src="http://www.markzhang.cn/downloads/image/linear-formula.png" alt="直线方程" /></p>

<p>如果 C ≠ D，以上方程组无解；如果 C = D，那这两条线就是同一条线了。</p>

<p>下面我们用 x/w, y/w 代替 x, y 放到投影空间里来求解：</p>

<p><img src="http://www.markzhang.cn/downloads/image/linear-formula-homogeneous.png" alt="齐次坐标直线方程" /></p>

<p>现在我们就可以在 C ≠ D 的情况得到一组解 (x, y, 0)，代入得 (C &ndash; D)w = 0，因为 C ≠ D，所以 w = 0。因而，两条平行线相交于投影空间中无限远处的一点 (x, y, 0)。</p>

<p>齐次坐标在计算机图形学中是有用的，将 3D 场景投影到 2D 平面的过程中就用到它了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（三）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/22/git-gossip-3/"/>
    <updated>2014-04-22T07:58:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/22/git-gossip-3</id>
    <content type="html"><![CDATA[<p>这次来说说有关 <code>no branch</code> 的那些事。</p>

<p>其实之前在<a href="http://markzhang.cn/blog/2014/04/04/git-gossip-1/">Git都在说些啥（一）</a>中已经提过一些有关 <code>no branch</code> 的东西。这次再来看看其他两段git的提示信息，都是与 <code>no branch</code> 有关的。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git ck origin/master
</span><span class='line'>Note: checking out <span class="s1">&#39;origin/master&#39;</span>.
</span><span class='line'>
</span><span class='line'>You are in <span class="s1">&#39;detached HEAD&#39;</span> state. You can look around, make experimental
</span><span class='line'>changes and commit them, and you can discard any commits you make in this
</span><span class='line'>state without impacting any branches by performing another checkout.
</span><span class='line'>
</span><span class='line'>If you want to create a new branch to retain commits you create, you may
</span><span class='line'><span class="k">do </span>so <span class="o">(</span>now or later<span class="o">)</span> by using -b with the checkout <span class="nb">command </span>again. Example:
</span><span class='line'>
</span><span class='line'>  git checkout -b new_branch_name
</span><span class='line'>
</span><span class='line'>HEAD is now at 82b25d9b1856... HelloGL: Add missing shader files
</span><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git b
</span><span class='line'>* <span class="o">(</span>no branch<span class="o">)</span>
</span><span class='line'>  master
</span><span class='line'>  tmp
</span><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git pull
</span><span class='line'>You are not currently on a branch, so I cannot use any
</span><span class='line'><span class="s1">&#39;branch.&lt;branchname&gt;.merge&#39;</span> in your configuration file.
</span><span class='line'>Please specify which remote branch you want to use on the <span class="nb">command</span>
</span><span class='line'>line and try again <span class="o">(</span>e.g. <span class="s1">&#39;git pull &lt;repository&gt; &lt;refspec&gt;&#39;</span><span class="o">)</span>.
</span><span class='line'>See git-pull<span class="o">(</span>1<span class="o">)</span> <span class="k">for </span>details.
</span></code></pre></td></tr></table></div></figure>


<p>第一段信息来自命令 <code>git checkout origin/master</code>。Git的这段唠叨意思就是，哥们你checkout了一个版本，但是没有指定branch的名字，所以哥现在给你创建了一个特殊的branch，名字叫 <code>no branch</code>。这个branch特殊在哪呢，就是你可以在这个branch上工作，可以提交commit，但是将来你一旦离开了这个branch，比如你checkout到其他的branch上去了，那么你就再也回不来了哈。你做的那些commit就找不到了哈。所以哥们现在强烈建议你，以后checkout branch使用 <code>git checkout -b new_branch_name</code>。</p>

<p><strong> 注：</strong> 之前在<a href="http://markzhang.cn/blog/2014/04/04/git-gossip-1/">Git都在说些啥（一）</a>提到过了，使用 <code>git reflog</code> 可以找回你在 <code>no branch</code> 上提交过的commit。前提是git还帮你留着这些commits。</p>

<p>第二段提示信息来自执行 <code>git pull</code> 的时候，之前在<a href="http://markzhang.cn/blog/2014/04/21/git-gossip-2/">Git都在说些啥（二）</a>中已经详细说了 <code>git pull</code> 会出现的这种错误信息。所以，这里想说的是，只要你工作在 <code>no branch</code> 上，那么执行 <code>git pull</code> 的时候，就必须写全了，比如：<code>git pull origin master</code>，这样git才知道怎么去做merge。</p>

<p>说到这里，你可能会问，为什么git要搞这么一个莫名其貌，麻烦无比的 <code>no branch</code> 出来？其实 <code>no branch</code> 是有一些适用的场景的。<code>no branch</code> 相当于是一种临时branch，建立这个branch的唯一原因就是将来我们肯定会放弃掉这个branch，所以在做比如 <code>git rebase</code> 的时候，<code>no branch</code> 就很make sense了。因为我们知道 <code>git rebase</code> 的时候，git需要根据你的指令，将commits重新做排列、修正、squash等等，此时，git就会以第一个需要rebase的commit之前的那个commit为base，checkout到一个 <code>no branch</code> 上去，rebase做完之后，再最终将 <code>no branch</code> 覆盖掉你执行 <code>git rebase</code> 时的branch。所以，在这种场景下，使用 <code>no branch</code> 就比使用一个有名字的branch更加的make sense。</p>

<p>还有一种场景你肯定熟悉，就是使用repo的时候。repo是Google做的一个Python脚本程序，用于管理多个git仓库。你会发现，经常你做完 <code>repo sync</code> 之后，来到其中任意一个git仓库（或者叫git project吧，repo中是称为project的），执行一下 <code>git branch</code>，你会发现你都处在 <code>no branch</code> 上。我的感觉是，repo针对每一个git project，是可以定义 <code>revision</code> 的（在.repo/manifest.xml中可以定义所有的git project，其中就可以针对每个project定义revision）。而这个revision，就是一个git commit的HASH，所以在这种场景下，repo在 <code>git fetch</code> 取得了该project远端的所有更新之后，如何将你本地的文件更新到你指定的revision上？肯定是执行 <code>git checkout &lt;commit hash&gt;</code> 这样的命令了，那么这个时候自然 <code>no branch</code> 就产生了。当然repo也可以很二的约定一个俗气无比的branch名字，比如 <code>git checkout -b this_really_sucks &lt;commit hash&gt;</code>？</p>

<p>其实 <code>no branch</code> 本身没啥，只是由于相比其他的branch，<code>no branch</code> 有一些特殊的地方，所以在 <code>no branch</code> 上工作是，你就经常会收到git的一些抱怨，习惯了就好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（二）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/21/git-gossip-2/"/>
    <updated>2014-04-21T21:33:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/21/git-gossip-2</id>
    <content type="html"><![CDATA[<p>这一次我们来说说 <code>git pull</code> 的时候经常会碰到的一段信息。</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide<span class="nv">$ </span>git pull
</span><span class='line'>You asked me to pull without telling me which branch you
</span><span class='line'>want to merge with, and <span class="s1">&#39;branch.tmp.merge&#39;</span> in
</span><span class='line'>your configuration file does not tell me, either. Please
</span><span class='line'>specify which branch you want to use on the <span class="nb">command </span>line and
</span><span class='line'>try again <span class="o">(</span>e.g. <span class="s1">&#39;git pull &lt;repository&gt; &lt;refspec&gt;&#39;</span><span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>See git-pull<span class="o">(</span>1<span class="o">)</span> <span class="k">for </span>details.
</span><span class='line'>
</span><span class='line'>If you often merge with the same branch, you may want to
</span><span class='line'>use something like the following in your configuration file:
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>branch <span class="s2">&quot;tmp&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">remote</span> <span class="o">=</span> &lt;nickname&gt;
</span><span class='line'>    <span class="nv">merge</span> <span class="o">=</span> &lt;remote-ref&gt;
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>remote <span class="s2">&quot;&lt;nickname&gt;&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">url</span> <span class="o">=</span> &lt;url&gt;
</span><span class='line'>    <span class="nv">fetch</span> <span class="o">=</span> &lt;refspec&gt;
</span><span class='line'>
</span><span class='line'>See git-config<span class="o">(</span>1<span class="o">)</span> <span class="k">for </span>details.
</span></code></pre></td></tr></table></div></figure>


<p>首先来看一下怎么操作，git就会唠叨上面一段话（假设我们现在在一个git repository的根目录，目前位于master branch）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git branch tmp
</span><span class='line'>git checkout tmp
</span><span class='line'>git pull
</span></code></pre></td></tr></table></div></figure>


<p>上面的三个命令很简单，首先就是基于当前的branch，创建一个新的branch叫 <code>tmp</code>，然后checkout到这个branch，最后执行 <code>git pull</code>。那为什么最后执行 <code>git pull</code> 的时候就会出现上面那一大段信息呢？</p>

<p>其实很简单。我们都知道，<code>git pull</code> 是做两件事情：首先做 <code>git fetch</code>，也就是将远端仓库中的所有改动都取回来；然后就是做 <code>git merge</code>，也就是将远端仓库的某个branch和我们当前本地所在的branch做一次merge。</p>

<p>所以，当 <code>git pull</code> 做第二件事情，也就是 <code>git merge</code> 的时候，它需要知道将本地的当前所在的这个branch和远端的哪个branch进行merge。当git不知道需要和远端的哪个branch进行merge时，就会出现上述的错误信息了。</p>

<p>解决办法有两个：</p>

<ul>
<li><p>写全 <code>git pull</code> 命令，比如 <code>git pull origin master</code>。这样git就知道跟 <code>origin</code> 这个remote git仓库的master branch进行merge。</p></li>
<li><p>使用 <code>git checkout -b &lt;branch name&gt; &lt;remote refs&gt;</code> 来创建branch，比如 <code>git checkout -b tmp origin/master</code>。这里我们在checkout的时候，明确指定了checkout名为origin的remote git仓库中的master branch，所以将来我们在这个tmp branch上进行 <code>git pull</code> 的时候，git自然就知道去和哪个远端的branch merge了。</p></li>
</ul>


<p><strong> NOTE：</strong> 事实上，<code>git branch</code> / <code>git checkout</code>，也可以使用 <code>-t</code> 这个参数来明确指定新的本地branch需要”track“哪个branch。</p>

<p>最后提一下，一开头git的那段出错信息中提到的一些所谓的配置项：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>If you often merge with the same branch, you may want to
</span><span class='line'>use something like the following in your configuration file:
</span><span class='line'>
</span><span class='line'>    <span class="o">[</span>branch <span class="s2">&quot;tmp&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="nv">remote</span> <span class="o">=</span> &lt;nickname&gt;
</span><span class='line'>    <span class="nv">merge</span> <span class="o">=</span> &lt;remote-ref&gt;
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>其实，这段信息的意思就是，git无法在你的git仓库的根目录下的 <code>.git/config</code> 中找到tmp这个branch的merge信息，也没有在你的全局git配置：<code>$HOME/.gitconfig</code> 中找到。</p>

<p>而对于一个没有上述问题的branch，比如在本文所举的例子中，master branch，在 <code>.git/config</code> 中就有这样的设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>branch <span class="s2">&quot;master&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nv">remote</span> <span class="o">=</span> origin
</span><span class='line'>  <span class="nv">merge</span> <span class="o">=</span> refs/heads/master
</span></code></pre></td></tr></table></div></figure>


<p>所以可以看到，其实git的逻辑很简单，只是我们需要确切的知道它究竟在干些啥，这样也就能理解它的抱怨了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[厦华LC-42T18电视机维修]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/15/prime-lc-42t18-fix/"/>
    <updated>2014-04-15T23:10:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/15/prime-lc-42t18-fix</id>
    <content type="html"><![CDATA[<p>家里客厅的电视是10年前买的厦华LC-42T18，几年前维修过一次，更换掉了整块主控板（也就是数字信号板）。但是上周电视再次罢工，如果让厦华再来维修，那又是大几百块，所以决定自己拆开来修修看。</p>

<p>之所以想自己维修，是因为故障现象跟上次差不多：</p>

<p>开机之后，红色电源指示灯亮，此时按电视上的POWER按键，电源指示灯能从红灯切换到蓝灯，但是没有图像没有声音。此时遥控和电视上的按键全部失灵，只能拔电源或者按电源总开关将电视关闭。</p>

<!-- more -->


<p>由于现象跟上次差不多，所以怀疑还是主控板出现了问题。首先就是使用万能的Google，发现这是该款电视的一个常见问题。网上包括淘宝上，有很多人可以维修。但是没有搜到该问题的原因以及如何维修。这也正常，能搜到人家就不用赚钱了。但是值得欣喜的是，搜到了该款电视的主控板的部分电路图：</p>

<p><a href="http://www.markzhang.cn/downloads/file/lc-42t18-schematic.pdf">厦华LC-42T18电路图</a></p>

<p>注：以上电路图下载自这里：<a href="http://www.dzbzw.com/zlxz/dltz/03042011/1954.html#ecms">http://www.dzbzw.com/zlxz/dltz/03042011/1954.html#ecms</a></p>

<p>所以，首先根据上图，用万用表量主控板是否有电源输入，发现输入的12v/5v均正常（上述电路图中是18v，这应该是不同批次的电视导致的）。再量几个稳压器，如N608/N603，都有输入输出电压，看起来一切正常。再由电路图可以看出，主控板上有一个主要的芯片N601/PW218-10，这颗芯片是power芯片，负责给板子上其他芯片供电，如果这颗芯片不能稳定工作，那么出现上述的现象就不奇怪了。用万用表量了一下主控板上其他主要芯片，都没有输入，所以可以确定就是这颗N601没有正常工作。</p>

<p>所以为什么这颗芯片没有正常工作呢？难道是给该芯片供电的几个稳压芯片有问题？再次Google，终于发现了这篇文章：</p>

<blockquote><p>失效原因分析：:
由于C641（贴片电解电容）周围存在发热量大的芯片如：PW118、N603（AMS1117）等，长时间使用后会造成C641（10V100u）容量变小，导致无法滤除N603（AMS1117）输出端的自激振荡,使得N603（AMS1117）的输出电压产生干扰脉冲，造成PW118停止工作，最终引起黑屏。为了防止C641（10V100u）漏液后引起短路，所以将其拆除，并在N603（AMS1117）的输出端并联上容量较大的电解电容替代。把改机的电解电容放置在下图中的所示的位置，使其远离发热源防止再次损坏。</p>

<p>更改步骤
拆除电容C641（10V100u）
取25V/220u电容一只，电容的负极接N603的第1脚（即左边第1脚，N603的接地脚），电容的正极接N603的第2脚（即中间脚，N603输出脚），最后给新加上的25V/220u电容点热熔胶固定。</p>

<p>厦华LC-37T25彩电黑屏，开机指示灯由红灯转成蓝灯，屏一直不亮
电源板强制开机各电压正常，24V带负载正常。可能是CPU板上N603（AMS1117—18）IC或N701（MX29LV800）FLASHIC虚焊引起。打开CPU板铁皮发现LED1微亮不闪烁，测N603（AMS1117）的输出电压为1.85V（正常1.8V）。补焊N701后开机正常，后按公司更改方案加10欧/2W电阻和换C641，上电故障排除。试机几天后，热机有时黑屏，一般为N603过热不良引起，在N603上加焊半封装IC做散热片（如K3116）。之后有2个多月了用户再也没有反映问题了。　　小结：由于N603温度过高，导致内部参数变化引起输出电压变高。因N603靠电路板来散热，散热不良，增加散热，使IC能够恒定在一个温度上，正常工作。</p></blockquote>

<p>注：上面的内容来自：<a href="http://www.jdwxs.com/xh/201303/00066725.html">http://www.jdwxs.com/xh/201303/00066725.html</a></p>

<p>上面说的比较乱，总结一下就是：</p>

<ul>
<li><p>上面的内容针对的是37寸的一款厦华电视，所以上面提到的PW118，就是我们这里的PW218。</p></li>
<li><p>有一种故障现象是开机后过一段时间，电视就能正常工作，这是因为N603的旁路电容C641出现了问题导致。而C641会出现问题是因为其周边存在发热量大的芯片。像N603这种稳压器，就是一个MOS管，或者可以理解成一个可变电阻，输入3.3v，输出1.0v，自然在它上面就有压降，导致发热；而PW218发热就更加容易理解。所以，要等到N603输出稳定了，PW218才能开始工作。</p></li>
<li><p>至于我遇到的现象，上面的内容也提到了，可能是由于N603/N701虚焊或不良导致。</p></li>
</ul>


<p>所以简单说来，问题就出在N603/C641它们身上，先对它们开刀。</p>

<p>首先是C641，发现我手上的这块主控板已经按照上文的描述，做过了修改。C641已经没有了，而N603的两个脚上被手工焊上了一个电解电容：</p>

<p><a href="http://www.markzhang.cn/downloads/image/lc-42t18-mb.jpg"><img src="http://www.markzhang.cn/downloads/image/lc-42t18-mb.jpg" alt="C641被一个电解电容替代" /></a></p>

<p>嗯。。想来是上次几年前厦华来给我更换的这款主控板，他们已经做了技改。解决了C641受热不良的问题。Cool。</p>

<p>所以问题就是N603了，想更换掉它但是我手上没有配件啊。。。仔细查看了电路板，发现有一个N405，跟N603应该是一样的一个稳压器，N405应该是用于VGA接口的，一般不用，所以我可以将它们两个调换一下。</p>

<p>用电烙铁将它们两个焊下来调换，为了保险再给N603加一个稳压管上去，全部搞定开机，哈哈，电视开始工作了！</p>

<p>所以现在回头想想，修电视跟修电脑也差不多，基本上就是首先找到几个怀疑对象，然后替换法来试验。唯一麻烦一点的就是，电脑是一个一个模块的换，而电路板可能就是一个芯片、一个电容、一个电阻这样的替换测试，相对来说麻烦许多。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux设备驱动suspend/resume的顺序]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/09/linux-driver-suspend-orders/"/>
    <updated>2014-04-09T16:07:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/09/linux-driver-suspend-orders</id>
    <content type="html"><![CDATA[<p>Linux在进入suspend的时候，会首先freeze userspace，然后挨个去调用设备驱动程序的suspend，最后调用architecture dependent的callback（非常奔放的描述了，其实有大量的细节问题存在）。Resume就是反过来执行一遍，最后重新enable userspace。那么作为设备驱动程序的编写者来说，主要就是要实现本驱动的suspend/resume逻辑。但是事实上，很多设备之间是有依赖性的，比如在ARM上，很多设备在resume之前，要求 <code>IOMMU</code> 要已经被enable，否则硬件上就会出现问题，因为访问的地址不对了。</p>

<p>那么Linux是如何设计/定义各个设备驱动之间的suspend/resume的顺序的呢？</p>

<!-- more -->


<p>简单来说，就是以下几条逻辑：</p>

<ul>
<li><p>各设备驱动程序按照其对应的设备（device）注册的先后次序，来决定其suspend/resume的顺序。注意是该驱动对应的设备的注册顺序，不是驱动注册的顺序，所以和驱动的注册优先级无关（也就是和module_init, rootfs_init, subsys_initcall这些无关）。越早被注册的设备，其对应的驱动的suspend越晚被调用，其对应驱动的resume越早被调用；越晚被注册的设备，其对应的驱动的suspend越早被调用，其对应的驱动的resume越晚被调用。</p></li>
<li><p>上面所说的逻辑往往不能满足我们的要求，因为现在的设备（device）都通过DT（Device Tree）的方式进行注册。那么，在DTS文件中，出现的越早的设备就越早被注册（可以参考函数 <code>of_platform_populate</code>）。而按照现在upstream linux kernel的约定，设备在DTS文件中，是按照其寄存器的地址，从低到高排序的，所以自然不可能满足我们的需求。</p></li>
</ul>


<p>那要怎么办？答案是驱动程序执行probe的时候返回 <code>-EPROBE_DEFER</code> 。</p>

<p>对于现在ARM SoC上的设备和其驱动程序来说，Linux kernel都使用Platform device/Platform driver来描述他们。而Platform driver的probe函数就相当于是驱动的初始化函数，一般用来映射寄存器，分配必需的内存等等，看一个驱动程序的代码，一般也可以从Probe开始看起。</p>

<p>Probe函数返回 <code>-EPROBE_DEFER</code>，指的是当一个设备驱动程序检测到其依赖的设备的驱动程序还没有ready的时候，返回这个出错码告诉kernel driver framework，我需要延缓自身的probe。还是举上面那个IOMMU的例子，如果一个设备依赖IOMMU，那么该设备的驱动在probe的时候，就应该检测iommu的驱动是否已经ready，如果没有那就要defer自己的probe。在Linux kernel driver framework中，收到驱动probe返回 <code>-EPROBE_DEFER</code>，就会将该驱动放入一个list中，一个workqueue来负责遍历这个list，从而再次执行这些驱动的probe函数（事实上，由于kernel driver framework不知道驱动互相之间的依赖关系，所以一旦有一个驱动成功probe了，kernel都会触发这个workqueue，让其去遍历一遍list）。</p>

<p>上面说的是 <code>-EPROBE_DEFER</code> 的背景故事了，而事实上，当一个驱动的probe返回过 <code>-EPROBE_DEFER</code> ，而最终成功probe之后，kernel就会修改该驱动的suspend/resume的顺序了。这就是为什么驱动probe的时候返回 <code>-EPROBE_DEFER</code> 能影响其suspend/resume的次序的原因了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Force the device to the end of the dpm_list since</span>
</span><span class='line'><span class="cm"> * the PM code assumes that the order we add things to</span>
</span><span class='line'><span class="cm"> * the list is a good order for suspend but deferred</span>
</span><span class='line'><span class="cm"> * probe makes that very unsafe.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">device_pm_lock</span><span class="p">();</span>
</span><span class='line'><span class="n">device_pm_move_last</span><span class="p">(</span><span class="n">dev</span><span class="p">);</span>
</span><span class='line'><span class="n">device_pm_unlock</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码来自函数：<code>deferred_probe_work_func</code>，也就是上面所说的defer probe的workqueue的工作函数。所以这里可以看到，当一个驱动最终在probe defer的work函数中probe成功之后，kernel会修改该驱动对应的设备（device）在 <code>dpm_list</code> 中的位置，而 <code>dpm_list</code> 正是kernel suspend/resume 驱动时候遍历的链表。看到调用了函数：<code>device_pm_move_last(dev);</code> 没？这个设备被移到了 <code>dpm_list</code> 的末尾。</p>

<ul>
<li>事情到此为止，可以说已经有了解决方案：我们可以使用 DEFER PROBE 的方式来调整驱动 suspend/resume 的顺序。不过这里要提一下，还有一条路也是可行的，那就是利用 <code>syscore suspend/resume</code>。</li>
</ul>


<p>syscore是Linux kernel定义的一个framework，我们可以将我们的驱动注册到syscore中去。syscore比较关键的就是 <code>syscore_ops</code> 这个结构：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">syscore_ops</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">list_head</span> <span class="n">node</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">suspend</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">resume</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">shutdown</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到只有 suspend/resume/shutdown 这三个ops，所以看到这里大概也可以猜到了，注册到syscore中的驱动，其suspend函数是在所有其他驱动的suspend都调用过之后调用的，而其resume函数是在所有其他驱动的resume调用之前调用的。简单来说，syscore的驱动，suspend被晚调用保证其他驱动suspend的时候，syscore的驱动还活着；syscore的驱动，resume被很早调用，从而保证其他驱动resume的时候，syscore的驱动已经活着了。好绕。。。</p>

<p>要将驱动注册到syscore中很简单，调用函数：<code>register_syscore_ops(&amp;your_driver_syscore_ops);</code> 就可以了。至于上面说到的syscore的suspend/resume的顺序，实现代码在这里：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">error</span> <span class="o">=</span> <span class="n">syscore_suspend</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">*</span><span class="n">wakeup</span> <span class="o">=</span> <span class="n">pm_wakeup_pending</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">suspend_test</span><span class="p">(</span><span class="n">TEST_CORE</span><span class="p">)</span> <span class="o">||</span> <span class="o">*</span><span class="n">wakeup</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">error</span> <span class="o">=</span> <span class="n">suspend_ops</span><span class="o">-&gt;</span><span class="n">enter</span><span class="p">(</span><span class="n">state</span><span class="p">);</span>
</span><span class='line'>      <span class="n">events_check_enabled</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">syscore_resume</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码来自函数：<code>suspend_enter</code>。可以看到当syscore_suspend被调用之后，就调用architecture dependent的 <code>suspend_ops-&gt;enter</code> 了，到这里整个系统就已经停下来了，进入suspend状态了。而当resume开始，<code>suspend_ops-&gt;enter</code> 返回之后，第一个被调用的就是 <code>syscore_resume</code>，所以上面那一段听起来好绕的逻辑就这么区区几行代码解释了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一站式密码管理器 - LastPass]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/08/lastpass/"/>
    <updated>2014-04-08T19:56:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/08/lastpass</id>
    <content type="html"><![CDATA[<p>我个人感觉，密码是相当反人类的设计。当你刚接触互联网的时候，可能感觉不到，甚至感觉理所当然，银行卡也需要设置密码呢。但是当访问的网站越来越多，各个站点论坛都需要注册用户、设置密码，多了之后密码就会变成非常痛苦的一种体验。</p>

<!-- more -->


<p>其实人自身就有很多唯一（Unique）的存在，密码不应该有存在的理由。之前我看过一个BBC的纪录片，为此还写过一篇博文：</p>

<p><a href="http://markzhang.cn/blog/2013/12/17/defeating-the-hackers/">密码之外的新的安全认证手段</a></p>

<p>之所以现在密码还被大量使用，可能现在技术还没有成熟、成本还没有降低到能普及的程度吧。</p>

<p>所以现在也涌现出了很多“密码管理”类的网站和应用，LastPass就是其中之一。我简单使用了一下，感觉还是挺方便的。</p>

<p>首先就是去<a href="http://www.lastpass.com">http://www.lastpass.com</a>注册一个账号了，不好意思，这里你又需要设置一个密码了。好在的是，设置了这个密码之后，以后的所有密码都不需要再记忆了，LastPass会帮你管理。所以，反过来说，一旦你的LastPass的密码被泄露的话，那后果就不堪设想了，所以为了安全起见，一些涉及到钱财类的密码还是单独设置吧，别依赖LastPass了。。。比如支付宝。:)</p>

<p>然后就是在LastPass的主页上，点击“下载”，就会下载一个针对你的浏览器的插件。我使用的是Chrome，所以一个Chrome插件就自动下载并安装了。安装完成之后，点击工具栏上出现的 <code>*</code> 字图标，输入你的LastPass的账号和密码，一切就已经就绪了。</p>

<p>LastPass有许多功能，比如表单的自动填写、Profile的设定等，但是我只使用了它的一个功能：自动生成密码。LastPass自动生成密码可以选择密码长度，默认是12个字符，也可以选择字符种类，比如包不包含特殊字符（默认不包含，因为有一些网站只接受字母和数字作为密码）等。</p>

<p>所以接下来我就先登录了一个我常去的网站，进入到账户设定，修改密码的页面，在新密码设定的输入框中，点击LastPass，选择自动生成密码，LastPass就会生成一个12个字符的密码并自动填充到密码框中，并且该密码自动保存在了你的LastPass的账户里面：</p>

<p><img src="http://www.markzhang.cn/downloads/image/lastpass-saved-passwd.png" alt="LastPass自动生成并保存的密码" /></p>

<p>上图显示的就是我新生成的淘宝的密码，这里面URL这一项很重要，LastPass会根据URL中的 <code>domain name</code> ，来检测你当前访问的网站是否在LastPass中有对应的密码记录。举上面的例子来说，URL是 <code>http://110.taobao.com/...</code>，所以下次只要你访问 <code>xxx.taobao.com/xxxx</code> 这样的网址，在网页中所有的密码输入框中都会出现一个 <code>*</code> 字图标，并且有一个下标1，表示该网站LastPass中有一个匹配的密码记录，只要点击这个 <code>*</code> 字图标，密码就自动填到密码框中了，很方便：</p>

<p><img src="http://www.markzhang.cn/downloads/image/lastpass-autofill.png" alt="LastPass自动填充密码" /></p>

<p>那有的时候，有些网站，比如淘宝，支付宝，网银等，密码输入都是有控件的，所以LastPass没法自动在密码框里面插入那个 <code>*</code> 字图标，这个时候怎么办？这也没有问题，只是稍微麻烦一点。以我使用Chrome浏览器，还是访问淘宝来举例，只需要去点击工具栏上那个LastPass的图标（这个图标也有一个1字的下标，表示该网站有一个对应的密码记录），选择 <code>Show matching sites</code> &ndash;> <code>Generated password for taobao.com</code> &ndash;> <code>Copy password</code>，然后再到密码输入框里面去粘贴就好了。如果很不幸你的网站的密码输入框不允许粘贴，那你只能手动去LastPass的密码保存页面，找到那个密码，然后手动输入了。。。</p>

<p>最后说一个我觉得是必须要设置的地方，就是 <code>Equivalent Domains</code>。要设置这个东西的原因在于，很多网站密码设置、修改不在一个domain上。比如126邮箱，使用的时候，我们登录的是www.126.com，但是修改密码的时候，是跳转到网易通行证的网站，也就是163.com；再比如139邮箱，登录的是139.com，但网页会自动跳转到10086.cn，又或者是cmpassport.com；淘宝也是，taobao.com/alipay.com/zhifubao.com这三个域名很多时候都是关联的，其实需要的都是相同的用户名和密码。上面提到，LastPass是根据 <code>domain name</code>，也就是域名来检测你当前访问的网页是否有匹配的密码记录的，所以如果你保存密码的时候，密码对应的域名是taobao.com，但是你现在访问某个alipay.com的网页，也需要这个密码，这个时候如果你不设置 <code>Equivalent Domains</code>的话，LastPass就不会自动提示密码了。</p>

<p>所以，点击工具栏上LastPass的图标，选择 <code>My LastPass Vault</code> &ndash;> <code>Settings</code> &ndash;> <code>Equivalent Domains</code>标签页，在里面新增一个记录，比如这样：</p>

<p><code>taobao.com, alipay.com</code></p>

<p><img src="http://www.markzhang.cn/downloads/image/lastpass-equivalent-domains.png" alt="LastPass Equivalent Domains" /></p>

<p>保存之后，下次你访问某个alipay.com的页面，LastPass就会提示你淘宝的密码了。当然这里只是举例，如果你的淘宝账户和alipay的账户是分开的，那自然就不需要这样设置。</p>

<p>最后，给你的LastPass的账户设置一个强密码，然后祈祷LastPass不会被墙，LastPass的密码数据库不会被盗吧！还有就是，真正涉及到钱的网站，比如支付宝、网银等，还是不要使用LastPass来管理密码吧，虽然记忆N个密码实在麻烦，但是麻烦总好过丢钱吧。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（一）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/04/git-gossip-1/"/>
    <updated>2014-04-04T14:28:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/04/git-gossip-1</id>
    <content type="html"><![CDATA[<p>当我们在做某些git操作的时候，git有的时候会给出一段一段的提示信息，而往往这些信息都是比较重要的。因为按照UNIX的设计哲学，执行成功或是无害操作，这些都是不会有任何提示信息的。做Linux的Hackers也奉行这种哲学，所以当git开始唠叨的时候，你真的需要关注一下它到底在罗嗦些啥。</p>

<p>这篇文章描述的就是某一个git的唠叨。</p>

<!-- more -->


<p>有的时候，特别是当执行 <code>git checkout</code> 的时候，你可能会看到这样的信息：</p>

<blockquote><p>Warning: you are leaving 30 commits behind, not connected to
any of your branches:</p>

<p>2553655 Merge branch &lsquo;master&rsquo; into prod</p>

<p>6b07300 Fix build</p>

<p>&hellip; and 28 more.</p>

<p>If you want to keep them by creating a new branch, this may be a good time
to do so with:</p>

<p>git branch new_branch_name 654646464</p></blockquote>

<p>注：以上信息来自：<a href="https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM">https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM</a></p>

<p>所以git的这段罗嗦到底是什么意思？</p>

<p>发生这种情况时，你一般工作在 <code>no branch</code> 上，也就是说，这个branch没有名字。也就是说，一旦你发生了 <code>git checkout</code> 操作之后，无法你是checkout到了一个有名字的branch，还是没有指定checkout的branch，就是更新本地的文件，这个 <code>no branch</code> 就再也回不去了，因为这个branch没有名字，所以你无法告诉git，我需要再回到这个branch上去。</p>

<p>基于此，如果你在 <code>no branch</code> 上有一些commit（无论是你自己commit的，还是你cherry-pick的），那么，当发生 <code>git checkout</code> 的时候，git就会给出上面的信息，告诉你，如果你现在不做点事的话，之前你所在的 <code>no branch</code> 就再也回不去了，所以，这个时候你最好建一个branch来保证你还能回到 <code>no branch</code> 上去：</p>

<blockquote><p>If you want to keep them by creating a new branch, this may be a good time
to do so with:</p>

<p>git branch new_branch_name 654646464</p></blockquote>

<p>事实上，如果你真的碰到了这种情况，而且当git给出上面一段信息告诉了你利害关系之后，你仍然义无反顾的无视了git的警告，没有创建一个有名字的branch来保存之前你在 <code>no branch</code> 上的工作成果，最终在某一天你想起来，想要找回N久之前在 <code>no branch</code> 上的一些commit的话，你仍然还有一根救命稻草：</p>

<p><code>git reflog</code></p>

<p>基本上，<code>git reflog</code> 将给出所有“失联”的commit。也就是说，这些commit不属于任何branch（no connection），从git数据库中删掉也无所谓。</p>

<p>所以，你最好期望 <code>git reflog</code> 中有你需要的commit，因为就像上面所说，这些commit本就是可以被安全删除的commit，如果你做过 <code>git gc</code>，或者是git自动做过 <code>git gc</code> 的话（git有一套逻辑来判断什么时候应该做一次gc），这些commit就真的没有了。</p>

<p>注：上面一段说的有点严重，事实上，git对待失联的commit，有一个expire time的设定，所以也不是说一旦执行过 <code>git gc</code>，这些commit就真的没有了。但是为了安全起见，对于重要的commit，还是需要注意不要丢了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Mac OS X上的Chrome添加SSL证书]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification/"/>
    <updated>2014-03-25T21:49:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification</id>
    <content type="html"><![CDATA[<p>Chrome在访问自签名SSL证书的网站时，会给出一个warning的页面，每次都要去点一下那个 <code>Proceed</code> 按钮特烦。每天点一次，日积月累下来每年也要花不少时间来点这个破玩意。Chrome就不能聪明一点来个诸如”记住我的选择“这样的按钮么？</p>

<p>折腾总是发生在忍无可忍的时候，幸好要解决这个问题不麻烦。</p>

<!-- more -->


<ul>
<li><p>首先就是把SSL证书导出了。这个非常容易，访问一下有SSL warning的那个网站，在Chrome给出的warning页面，地址栏的开头有一个被划了斜线的https，点那里就可以看到证书的信息，从而可以将证书导出出来。</p></li>
<li><p>然后就是导入这个证书了。直接在Mac OS X的应用列表中启动 <code>Keychain Access</code>，当然你也可以在Chrome里面选择Settings &ndash;> Advanced settings &ndash;> Manage Certification，这样出来的就是Mac OS X的 <code>Keychain Access</code> 这个应用程序。</p></li>
</ul>


<p><img src="http://www.markzhang.cn/downloads/image/keychain-access.png" alt="Keychain Access" /></p>

<ul>
<li><p>在 <code>Keychain Access</code> 的界面中，点击左下的 + 按钮，选择刚才得到的SSL证书，就将该证书导入了。</p></li>
<li><p>最后我们要选择 <code>Always Trust</code> 这个证书，否则SSL warning还是会有。在 <code>Keychain Access</code> 中，双击刚才导入的证书，在出现的对话框中，展开 <code>Trust</code> 那个部分，然后选择 <code>Always Trust</code> 就可以了。比如下图就是12306网站的SSL证书：</p></li>
</ul>


<p><img src="http://www.markzhang.cn/downloads/image/keychain-always-trust.png" alt="Always trust SSL certification" /></p>

<ul>
<li>重启Chrome，再访问那个网站，就没有SSL warning了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架设无线桥接网络（WDS）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/22/setup-wireless-wds/"/>
    <updated>2014-03-22T19:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/22/setup-wireless-wds</id>
    <content type="html"><![CDATA[<p>现在的无线路由器动辄3根天线，号称穿墙能力如何如何，信号可以从一楼一直覆盖到三楼。但是根据我几年来使用了N款无线路由器之后，发现都是扯。我现在使用的是一台ASUS的，3根天线，128M内存的无线路由器，支持刷第三方固件（如DD-WRT, Tomato），但是穿墙效果还是无法让人满意。路由器放在房间，客厅的信号就是时有时无。当然，我指的是使用ipad或者手机时，信号较弱，如果使用笔记本电脑要好一些。</p>

<p>忍受了2年之后，我决定在客厅再放一个无线路由器，做无线桥接（WDS）使用，彻底摆脱信号之苦。</p>

<!-- more -->


<p>简单说下两台路由器：</p>

<ol>
<li><p>做AP用的，也是连接着Internet的，就是那台ASUS的，放在书房。</p></li>
<li><p>做桥接用的，放在客厅的，是一台特价的时候买的四十块钱的Tenda（腾达）的无线路由器。</p></li>
</ol>


<p>其实网上介绍WDS的文章很多，但是很多文章都不适用于我的情况，所以做了很多次测试。</p>

<p>最后配置完成之后，发现其实非常简单：</p>

<h2>主路由器（做AP用的ASUS的那台）的配置</h2>

<p>由于我这台ASUS的路由器给我刷了Tomato的固件，所以这里是Tomato中的配置方法。按照下图配置即可：</p>

<p><img src="http://www.markzhang.cn/downloads/image/tomato-ap-wds.png" alt="Tomato AP+WDS 配置" /></p>

<ul>
<li>工作模式设置成 <code>AP + WDS</code></li>
<li>通道尽量选择一个没人使用的。现在每家每户都有无线路由器，所以常见通道很多人都在使用，挑一个没人使用的比较好</li>
<li>无线加密还是按照以前的就好，现在基本上用的都是 <code>WPA2 Personal</code> 了</li>
<li>WDS一项中，你可以将辅路由器的MAC地址填写进去，也可以像上面的图中所示，选成AUTO</li>
</ul>


<h2>辅路由器（做桥接用的Tenda的那台）的配置</h2>

<p>忘记截图了，但是只需要确保以下几点即可：</p>

<ul>
<li>Internet连接要关闭，因为是做桥接用。没有关闭就设成有线网络连接Internet，反正我们不会插网线上去，所以等于禁用了</li>
<li>LAN的网段不要设成跟主路由器一个网段，以免冲突。比如主路由器是192.168.1.x, 辅路由器就可以设成192.168.2.x</li>
<li>关闭DHCP，因为所有的WIFI数据会被发送到主路由器去</li>
<li>工作模式设成WDS，然后填写主路由器的无线MAC地址。一般的路由器都会有一个Scan按钮，可以给出所有的无线网络，选择主路由器那个即可</li>
<li>无线加密设置成跟主路由器一样（加密方法、密钥），这很重要</li>
</ul>


<p>我这个Tenda的路由器，设成WDS模式之后，无线的SSID就会自动设置成跟主路由器一样。所以，当做完上面的设置之后，家里就只有一个无线信号，走到书房就自动连接到主路由器，走到客厅就会自动连接到辅路由器，Cool。</p>

<p>Have a good day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu上连接Juniper SSL VPN]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/20/juniper-vpn-on-ubuntu/"/>
    <updated>2014-03-20T22:26:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/20/juniper-vpn-on-ubuntu</id>
    <content type="html"><![CDATA[<p>现在国内很多外企都使用Juniper SSL VPN，来让员工可以在家连入到公司的网络。但是我发现，Juniper的SSL VPN在windows和Mac OS X上都可以很好的工作，但是在Ubuntu上貌似就有问题。就算你正确安装了Java Runtime，打开浏览器，<code>Host Checker</code> 和 <code>Network Connect</code> 也无法正常运行。有人说这是因为现在我们大多使用64位的Ubuntu，而 <code>Host Checker</code> 和 <code>Network Connect</code> 需要32位的浏览器和32位的JRE才能工作。</p>

<p>我没有去深究32位的Ubuntu下是否Juniper VPN就真的可以正常工作了，因为我找到了一个更简单的办法。</p>

<!-- more -->


<p>这个方法来自这位大神，他自己分析了Juniper SSL VPN的工作过程，然后写了一个perl脚本解决了这个问题：</p>

<p><a href="http://smallhacks.wordpress.com/2012/07/15/jvpn-perl-script-to-connect-to-the-juniper-vpn-with-host-checker-enabled/">http://smallhacks.wordpress.com/2012/07/15/jvpn-perl-script-to-connect-to-the-juniper-vpn-with-host-checker-enabled/</a></p>

<p>对原理感兴趣的可以自己去看这篇文章（可能需要翻墙），这里简述一下步骤：</p>

<ul>
<li><p>从上面的文章提供的地址，下载 <code>jvpn-0.7.0.tar.bz2</code>。</p></li>
<li><p>解开，将配置文件 <code>jvpn.ini</code> 拷贝一份以便输入自己的配置，比如：<code>cp jvpn.ini mark.ini</code>，然后编辑这些配置项：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>host: 你的VPN server的地址
</span><span class='line'>username: 用户名
</span><span class='line'>realm: 区域，一般的外企应该是 <span class="sb">`</span>Employee<span class="sb">`</span> 或者 <span class="sb">`</span>Contractor<span class="sb">`</span>
</span><span class='line'>verifycert: 是否验证SSL证书，如果你本地没有导入你的VPN server的SSL的证书的，可以写0，否则写1
</span><span class='line'>dnsprotect: 这可以防止Ubuntu的NetworkManager修改 <span class="sb">`</span>/etc/resolv.conf<span class="sb">`</span> 。我们需要修改这个文件从而修改DNS server的配置。
</span><span class='line'>mode: <span class="sb">`</span>ncsvc/ncui<span class="sb">`</span> 都可以
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>然后就可以执行：<code>sudo perl ./jvpn.pl --conf mark.ini</code>。成功了就可以看到连到了VPN，按 <code>Ctrl+C</code> 可以中断连接。</li>
</ul>


<p><strong> Troubleshooting </strong></p>

<ul>
<li><code>sudo apt-get install libterm-readkey-perl</code>，如果jvpn.pl说 <code>Term::ReadKey module</code> 找不到的话</li>
<li><code>sudo apt-get install lib32z1</code>，如果出现这样的错误： <code>libz.so.1: cannot open shared object file: No such file or directory</code></li>
<li><code>sudo apt-get install gcc-multilib</code>，如果看到这样的错误： <code>bits/predefs.h: No such file or directory</code></li>
<li><code>sudo apt-get install libhttp-request-ascgi-perl</code>，如果jvpn.pl说 <code>HTTP::Request module</code> 找不到的话</li>
</ul>


<p>这样在Ubuntu下，就可以使用Juniper SSL VPN了。很多外企的网络，自带翻墙，所以拨上VPN之后，除了工作之外，还可以实现自动翻墙。配合上chnroute，就完美了。不清楚chnroute有啥作用的，可以看我之前写的一篇文章：</p>

<p><a href="http://markzhang.cn/blog/2013/12/04/chnroutes-on-mac/">Chnroutes的使用（Mac OS X Mavericks）</a></p>

<p>最后附上目前最新版本的jvpn 0.7.0：<a href="http://www.markzhang.cn/downloads/soft/jvpn-0.7.0.tar.bz2">jvpn-0.7.0.tar.bz2</a></p>
]]></content>
  </entry>
  
</feed>
