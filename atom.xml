<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2014-02-08T21:24:22+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VirtualBox中安装Ubuntu，在有VPN的情况下会有DNS的问题]]></title>
    <link href="http://www.markzhang.cn/blog/2014/02/08/virtualbox-ubuntu-dns-issue/"/>
    <updated>2014-02-08T21:11:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/02/08/virtualbox-ubuntu-dns-issue</id>
    <content type="html"><![CDATA[<p>标题表达的不是很清楚（否则标题就太长了。。。），意思是：如果我们在一台windows的机器上安装了VirtualBox，然后在里面安装Ubuntu，然后在windows中连上VPN，此时Ubuntu虚拟机中就会有DNS的问题。我测试的是最新版本的VirtualBox，Ubuntu是12.04的版本，不知道将来这个问题会不会解决。</p>

<!-- more -->


<p>发现这个问题是因为我使用的VPN是可以翻墙的，举例来说可以访问到youtube，但是我发现在我的Ubuntu虚拟机中就无法访问youtube和其他一些我需要的网站。而且我发现Ubuntu中，浏览器的现象就是DNS解析都完成不了，所以就一直无法打开。</p>

<p>经过Google，在这里发现了答案：</p>

<p><a href="http://superuser.com/questions/570984/virtualbox-guest-ubuntu-loses-dns-when-host-connects-to-vpn">http://superuser.com/questions/570984/virtualbox-guest-ubuntu-loses-dns-when-host-connects-to-vpn</a></p>

<p>简单来说，你只需要这样做：</p>

<ol>
<li>关闭虚拟机</li>
<li>在Windows中打开cmd.exe，然后输入：</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\Program Files\Oracle\VirtualBox\VBoxManage.exe modifyvm "ubuntu" --natdnshostresolver1 on</span></code></pre></td></tr></table></div></figure>


<p>命令中的<code>ubuntu</code>是我的ubuntu虚拟机的名字（VM name）。</p>

<p>上述链接中，作者也不太明白为什么，他是这么说的：</p>

<blockquote><p>I suspect it&rsquo;s because when the VPN is active, the host is doing something special for DNS lookups besides just forwarding requests to the specified DNS servers that VirtualBox picked up from the Windows config.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[陀螺进动（Gyroscope Precession）和循环螺距（Cyclic Pitch）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/28/gyroscope-precession/"/>
    <updated>2014-01-28T16:10:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/28/gyroscope-precession</id>
    <content type="html"><![CDATA[<p>循环螺距就是通过改变十字盘（Swashplate），使直升机双桨上的升力造成差异，从而使直升机可以向前、向后、向左、向右移动。之所以称为“循环”（Cyclic），是因为双桨在旋转的过程中，其螺距循环的，有规律的进行改变。</p>

<p>在这其中有一个有意思的现象：陀螺进动（Gyroscope Precession）。有关这个现象我首先是在这里看到的：</p>

<!-- more -->


<p><a href="http://www.rchelicopterfun.com/gyroscopic-precession.html">http://www.rchelicopterfun.com/gyroscopic-precession.html</a></p>

<p>这篇文章写的很不错，特别是老外还自己拍了两段视频来解释这个事情，非常有趣。</p>

<p>所谓“陀螺进动（Gyroscope Precession）“，指的是如果你给一个正在旋转的陀螺一个力的话，那么这个力产生的运动将与力的方向偏离90度。</p>

<p>所以，在直升机上，高速旋转的主旋翼就相当于一个陀螺，那么当我们试图通过改变十字盘的姿态来使直升机向前后左右移动时，就需要注意这个90度的问题。</p>

<p>举例来说：假设我们想让直升机向前运动。那么很自然的，我们想象中应该是这样来实现：</p>

<p>假设直升机的姿态是这样：视点是从上往下俯视直升机，直升机的头对准12点，尾对准6点，两个旋翼和直升机没有夹角，也就是旋翼也是对准12点和6点。那么此时我们只需要加大对准6点的旋翼的螺距，同时减小（甚至无需减小）对准12点的旋翼的螺距，那么这两片旋翼立刻产生升力差，从而导致直升机前倾从而向前运动。</p>

<p>但是由于陀螺进动，我们知道如果按照上面的方法来做，直升机将会向右运动（如果是旋翼是顺时针旋转的话），而不是向前运动。所以，我们需要让旋翼在对准9点和3点这两个位置时，改变两片旋翼的螺距，产生升力差，最后由于陀螺进动，使直升机向前运动。</p>

<p>OK，明白了上面的内容之后，很自然的，我们就会想到上述这些东西在直升机是，具体来说是在十字盘上，是如何实现的呢？我们知道，当我们操纵直升机向前后左右移动的时候，十字盘也是向前后左右倾斜的，那在陀螺进动下，为什么能让直升机正确的运动呢？</p>

<p>答案是，旋翼的桨夹和十字盘有一个90度的夹角。引用一下论坛上某位模友的一张图：</p>

<p><img src="http://www.markzhang.cn/downloads/image/rotor-hub.jpg" alt="直升机桨夹 Helicopter Rotor Hub" /></p>

<p>引用帖子的地址是：</p>

<p><a href="http://bbs.mx3g.com/forum.php?mod=viewthread&amp;tid=208032&amp;ordertype=1">http://bbs.mx3g.com/forum.php?mod=viewthread&amp;tid=208032&amp;ordertype=1</a></p>

<p>这下就很清楚了，虽然十字盘的姿态跟我们控制的是一致的，但是由于桨夹有90度的一个偏转，所以正好就满足了陀螺进动的要求。如果还是想不明白，拿出直升机来一看便知。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X Mavericks上的浏览器插件的问题]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/20/internet-plugins-on-mavericks/"/>
    <updated>2014-01-20T21:30:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/20/internet-plugins-on-mavericks</id>
    <content type="html"><![CDATA[<p>升级了Mavericks之后，发现浏览器中的一些插件出问题了。最先遇到的就是在Safari中经常会蹦出来对话框说，是否要在该网站上运行迅雷（Thunder xxx）插件，有几个选项，yes/no/never for this site&hellip;. 后来又发现旺旺不工作了，也就是在浏览器中点击旺旺图标，旺旺出不来了&hellip;.</p>

<p>所以花了点时间看了一下，原来现在在Safari中有专门的 <code>Internet plug-ins</code> 这样的设置了，而且该设置影响安装的所有浏览器（如Chrome, Firefox）。</p>

<!-- more -->


<p>首先进入Safari的Preferences（COMMAND + ,），在 <code>Security</code> 标签中，有 <code>Internet plug-ins</code> 这一项，我们需要先点击 <code>Allow Plug-ins</code>，然后点击后面的 <code>Manage Website Settings...</code> 按钮出现对话框：</p>

<p><img src="http://www.markzhang.cn/downloads/image/manage-website-settings.png" alt="Manage Website Settings" /></p>

<p>在这里就可以设置每个plugin的处理方式了，如上图所示，针对旺旺插件，我们选择了 <code>Allow Always</code>。你还可以在这里找到其他很多你需要用到的插件，比如淘宝的 <code>AliEdit</code>，也就是密码输入框的插件、迅雷的下载插件等等。值得一提的还有就是支付宝的插件，名字有点怪，叫：<code>npalicdo plugin</code>。</p>

<p>有意思的是，在MacOS X上，所有的插件是统一安装在一个地方的：<code>/Library/Internet Plug-Ins</code>。所以插件一旦安装了，所有的浏览器就都能使用了。只是每个浏览器是否使能某个插件，在各自的设置里面，如上面介绍的Safari的。在Chrome中，那就是在页面：<code>chrome://plugins</code> 里面。</p>

<p>所以其实比如下载了支付宝的浏览器插件，安装的时候，其实就是把文件拷贝到了 <code>/Library/Internet Plug-Ins</code> 这个目录下而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenGL Programming on MacOS X (Mavericks)]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/06/hellogl-on-macosx/"/>
    <updated>2014-01-06T21:30:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/06/hellogl-on-macosx</id>
    <content type="html"><![CDATA[<p>最近开始看《OpenGL Programming Guide 8th Edition》一书。所以很自然的，就会想把书中的源代码在MacOS X Mavericks上试验一遍。很显然程序是没法在Mavericks上run的，所以就对程序做了一些修改。在试验的过程中，自然也发现了一些书中没有说到的内容，所以记录下来。</p>

<p>事实上，这本书中的代码是在Windows上测试的，所以MacOS X上就会有一些不同。尤其体现在一些第三方的framework/library上。</p>

<p>本文是在试验该书中第一个源程序的时候，发现的一些东西。和我们第一个编写的HelloWorld程序一样，我称该程序为HelloGL。</p>

<!-- more -->


<p>为了方便阅读，所有的代码在最后给出。系统的环境是Mavericks + Xcode 4.6.1。这里说一下我在原书给出的代码上，做出的一些修改：</p>

<h2>有关GLEW</h2>

<p>GLEW当然是可以使用的，只是不像GLUT，Mavericks没有自带GLEW，需要自己下载安装。不过安装也超级简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make glew.lib
</span><span class='line'>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>我尝试过直接make，也就是编译所有的内容（其中包括glewinfo等实用程序），在Mavericks上会编译失败（提示缺少AGL/agl.h）。所以我只编译了glew的库，事实上我们也只需要库就可以了。</p>

<p>有了GLEW之后，只需要include一个 <code>GL/glew.h</code> 就搞定了。因为GLEW会将OpenGL中用到的所有的数据类型和函数都定义一遍，而且提供大量的宏，使我们可以查询一个具体的 <code>feature/函数</code> 在当前平台上是否存在。这也是GLEW的主要功能了。对于函数，GLEW会根据不同平台，去打开对应的库，取出对应函数的地址，从而让我们可以调用到该平台上正确的实现。参看书中的附录F：<code>OpenGL and Window Systems</code>，有详细的解释。</p>

<p>不过StackOverflow上说，其实在MacOS X中，GLEW并不需要。我试验了一下，的确是不需要（当然我只是用本文中的这个简单的程序试验了一下）。理由是：</p>

<blockquote><p>About glew, normally you don&rsquo;t require glew on MacOS due the way how the OpenGL layer is implemented in MacOS. You are restricted to the OpenGL features MacOS provides/exposes. So either the features are available via the headers of MacOS or not.</p>

<p>The header would be #include &lt;OpenGL/gl3.h> where also the naming is missleading, it does not mean only OpenGL 3, it is the same like with the context.</p></blockquote>

<h2>主程序的改动</h2>

<p>主要改动了以下几点：</p>

<ul>
<li><p>去掉了 <code>include "vgl.h"</code>。因为这个头文件中啥实在东西没有，唯一一个需要用到的就是一个 <code>BUFFER_OFFSET</code> 宏的定义，把它拿到主程序文件中来了。</p></li>
<li><p>代码中涉及的两个shader程序：<code>triangle.vert</code> 和 <code>triangle.frag</code>，改名成了 <code>simple.vert</code> 和 <code>simple.frag</code>。一来是感觉更贴切，二来是这两个shader程序在该书的源代码包中有，拷贝过来就能用了。</p></li>
<li><p>如上面所说，GLEW不是必须的，所以我去掉了GLEW相关的代码。</p></li>
<li><p>在main函数中增加了一行，用来打印当前GLSL的版本：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Supported GLSL version is: &quot;</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>  <span class="n">glGetString</span><span class="p">(</span><span class="n">GL_SHADING_LANGUAGE_VERSION</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为后续也会提到，一开始运行程序的时候，会发现shader程序无法编译，所以增加了这一行打印，方便调试。这个也是来自StackOverflow上大佬们的建议。</p>

<ul>
<li>去掉了main函数中这两行代码：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">glutInitContextVersion</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="n">glutInitContextProfile</span><span class="p">(</span><span class="n">GLUT_CORE_PROFILE</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>理由是，我没有使用书中建议的 <code>freeglut</code>。因为Mavericks，或者准确点来说Xcode自带了GLUT（应该是openglut），所以就没有必要再安装一个类似的玩意了。
而Xcode自带的GLUT，是没有上述的两个函数的。</p>

<ul>
<li>最关键的一点改动：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_RGBA</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>改成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_3_2_CORE_PROFILE</span> <span class="o">|</span> <span class="n">GLUT_RGBA</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>正是由于改动#4，导致程序运行的时候，没有正确的选择OpenGL的版本和profile。所以如果没有这个改动，程序运行会发现shader程序没法编译，错误信息是：<code>unsupported version xxx</code>（shader程序的第一行就是#version）。所以我很小白的在StackOverflow上问了这个问题，最终得到了大佬的回答：</p>

<blockquote><p>MacOS uses Legacy Profile as default for all created OpenGL context. Therefor by default only OpenGL up to 2.1 and GLSL up to 1.20 is supported.</p>

<p>To use OpenGL 3.2+ you need to switch to the Core Profile. The naming here is a little bit confusing because it stats only 3.2Core profile, but actually this 3.2 or later (every OpenGL profile that is supported by the system/driver that is backwards compatible to 3.2)</p>

<p>For glut (depends on the version of glut if it works) the command on MacOS is:</p>

<p>glutInitDisplayMode(GLUT_3_2_CORE_PROFILE | &hellip;  ) Where | &hellip; would be the other options you want to pass to glutInitDisplayMode.</p></blockquote>

<p>正如上面所说，虽然名字叫3_2_CORE_PROFILE，但是其实会使用系统当前最新版本的OpenGL实现啦。上面GLEW一节中也说道，虽然include的头文件名字叫 <code>OpenGL/gl3.h</code>，但其实不是真的只是OpenGL 3啦。</p>

<h2>LoadShaders的改动</h2>

<p>LoadShaders是书中提供的一个用来读取、编译shader程序的一小段代码。这部分内容我几乎没有改动，除了：</p>

<ul>
<li><p>去掉了 <code>#include &lt;GL/gl.h&gt;</code> 等，改成了 <code>#include &lt;OpenGL/gl3.h&gt;</code>，当然如果你用GLEW，也可以改成：<code>#include &lt;GL/glew.h&gt;</code>。</p></li>
<li><p>将LoadShader.cpp中的 <code>_DEBUG</code> 改成了 <code>DEBUG</code>。理由是：Xcode的Project中，如果是编译运行Debug版本，默认就会定义 <code>DEBUG</code> 这个宏，所以做这个修改就省的以后每次新建项目，都要再去定义 <code>_DEBUG</code> 了。</p></li>
</ul>


<h2>其他一些Tips</h2>

<p>代码的改动就是上述的一些内容了。不过为了让程序能在Xcode中编译和运行，还需要做一些工作。这里就作为Tips来描述一下。</p>

<p>注：其实也是没事找事，在终端下自己写一个Makefile就可以搞定的事情，偏要用Xcode。只是自从用了MacOS X之后，还没有用过Xcode，想尝试一下而已。</p>

<ul>
<li><p>有关GLEW的头文件。Xcode中的Project，有一个配置项叫做：<code>Always Search User Paths</code>。需要将这个改成Yes，并将 <code>User Header Search Paths</code> 设置成 <code>/usr/include</code>。否则代码编译的时候就会错误：找不到 <code>GL/glew.h</code>。从Linux编程过来的人表示极度不适应&hellip;</p></li>
<li><p>GLEW的库文件。和Linux下的C编程一样，我们都知道需要在编译的时候给出一个链接的参数：<code>-lGLEW</code>。这可以在Xcode中Project设定的 <code>Other Linker Flags</code> 中设置。但是设置完了之后，再次报告链接错误：找不到libGLEW，但是文件明明就在 <code>/usr/lib</code> 目录下。从Linux编程过来的人再次表示极度不适应&hellip; 最后没办法，只能这样：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ln -s /usr/lib/libGLEW.dylib /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk/usr/lib/libGLEW.dylib
</span></code></pre></td></tr></table></div></figure>


<p>所以到了这里，可以基本明白了，Xcode是一个相对独立而且封闭的环境，所有的dependencies都被约束在了Xcode的体系下。我能再次吐槽么？</p>

<ul>
<li>如果要在Xcode中run/debug程序的话，两个shader文件：<code>simple.vert</code> 和 <code>simple.frag</code> 要放到Xcode运行程序的working directory中，也就是这个目录：</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/Users/mark/Library/Developer/Xcode/DerivedData/HelloGL-&lt;debug <span class="nb">hash </span>id&gt;/Build/Products/Debug
</span></code></pre></td></tr></table></div></figure>


<p>记得我们在主程序中添加的一行用来打印当前GLSL的版本的代码么？这里派上用处了，将你的shader程序中的 <code>#version xxx</code> 修改成这里打印出来的值，因为这才是你的系统当前支持的GLSL的版本。</p>

<ul>
<li>在Xcode Project设定中，将GLUT和OpenGL添加到 <code>Link Binary with Libraries</code> 中去。这个用过Xcode的都应该知道：</li>
</ul>


<p><img src="http://www.markzhang.cn/downloads/image/HelloGL-link-libs.png" alt="HelloGL Link Binary with Libraries" /></p>

<p>整个项目的文件列表是长这个样子的：</p>

<p><img src="http://www.markzhang.cn/downloads/image/HelloGL-files.png" alt="HelloGL files" /></p>

<h2>代码</h2>

<figure class='code'><figcaption><span>HelloGL主程序 c++ (main.cpp)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/main.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Installed by building glew source</span>
</span><span class='line'><span class="cm"> * Also need to be included first because it defines all &quot;gl&quot; stuffs</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * About glew, normally you don&#39;t require glew on MacOS due the way how the</span>
</span><span class='line'><span class="cm"> * OpenGL layer is implemented in MacOS. You are restricted to the OpenGL</span>
</span><span class='line'><span class="cm"> * features MacOS provides/exposes. So either the features are available via</span>
</span><span class='line'><span class="cm"> * the headers of MacOS or not. There header would be #include &lt;OpenGL/gl3.h&gt;</span>
</span><span class='line'><span class="cm"> * where also the naming is missleading, it does not mean only OpenGL 3,</span>
</span><span class='line'><span class="cm"> * it is the same like with the context.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="c1">//#include &lt;GL/glew.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;LoadShaders.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;GLUT/GLUT.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define BUFFER_OFFSET(x) ((const void*)(x))</span>
</span><span class='line'>
</span><span class='line'><span class="k">enum</span> <span class="n">VAO_IDs</span> <span class="p">{</span> <span class="n">Triangles</span><span class="p">,</span> <span class="n">NumVAOs</span> <span class="p">};</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Buffer_IDs</span> <span class="p">{</span> <span class="n">ArrayBuffer</span><span class="p">,</span> <span class="n">NumBuffers</span> <span class="p">};</span>
</span><span class='line'><span class="k">enum</span> <span class="n">Attrib_IDs</span> <span class="p">{</span> <span class="n">vPosition</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span> <span class="n">VAOs</span><span class="p">[</span><span class="n">NumVAOs</span><span class="p">];</span>
</span><span class='line'><span class="n">GLuint</span> <span class="n">Buffers</span><span class="p">[</span><span class="n">NumBuffers</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">GLuint</span> <span class="n">NumVertices</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glGenVertexArrays</span><span class="p">(</span><span class="n">NumVAOs</span><span class="p">,</span> <span class="n">VAOs</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAOs</span><span class="p">[</span><span class="n">Triangles</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">GLfloat</span> <span class="n">vertices</span><span class="p">[</span><span class="n">NumVertices</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">{</span> <span class="o">-</span><span class="mf">0.90</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.90</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>  <span class="mf">0.85</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.90</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="o">-</span><span class="mf">0.90</span><span class="p">,</span>  <span class="mf">0.85</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>  <span class="mf">0.90</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.85</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>  <span class="mf">0.90</span><span class="p">,</span>  <span class="mf">0.90</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="o">-</span><span class="mf">0.85</span><span class="p">,</span>  <span class="mf">0.90</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glGenBuffers</span><span class="p">(</span><span class="n">NumBuffers</span><span class="p">,</span> <span class="n">Buffers</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glBindBuffer</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span> <span class="n">Buffers</span><span class="p">[</span><span class="n">ArrayBuffer</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">glBufferData</span><span class="p">(</span><span class="n">GL_ARRAY_BUFFER</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">vertices</span><span class="p">),</span>
</span><span class='line'>           <span class="n">vertices</span><span class="p">,</span> <span class="n">GL_STATIC_DRAW</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">ShaderInfo</span> <span class="n">shaders</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">GL_VERTEX_SHADER</span><span class="p">,</span> <span class="s">&quot;simple.vert&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">GL_FRAGMENT_SHADER</span><span class="p">,</span> <span class="s">&quot;simple.frag&quot;</span> <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span> <span class="n">GL_NONE</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">GLuint</span> <span class="n">program</span> <span class="o">=</span> <span class="n">LoadShaders</span><span class="p">(</span><span class="n">shaders</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glUseProgram</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glVertexAttribPointer</span><span class="p">(</span><span class="n">vPosition</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">GL_FLOAT</span><span class="p">,</span>
</span><span class='line'>                <span class="n">GL_FALSE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">BUFFER_OFFSET</span><span class="p">(</span><span class="mi">0</span><span class="p">));</span>
</span><span class='line'>  <span class="n">glEnableVertexAttribArray</span><span class="p">(</span><span class="n">vPosition</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">display</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glBindVertexArray</span><span class="p">(</span><span class="n">VAOs</span><span class="p">[</span><span class="n">Triangles</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">glDrawArrays</span><span class="p">(</span><span class="n">GL_TRIANGLES</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">NumVertices</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glFlush</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">glutInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_3_2_CORE_PROFILE</span> <span class="o">|</span> <span class="n">GLUT_RGBA</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glutInitWindowSize</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">512</span><span class="p">);</span>
</span><span class='line'>  <span class="n">glutCreateWindow</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="cm">/*</span>
</span><span class='line'><span class="cm">  * Normally don&#39;t need GLEW on MacOSX.</span>
</span><span class='line'><span class="cm">  * But set glewExperimental to TRUE if you want to use it.</span>
</span><span class='line'><span class="cm">  * Otherwise some funcs like &quot;glGenVertexArray&quot; will be NULL.</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>  <span class="cm">/* glewExperimental = GL_TRUE;</span>
</span><span class='line'><span class="cm"> if (glewInit()) {</span>
</span><span class='line'><span class="cm">     cerr &lt;&lt; &quot;Unable to initialize GLEW... exiting&quot; &lt;&lt; endl;</span>
</span><span class='line'><span class="cm">     exit(EXIT_FAILURE);</span>
</span><span class='line'><span class="cm"> } */</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Supported GLSL version is: &quot;</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>      <span class="n">glGetString</span><span class="p">(</span><span class="n">GL_SHADING_LANGUAGE_VERSION</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">init</span><span class="p">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glutDisplayFunc</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">glutMainLoop</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>LoadShaders c++ (LoadShaders.cpp)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/LoadShaders.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  --- LoadShaders.cxx ---</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//////////////////////////////////////////////////////////////////////////////</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;LoadShaders.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __cplusplus</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span>
</span><span class='line'><span class="n">ReadShader</span><span class="p">(</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">filename</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">FILE</span><span class="o">*</span> <span class="n">infile</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span> <span class="n">filename</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">infile</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Unable to open file &#39;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">filename</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&#39;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* DEBUG */</span><span class="cp"></span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fseek</span><span class="p">(</span> <span class="n">infile</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_END</span> <span class="p">);</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">len</span> <span class="o">=</span> <span class="n">ftell</span><span class="p">(</span> <span class="n">infile</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">fseek</span><span class="p">(</span> <span class="n">infile</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_SET</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLchar</span><span class="o">*</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">fread</span><span class="p">(</span> <span class="n">source</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="n">infile</span> <span class="p">);</span>
</span><span class='line'>    <span class="n">fclose</span><span class="p">(</span> <span class="n">infile</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">source</span><span class="p">[</span><span class="n">len</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">GLchar</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">source</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span>
</span><span class='line'><span class="n">LoadShaders</span><span class="p">(</span> <span class="n">ShaderInfo</span><span class="o">*</span> <span class="n">shaders</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">shaders</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLuint</span> <span class="n">program</span> <span class="o">=</span> <span class="n">glCreateProgram</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ShaderInfo</span><span class="o">*</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">shaders</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">GL_NONE</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">GLuint</span> <span class="n">shader</span> <span class="o">=</span> <span class="n">glCreateShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="o">=</span> <span class="n">shader</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">const</span> <span class="n">GLchar</span><span class="o">*</span> <span class="n">source</span> <span class="o">=</span> <span class="n">ReadShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">filename</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">source</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">shaders</span><span class="p">;</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">GL_NONE</span><span class="p">;</span> <span class="o">++</span><span class="n">entry</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">glDeleteShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>                <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glShaderSource</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">source</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">source</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glCompileShader</span><span class="p">(</span> <span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">GLint</span> <span class="n">compiled</span><span class="p">;</span>
</span><span class='line'>        <span class="n">glGetShaderiv</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="n">GL_COMPILE_STATUS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">compiled</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">compiled</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>            <span class="n">GLsizei</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>            <span class="n">glGetShaderiv</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="n">GL_INFO_LOG_LENGTH</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">GLchar</span><span class="o">*</span> <span class="n">log</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>            <span class="n">glGetShaderInfoLog</span><span class="p">(</span> <span class="n">shader</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">log</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Shader compilation failed: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">log</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>            <span class="k">delete</span> <span class="p">[]</span> <span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* DEBUG */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">glAttachShader</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">++</span><span class="n">entry</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef GL_VERSION_4_1</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">GLEW_VERSION_4_1</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// glProgramParameteri( program, GL_PROGRAM_SEPARABLE, GL_TRUE );</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* GL_VERSION_4_1 */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>    <span class="n">glLinkProgram</span><span class="p">(</span> <span class="n">program</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">GLint</span> <span class="n">linked</span><span class="p">;</span>
</span><span class='line'>    <span class="n">glGetProgramiv</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">GL_LINK_STATUS</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">linked</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">linked</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#ifdef DEBUG</span>
</span><span class='line'>        <span class="n">GLsizei</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>        <span class="n">glGetProgramiv</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">GL_INFO_LOG_LENGTH</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">GLchar</span><span class="o">*</span> <span class="n">log</span> <span class="o">=</span> <span class="k">new</span> <span class="n">GLchar</span><span class="p">[</span><span class="n">len</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="n">glGetProgramInfoLog</span><span class="p">(</span> <span class="n">program</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">len</span><span class="p">,</span> <span class="n">log</span> <span class="p">);</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Shader linking failed: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">log</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">delete</span> <span class="p">[]</span> <span class="n">log</span><span class="p">;</span>
</span><span class='line'><span class="cp">#endif </span><span class="cm">/* DEBUG */</span><span class="cp"></span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">shaders</span><span class="p">;</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">!=</span> <span class="n">GL_NONE</span><span class="p">;</span> <span class="o">++</span><span class="n">entry</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">glDeleteShader</span><span class="p">(</span> <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="p">);</span>
</span><span class='line'>            <span class="n">entry</span><span class="o">-&gt;</span><span class="n">shader</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __cplusplus</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>LoadShaders头文件 cpp (LoadShaders.h)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/LoadShaders.h'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifndef __LOAD_SHADERS_H__</span>
</span><span class='line'><span class="cp">#define __LOAD_SHADERS_H__</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;OpenGL/gl3.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#endif  </span><span class="c1">// __cplusplus</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  LoadShaders() takes an array of ShaderFile structures, each of which</span>
</span><span class='line'><span class="c1">//    contains the type of the shader, and a pointer a C-style character</span>
</span><span class='line'><span class="c1">//    string (i.e., a NULL-terminated array of characters) containing the</span>
</span><span class='line'><span class="c1">//    entire shader source.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  The array of structures is terminated by a final Shader with the</span>
</span><span class='line'><span class="c1">//    &quot;type&quot; field set to GL_NONE.</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//  LoadShaders() returns the shader program value (as returned by</span>
</span><span class='line'><span class="c1">//    glCreateProgram()) on success, or zero on failure. </span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">GLenum</span>       <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">char</span><span class="o">*</span>  <span class="n">filename</span><span class="p">;</span>
</span><span class='line'>    <span class="n">GLuint</span>       <span class="n">shader</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">ShaderInfo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">GLuint</span> <span class="n">LoadShaders</span><span class="p">(</span> <span class="n">ShaderInfo</span><span class="o">*</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//----------------------------------------------------------------------------</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#ifdef __cplusplus</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __cplusplus</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#endif </span><span class="c1">// __LOAD_SHADERS_H__</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>simple.vert cpp (simple.vert)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/simple.vert'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#version 410 core</span>
</span><span class='line'>
</span><span class='line'><span class="n">layout</span><span class="p">(</span><span class="n">location</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">in</span> <span class="n">vec4</span> <span class="n">vPosition</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">gl_Position</span> <span class="o">=</span> <span class="n">vPosition</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>simple.frag cpp (simple.frag)</span> <a href='http://www.markzhang.cn/downloads/code/HelloGL/simple.frag'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#version 410 core</span>
</span><span class='line'>
</span><span class='line'><span class="n">out</span> <span class="n">vec4</span> <span class="n">fColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="n">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">fColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[伟力v911-2 心得体会]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/02/v911-2-tips/"/>
    <updated>2014-01-02T20:56:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/02/v911-2-tips</id>
    <content type="html"><![CDATA[<p>伟力v911-2是一款很不错的入门4通航模。说不错，主要是它有以下的优点：</p>

<ul>
<li>便宜，两百块不到搞定  :)</li>
<li>耐炸，主要是飞机自重小。相比外观很漂亮，带什么合金外壳，还带闪灯的那种，增加了自重，所以电机相对要大功率的，还要增加电池容量。此外虽然机身有合金外壳，但是主轴、尾部没有啊，所以掉下来这些部分就很容易挂掉。</li>
<li>体积小，可以在室内飞行，不用专门到户外去找飞场。</li>
<li>整机只有30个零件，维修方便</li>
</ul>


<!-- more -->


<p>应该说这种结构简单，零件少容易拆解的飞机，可以方便的让我们了解直升机的一些基本原理。但是理论知识是一方面，真的摔坏了开始动手修理了，那就是另外一个问题了，有很多实际操作上的经验。</p>

<p>网上都说尾电机是第一个容易挂的，很奇怪我的尾电机到现在还算“工作正常”。有的时候会发现不转，但概率很小。现在尾电机的主要问题就是有一些异响，但鉴于飞机锁尾、自旋都正常，就懒得去折腾它了。</p>

<p>我的感受是，主旋翼容易挂。“挂”并不意味着一定是断掉了或是变形了，由于在炸机的时候主旋翼多多少少都会有一些损伤，所以炸多了就会发现飞机有一些异常情况，比如有异响，飞机震动的厉害等。这个时候就有可能是：</p>

<ul>
<li>主旋翼变形了，虽然看起来好像是好的。</li>
<li>主旋翼磨损之后，两片桨可能重量不一致了，重心不对称了。</li>
</ul>


<p>所以，如果怀疑是主旋翼的问题，直接换一对上去试了再说。平常买配件的时候可以一次多买几对，反正五块钱一对。</p>

<p>换主旋翼的时候，有一个问题，就是要重新安装那三个球头锁扣。我换了N次之后，发现有这么几个问题：</p>

<ul>
<li>这三个锁扣都是塑料的，而且很软，而安装的时候又需要用力按，所以一不小心就会变形。</li>
<li>一旦变形，特别是和桨连接的（中间那个）那个变形的话，会导致飞机向左或向右偏。因为变形之后，舵机拉动旋翼左右倾斜从而左右侧飞的时候，这个变形的锁扣会导致旋翼左右倾斜不顺畅。可以用手捏着平衡杆的一头，上下摇动，如果有阻滞感，那就是锁扣固定的不太好。正常情况下，平衡杆上下摇动是非常顺畅的。</li>
</ul>


<p>所以，换这三个球头锁扣的时候，我是这样的：</p>

<ol>
<li>先连接平衡杆</li>
<li>另一头接好要接到桨上去的那个锁扣，然后将这个锁扣竖着对准桨的连接点按上去</li>
<li>摇动一下平衡杆，让中间这个锁扣横过来，自然就扣住了桨。不要去尝试横着强行将这个锁扣按到桨上去，这样最容易变形</li>
<li>连接好最后一个挂在十字盘上的锁扣</li>
</ol>


<p>如果原来十字盘上的锁扣是扣着的，那么先拆下这个，然后再从第一步开始。我的经验是，当平衡杆和十字盘的锁扣都是扣着的时候，想尝试去安装中间那个锁扣（就是扣到桨上的那个），那是很困难的。因为这个时候这个锁扣只有横着才能扣上去，而想要横着扣上去那是相当的麻烦，很容易变形。要让这个锁扣竖着套上桨，然后动一下平衡杆，它就横过来了，很方便而且不会变形。</p>

<p>其他还有一些体会，网上都有一些文章，就不说了。比如连接舵机摇臂和十字盘的连杆，是有螺纹的，可以顺时针、逆时针旋转，从而加长或缩短连杆的长度，从而影响舵量。其实我觉得这个完全可以用遥控器上的微调来做到，没有必要大动干戈拆机去调这个连杆。</p>

<p><img src="http://www.markzhang.cn/downloads/image/v911.jpg" alt="v911-2" /></p>

<p>零件：</p>

<p><img src="http://www.markzhang.cn/downloads/image/v911-parts.jpg" alt="v911-2 零件图" /></p>

<p>炸机：</p>

<p><img src="http://www.markzhang.cn/downloads/image/v911-zha.jpg" alt="v911-2 炸机图" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress - 有条件的为文章添加转载声明]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/27/add-origin-statement-conditionally/"/>
    <updated>2013-12-27T15:33:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/27/add-origin-statement-conditionally</id>
    <content type="html"><![CDATA[<p>对于原创的文章，我在Octopress的post模板文件中，加入了一段转载声明。但对于一些好的文章，经常也会忍不住想要转载。所以，对于转载的文章，还出现这么一个转载声明就是打自己耳光了。很显然，要做个小手脚，对于转载的文章，去掉这个转载声明。有意思的是，在这个过程中，我居然发现 <code>liquid</code> 语法中没有 <code>逻辑非</code> ?!</p>

<!-- more -->


<p>模板文件的改动非常简单：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/source/_layouts/post.html b/source/_layouts/post.html</span>
</span><span class='line'><span class="gh">index 5d83b4d201f6..12d6466734ec 100644</span>
</span><span class='line'><span class="gd">--- a/source/_layouts/post.html</span>
</span><span class='line'><span class="gi">+++ b/source/_layouts/post.html</span>
</span><span class='line'><span class="gu">@@ -7,11 +7,14 @@ single: true</span>
</span><span class='line'> &lt;article class=&quot;hentry&quot; role=&quot;article&quot;&gt;
</span><span class='line'>   {% include article.html %}
</span><span class='line'>   &lt;footer&gt;
</span><span class='line'><span class="gi">+    {% if page.categories contains &quot;reprints&quot; %}</span>
</span><span class='line'><span class="gi">+    {% else %}</span>
</span><span class='line'>     &lt;section style=&quot;margin-top:15px;background:none repeat scroll 0pt 0pt rgb(220,220,220);padding:0.4em 0.8em&quot;&gt;
</span><span class='line'>       &lt;strong&gt;版权所有 &amp;copy;{{ site.time | date: &#39;%Y&#39; }} 转载本站文章请注明： &lt;/strong&gt;转载自 http://markzhang.cn&lt;br&gt;
</span><span class='line'> 原文链接: http://www.markzhang.cn{{ page.url }}&lt;br&gt;
</span><span class='line'> 您可以随意地转载本站的文章，但是必须在醒目位置注明来源及本站链接，不可以将本站文章商业化使用，或者修改、转换或者以本作品为基础进行创作。
</span><span class='line'>     &lt;/section&gt;
</span><span class='line'><span class="gi">+    {% endif %}</span>
</span><span class='line'>
</span><span class='line'>     &lt;p class=&quot;meta&quot;&gt;
</span><span class='line'>       {% include post/author.html %}
</span></code></pre></td></tr></table></div></figure>


<p>所以，大体上是这样：</p>

<ol>
<li>代码检查当前的文章是否属于 <code>reprints</code> 这个category，如果是的话，就不会加入转载声明那一段文字。</li>
<li>由于Octopress中一篇文章可以属于多个category，所以，新增 <code>reprints</code> 这么一个category不会带来什么影响，反而还可以让我们通过这个category快速的浏览所有我们转载的文章。</li>
<li>有意思的就是，正如前面所说，<code>liquid</code> 语法中没有 <code>逻辑非</code>，所以我在StackOverflow上找到了大家一般是这么做的：if后面直接接else. 相当的ugly，但是it works!</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X 如何截屏]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot/"/>
    <updated>2013-12-25T21:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot</id>
    <content type="html"><![CDATA[<p><em>文章是从网上找来的，但是忘记当初的网址了，所以没写上转载的地址。如果您发现这是您的原创，请告知，我会加上转载信息，谢谢。</em></p>

<p>在Mac OS X下有很强大的截屏功能，它不仅仅是对屏幕的全屏COPY，而是包括很多细节在里面，就从这点来看，已经比过所有版本的Windows了。</p>

<p>下面我来向大家详细介绍一下： 　　</p>

<!-- more -->


<p>对全屏的截图我们可以通过按 苹果键（花键）+ Shift键 + 3来执行，之后伴随着清脆的一声提示音后，在桌面上就会生成一个图片文件，这就是刚刚截屏的图片了，默认文件类型是PNG的。</p>

<p>自定义截屏是很方便的一个功能，是可以通过按 苹果键（花键）+ Shift键 + 4来执行，当执行组合按键之后鼠标指针的光标会变成十字，现在你就可以画出你想要截取屏幕的范围了，画好后截出的图片也会放在桌面上。</p>

<p>另外，如果在按 苹果键（花键）+ Shift键 + 4后按下 空格键，鼠标指针就会变成一个小照相机，这时是截取对象方式的截屏，把小照相机放在你想截图的窗口上按鼠标左键后就执行了对该窗口的截屏，很方便吧，</p>

<p>还有一个用法就是苹果键（花键）+Shift键再 + Ctrl键 + 4，这样截出的文件就放入系统的剪贴板了，不会生成文件出来，在做文档时直接粘贴就很方便了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Defeating the Hackers]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/17/defeating-the-hackers/"/>
    <updated>2013-12-17T14:06:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/17/defeating-the-hackers</id>
    <content type="html"><![CDATA[<p>Defeating the Hackers是BBC拍摄的一部纪录片。本片主要描述了目前生活中，特别是网络中的各种安全问题（窃取隐私，盗取帐号，删除资料，控制设备。。。），然后引申出了计算机技术中的一些安全防范技术和手段，是相当通俗易懂的科普类纪录片。</p>

<p><a href="http://www.youtube.com/watch?v=_4NrrKTYmBI">http://www.youtube.com/watch?v=_4NrrKTYmBI</a></p>

<!-- more -->


<p>片子中依次讲到了这么一些东西：</p>

<h2>社交黑客</h2>

<p>简单来说，就是利用搜索引擎，搜索你论坛的用户名、微博帐号、Apple ID&hellip; 从而得到更多的目标的相关信息，比如生日、喜好、邮箱、朋友名字、经常在哪里活动等等。然后就可以利用安保问题来重置你的账户密码。</p>

<p>我见过更加暴力的，直接HACK你的邮箱，得到你的EMail，里面很有可能就会包含你在各大网站、论坛的注册邮件，从而进一步HACK掉你更多的帐户。而且，现在很多的网站都提供利用EMail找回密码的功能，所以邮箱一旦失守，那后果将非常严重。</p>

<h2>RSA 公钥/私钥</h2>

<p>这是现在使用非常普遍和广泛的加密算法。从银行、加密网页、SSH等无处不在。但是说起来它的基础原理却非常简单。就是一个有趣的数学现象（我不知道这个是否被证明了，如果证明了那就应该是定理了）：<code>semi-prime</code>。当两个质数相乘，得到的就是一个 <code>semi-prime</code> 。<code>semi-prime</code> 和只能被1和自己整除的质数相比，只能被四个数整除：1、自己和形成该semi-prime的两个质数。</p>

<p>所以这就变的非常的有意思了。我们可以将两个巨大无比的质数相乘，得到一个更巨大无比的 <code>semi-prime</code> ，然后将这个 <code>semi-prime</code> 作为公钥分发出去，而私钥就是形成该 <code>semi-prime</code> 的两个质数。用脚趾头想都能知道，生成这个巨大无比的 <code>semi-prime</code> 很容易，但是如果给定一个巨大无比的 <code>semi-prime</code> ，要找出形成该 <code>semi-prime</code> 的两个质数，那则是非常困难的事情。</p>

<p>影片中展示了一个打印出来需要上千页 A4 纸的一个 <code>semi-prime</code>，说如果利用现在的计算机要破解该 <code>semi-prime</code>，则需要上百万年的时间&hellip;</p>

<h2>量子计算机 &ndash; RSA的克星</h2>

<p>有关量子力学，我只听说过一件事情：薛定谔的猫。引用一下百度百科上的内容：</p>

<blockquote><p>处于所谓“叠加态”的微观粒子之状态是不确定的，例如：电子可以几乎同时位于几个不同的地点，直到被观察测量（观测）时，才在某处出现。这种事如果发生在宏观世界的日常生活中，就好比：我在家中何处是不确定的，你看我一眼，我就突然现身于某处——客厅、餐厅、厨房、书房或卧室都有可能，而在你看我之前，我像云雾般隐身在家中，穿墙透壁到处游荡。这种“魔术”别说常人认为荒谬，物理学家如薛定谔也想不通。于是薛定谔就在1935年编出了这个佯谬，以引起注意。薛定谔想要借此阐述的物理问题是：宏观世界是否也遵从适用于微观尺度的量子叠加原理。“薛定谔的猫”佯谬巧妙地把微观放射源和宏观的猫联系起来，旨在否定宏观世界存在量子叠加态。是薛定谔试图证明量子力学在宏观条件下的不完备性而提出的一个思想实验。</p>

<p>把一只猫放进一个不透明的盒子里，然后把这个盒子连接到一个包含一个放射性原子核和一个装有有毒气体的容器的实验装置。设想这个放射性原子核在一个小时内有50%的可能性发生衰变。如果发生衰变，它将会发射出一个粒子，而发射出的这个粒子将会触发这个实验装置，打开装有毒气的容器，从而杀死这只猫。根据量子力学，未进行观察时，这个原子核处于已衰变和未衰变的叠加态，但是，如果在一个小时后把盒子打开，实验者只能看到“衰变的原子核和死猫”或者“未衰变的原子核和活猫”两种情况。薛定谔在1935年发表了一篇论文，题为《量子力学的现状》，在论文的第5节，薛定谔描述了那个常被视为恶梦的猫实验：哥本哈根学派说，没有测量之前，一个粒子的状态模糊不清，处于各种可能性的混合叠加。比如一个放射性原子，它何时衰变是完全概率性的。只要没有观察，它便处于衰变/不衰变的叠加状态中，只有确实地测量了，它才会随机地选择一种状态而出现。那么让我们把这个原子放在一个不透明的箱子中让它保持这种叠加状态。薛定谔想象了一种结构巧妙的精密装置，每当原子衰变而放出一个中子，它就激发一连串连锁反应，最终结果是打破箱子里的一个毒气瓶，而同时在箱子里的还有一只可怜的猫。事情很明显：如果原子衰变了，那么毒气瓶就被打破，猫就被毒死。要是原子没有衰变，那么猫就好好地活着。</p>

<p>这个理想实验的巧妙之处，在于通过“检测器－原子－毒药瓶”这条因果链，似乎将铀原子的“衰变－未衰变叠加态”与猫的“死－活叠加态”联系在一起，使量子力学的微观不确定性变为宏观不确定性；微观的混沌变为宏观的荒谬——猫要么死了，要么活着，两者必居其一，不可能同时既死又活！难怪英国著名科学家霍金听到薛定谔猫佯谬时说：“我去拿枪来把猫打死！”</p></blockquote>

<p>所以现在的科学家在尝试制作量子计算机，我不明白量子力学，我的理解是：由于微观粒子处在不确定的状态，只有被观测时才有一个你看到的确定状态，所以量子计算机非常适合做海量并行的工作。</p>

<p>片子中的科学家在尝试制造一台量子计算机，计算出 <code>15 = 3 x 5</code>。所以利用量子计算机可以同时处理海量并行计算的特点，求解一个大 <code>semi-prime</code> 就将变的不再不可行，所以说量子计算机的出现，会导致 RSA 出现挑战。</p>

<h2>利用量子力学的新的认证机制</h2>

<p>这是一个很有趣的新的认证机制。拿经典的Alice、Bob和Eve来举例。</p>

<p>Alice想给Bob发送数据。Alice使用一些光子作为媒介，让这些光子通过她事先设定好的一组光栅，这些光栅可以是两种，一种是横或竖的，另外一种是四十五度角的。当然光子通过这些光栅，就会变成横或竖的，或者是四十五度角的。所以你可以定义横或竖的光子是1，四十五度角的是0。</p>

<p>所以当Bob收到这一组光子的时候，Bob也必须利用一组光栅来观测这些光子。由于Bob不知道每个光子Alice的光栅的设置，所以Bob就随机选用这两种光栅来观测这一组光子，同时将观测的结果发回给Alice。Alice会告诉Bob，哪些光子他观测的是错误的，从而Alice和Bob就知道哪些光子需要从这组光子中剔除出去。他们可以使用剩下的，他们两人都观测到同一结果的光子来做为一个密钥，从而加密后续的真正的数据的传输。</p>

<p>此时如果Eve想窃听Alice和Bob之间的数据，她就面临一个问题：该如何选用正确的光栅来观测这组光子。由于量子力学中，粒子本身处于不确定状态，而一旦你选用了一种观测手段之后，粒子就会发生改变。所以Eve在不知道正确的光栅序列（也就是正确的观测方法）之前，是无法得到正确的光子数据的。这就避免了数据在传输的过程中被第三方监听。</p>

<p>而如果Eve在观测了这组光子之后，再把数据发给Bob或是Alice，他们也可以判断出该组光子是否被人监听过，因为光子一旦被Eve使用了不正确的观测方法观测过之后，就已经发生了改变。</p>

<p>Awesome, Hah?</p>

<p>但是需要明白的是，这种机制无法防范 “中间人” 攻击。也就是面对Alice，Eve伪装成Bob，而面对Bob，Eve伪装成Alice。这种机制只能做到：</p>

<ol>
<li><p>让Alice和Bob能知道他们之间的数据是否被人窃听过。</p></li>
<li><p>在Alice和Bob两人之间，直接流转的数据是安全的。</p></li>
</ol>


<h2>密码之外的新的安全认证手段</h2>

<p>片子的最后，谈到了除了密码之外的新的安全认证手段。谈到这个，人们第一反应就是指纹、虹膜这些。但是指纹、虹膜也是可以复制的，所以也并不安全。</p>

<p>所以有一些科学家现在在利用更 Unique 的一些东西作为安全认证的载体：比如片子中举的例子：<code>muscle memory</code></p>

<p>片子中举了一个例子很有意思。科学家们做了一个音乐游戏，类似于跳舞机，只不过这是弹吉他。屏幕上掉下来不同的球，等球到屏幕底部的一个框中的时候，就需要弹奏吉他上不同的部位。通过反复练习，让你的肌肉熟悉这种模式和感觉，同时计算机也会记录下你的这种 Unique 的 <code>muscle memory</code>。</p>

<p>然后，每次需要开机登录、认证的时候，计算机会启动一个特别设计的弹吉他游戏，你需要再次弹奏一次（只不过这次会简短很多），此时计算机就可以跟你之前弹奏的数据进行比较，从而对使用者的身份做认证。</p>

<p>老实说，不管使用什么方式，我只希望这些东西尽快的实现并进入实用阶段，我实在厌烦了密码这个破玩意，不安全而且还需要你记忆他们。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chnroutes的使用（Mac OS X Mavericks）]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/04/chnroutes-on-mac/"/>
    <updated>2013-12-04T14:00:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/04/chnroutes-on-mac</id>
    <content type="html"><![CDATA[<p>翻墙是我朝人民的普遍需求。现在翻墙的普遍做法是搞一个VPN。买一个也好，找免费的也好。有了VPN之后面临的问题就是当VPN连接之后，所有的网络数据都会走VPN，这显然不是最高效的做法，对于一些没有被墙的网站或是应用，没有必要再走VPN，这样反而更慢。为此，<code>chnroutes</code>应蕴而生了。</p>

<!-- more -->


<p><code>chnroutes</code>就是一份路由表配置，它收集了绝大部分国内没有被墙的网站/IP，然后将他们加到路由表中，设定访问这些IP地址使用原来的网关（非VPN）。这样，在路由表中的IP地址就会走原来的网关，剩下来的就都走VPN了。</p>

<p>在<code>https://code.google.com/p/chnroutes/</code>上下载<code>chnroutes.py</code>，在Mac OS X上运行<code>./chnroutes.py -p mac</code>就得到两个文件：<code>ip-up</code> 和 <code>ip-down</code>。</p>

<p>打开文件一看就明白，没比这更简单的脚本了。<code>ip-up</code>就是使用netstat等命令取到非VPN的网关的IP地址，然后就调用<code>route</code>命令设置一大堆的路由信息。</p>

<p>这里要注意的是，在我的Macbook上（Mac OS X Mavericks），<code>ip-up</code>取到的所谓<code>OLDGW</code>是不对的。<code>ip-up</code>试图去取非VPN的那个网关IP地址，但其实取到的是我所有的网关，也就是包含了VPN的和本地的两个网关IP地址。所以我注释掉了<code>ip-up</code>中获取<code>OLDGW</code>的一行，直接将<code>OLDGW</code>设置成了我本地的网关IP地址。</p>

<p>这样，连接上VPN，然后运行<code>ip-up</code>就可以舒服的上网了。运行<code>ip-down</code>就可以删除掉<code>ip-up</code>添加的路由信息。</p>

<p>为了验证<code>ip-up</code>的确做了我们所想的事情，可以用命令<code>traceroute</code>来验证，比如：<code>traceroute www.youku.com</code>，就可以看到数据是从本地网关走的，而如果是：<code>traceroute www.youtube.com</code>，就可以看到数据是从VPN走的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Device tree: interrupts的解释]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/27/dt-interrupts/"/>
    <updated>2013-11-27T20:41:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/27/dt-interrupts</id>
    <content type="html"><![CDATA[<p>Linux kernel现在使用Device tree（DT）来描述硬件设备。既然是描述硬件设备，那自然就需要对硬件充分了解才能理解DT。Interrupts就是一个例子。</p>

<p>一般来说，DT中的 <code>interrupts</code> （本文不描述interrupt controller）看起来是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">pmu</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">compatible</span> <span class="o">=</span> <span class="s">&quot;arm,cortex-a9-pmu&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">interrupts</span> <span class="o">=</span> <span class="o">&lt;</span><span class="mi">0</span> <span class="mi">144</span> <span class="mh">0x04</span>
</span><span class='line'>            <span class="mi">0</span> <span class="mi">145</span> <span class="mh">0x04</span>
</span><span class='line'>            <span class="mi">0</span> <span class="mi">146</span> <span class="mh">0x04</span>
</span><span class='line'>            <span class="mi">0</span> <span class="mi">147</span> <span class="mh">0x04</span><span class="o">&gt;</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>可以看到 <code>interrupts</code> 有三个member，对于这三个member，Linux kernel的文档是这样说的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">The</span> <span class="mi">1</span><span class="n">st</span> <span class="n">cell</span> <span class="n">is</span> <span class="n">the</span> <span class="n">interrupt</span> <span class="n">type</span><span class="p">;</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">SPI</span> <span class="n">interrupts</span><span class="p">,</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">PPI</span>
</span><span class='line'><span class="n">interrupts</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="mi">2</span><span class="n">nd</span> <span class="n">cell</span> <span class="n">contains</span> <span class="n">the</span> <span class="n">interrupt</span> <span class="n">number</span> <span class="k">for</span> <span class="n">the</span> <span class="n">interrupt</span> <span class="n">type</span><span class="p">.</span>
</span><span class='line'><span class="n">SPI</span> <span class="n">interrupts</span> <span class="n">are</span> <span class="n">in</span> <span class="n">the</span> <span class="n">range</span> <span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">987</span><span class="p">].</span>  <span class="n">PPI</span> <span class="n">interrupts</span> <span class="n">are</span> <span class="n">in</span> <span class="n">the</span>
</span><span class='line'><span class="n">range</span> <span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">15</span><span class="p">].</span>
</span><span class='line'>
</span><span class='line'><span class="n">The</span> <span class="mi">3</span><span class="n">rd</span> <span class="n">cell</span> <span class="n">is</span> <span class="n">the</span> <span class="n">flags</span><span class="p">,</span> <span class="n">encoded</span> <span class="n">as</span> <span class="n">follows</span><span class="o">:</span>
</span><span class='line'>  <span class="n">bits</span><span class="p">[</span><span class="mi">3</span><span class="o">:</span><span class="mi">0</span><span class="p">]</span> <span class="n">trigger</span> <span class="n">type</span> <span class="n">and</span> <span class="n">level</span> <span class="n">flags</span><span class="p">.</span>
</span><span class='line'>      <span class="mi">1</span> <span class="o">=</span> <span class="n">low</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">high</span> <span class="n">edge</span> <span class="n">triggered</span>
</span><span class='line'>      <span class="mi">2</span> <span class="o">=</span> <span class="n">high</span><span class="o">-</span><span class="n">to</span><span class="o">-</span><span class="n">low</span> <span class="n">edge</span> <span class="n">triggered</span>
</span><span class='line'>      <span class="mi">4</span> <span class="o">=</span> <span class="n">active</span> <span class="n">high</span> <span class="n">level</span><span class="o">-</span><span class="n">sensitive</span>
</span><span class='line'>      <span class="mi">8</span> <span class="o">=</span> <span class="n">active</span> <span class="n">low</span> <span class="n">level</span><span class="o">-</span><span class="n">sensitive</span>
</span><span class='line'>  <span class="n">bits</span><span class="p">[</span><span class="mi">15</span><span class="o">:</span><span class="mi">8</span><span class="p">]</span> <span class="n">PPI</span> <span class="n">interrupt</span> <span class="n">cpu</span> <span class="n">mask</span><span class="p">.</span>  <span class="n">Each</span> <span class="n">bit</span> <span class="n">corresponds</span> <span class="n">to</span> <span class="n">each</span> <span class="n">of</span>
</span><span class='line'>  <span class="n">the</span> <span class="mi">8</span> <span class="n">possible</span> <span class="n">cpus</span> <span class="n">attached</span> <span class="n">to</span> <span class="n">the</span> <span class="n">GIC</span><span class="p">.</span>  <span class="n">A</span> <span class="n">bit</span> <span class="n">set</span> <span class="n">to</span> <span class="sc">&#39;1&#39;</span> <span class="n">indicated</span>
</span><span class='line'>  <span class="n">the</span> <span class="n">interrupt</span> <span class="n">is</span> <span class="n">wired</span> <span class="n">to</span> <span class="n">that</span> <span class="n">CPU</span><span class="p">.</span>  <span class="n">Only</span> <span class="n">valid</span> <span class="k">for</span> <span class="n">PPI</span> <span class="n">interrupts</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>来自：<code>Documentation/devicetree/bindings/arm/gic.txt</code></em></p>

<p>如果不了解ARM GIC的话，其实也看不懂上面的描述，所以这里解释一下：</p>

<ol>
<li>第一个member表示该 <code>interrupt</code> 是 <code>SPI</code> 还是 <code>PPI</code>。<code>SPI</code> 和 <code>PPI</code> 的解释如下，来自ARM的文档：</li>
</ol>


<blockquote><p>Private Peripheral Interrupts</p>

<p>A PPI is an interrupt generated by a peripheral that is specific to a single processor. There are seven PPIs for each CPU interface.</p></blockquote>

<p>这是ARM A15的 <code>PPI</code> 的描述，如果是A9的话，每个CPU interface是5个 <code>PPI</code>。</p>

<blockquote><p>Shared Peripheral Interrupts</p>

<p>An interrupt generated by a peripheral that the Interrupt Controller can route to any, or all, processor interfaces.</p>

<p>SPIs are triggered by events generated on associated interrupt input lines. The GIC can support up to 224 SPIs corresponding to the external IRQS[223:0] signal. The number of SPIs available depends on the implemented configuration of the Cortex-A15 MPCore processor. The permitted values are 0, 32, 64, 96, 128, 160, 192, or 224. SPIs start at ID32. The SPIs can be configured to be edge-triggered or active-HIGH level-sensitive.</p></blockquote>

<p>第一句话就可以看出和 <code>PPI</code> 的区别。<code>SPI</code> 的数量可以配置，如32，64&hellip;最大支持224，而且SPI的编号从32开始。至于最后提到的 <code>edge-triggered</code>，<code>active-HIGH level-sensitive</code> 正好就是 <code>interrupts</code> 第三个member。</p>

<p>所以，在一颗SoC中，绝大部分的中断都是 <code>SPI</code>。</p>

<p>事实上，ARM还有一种中断：<code>SGI</code>，也就是软中断：</p>

<blockquote><p>Software Generated Interrupt (SGI)</p>

<p>Generated by writing to the Software Generated Interrupt Register (ICDSGIR).</p>

<p>A maximum of 16 SGIs can be generated for each Cortex-A9 processor interface.</p></blockquote>

<p>但是Device tree是用来描述硬件设备的，所以Linux kernel中 <code>interrupts</code> 的类型没有定义 <code>SGI</code>。</p>

<ol>
<li><p>第二个member就是具体的中断号了。查阅SoC的手册就可以得到。</p></li>
<li><p>第三个member指的是中断的触发方式，每个SoC是不同的，查阅SoC的手册就可以知道了。这里kernel的文档解释的还是比较清楚的，就是一个16bit的数，0-3, 8-15 bit分别做了定义。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git常见命令和配置]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/20/git-tips/"/>
    <updated>2013-11-20T21:01:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/20/git-tips</id>
    <content type="html"><![CDATA[<h2>常用配置</h2>

<figure class='code'><figcaption><span>git常用配置</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='cfg'><span class='line'><span class="k">[color]</span>
</span><span class='line'>        <span class="na">ui</span> <span class="o">=</span> <span class="s">auto</span>
</span><span class='line'><span class="k">[user]</span>
</span><span class='line'>        <span class="na">name</span> <span class="o">=</span> <span class="s">Mark Zhang</span>
</span><span class='line'><span class="s">        email = xxxx@xxxx.xxx</span>
</span><span class='line'><span class="k">[core]</span>
</span><span class='line'>        <span class="na">editor</span> <span class="o">=</span> <span class="s">vim</span>
</span><span class='line'><span class="s">        abbrev = 12</span>
</span><span class='line'><span class="s">        pager = less -X -F</span>
</span><span class='line'><span class="k">[diff]</span>
</span><span class='line'>        <span class="na">tool</span> <span class="o">=</span> <span class="s">vimdiff</span>
</span><span class='line'><span class="s">        renames = true</span>
</span><span class='line'><span class="k">[difftool]</span>
</span><span class='line'>        <span class="na">prompt</span> <span class="o">=</span> <span class="s">No</span>
</span><span class='line'><span class="k">[sendemail]</span>
</span><span class='line'>        <span class="na">chainreplyto</span> <span class="o">=</span> <span class="s">false</span>
</span><span class='line'><span class="s">        smtpserver = xxxxxxxx</span>
</span><span class='line'><span class="s">        smtpencryption = tls</span>
</span><span class='line'><span class="s">        from = Mark Zhang &lt;xxxx@xxx.xxx&gt;</span>
</span><span class='line'><span class="s">        envelopesender = auto</span>
</span><span class='line'><span class="k">[alias]</span>
</span><span class='line'>        <span class="na">s</span> <span class="o">=</span> <span class="s">status</span>
</span><span class='line'><span class="s">        cp = cherry-pick</span>
</span><span class='line'><span class="s">        ck = checkout</span>
</span><span class='line'><span class="s">        b = branch</span>
</span><span class='line'><span class="s">        lo = log --oneline</span>
</span><span class='line'><span class="s">        dt = difftool</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>常用命令</h2>

<ul>
<li><code>git remote add &lt;name&gt; &lt;url&gt;</code></li>
</ul>


<p>如果要添加本地的一个git repository的话，<url>填写成 <code>git repository的路径/.git</code> 即可。</p>

<ul>
<li><p><code>git fetch -p &lt;remote name, e.g: origin&gt;</code></p></li>
<li><p><code>git show &lt;commit id&gt;</code></p></li>
<li><p><code>git push origin HEAD:next</code></p></li>
</ul>


<p>Push本地HEAD commit对应的branch到名为 <code>origin</code> 的远端仓库的 <code>next</code> branch上。</p>

<ul>
<li><code>git push origin +HEAD:next / git push -f origin HEAD:next</code></li>
</ul>


<p>所谓的Force update，也就是用本地的commit历史覆盖远端的。</p>

<ul>
<li><code>git push origin :next</code></li>
</ul>


<p>删除远端仓库的 <code>next</code> branch。</p>

<ul>
<li><code>git push --tags</code></li>
</ul>


<p>Push本地的tag列表到远端。</p>

<ul>
<li><p><code>git format-patch -&lt;N&gt;</code></p></li>
<li><p><code>git format-patch &lt;commit id&gt;^..&lt;commit id&gt;</code></p></li>
</ul>


<p>这个命令可以用来为一个指定的commit生成patch。</p>

<ul>
<li><p><code>git format-patch --subject-prefix 'PATCH V2' --cover-letter</code></p></li>
<li><p><code>git send-email --to=XXX --to=XXX --cc=XXX *.patch</code></p></li>
<li><p><code>git send-email --no-signed-off-cc --to=XXX --to=XXX --cc=XXX *.patch</code></p></li>
<li><p><code>git rebase -i &lt;commit id&gt;</code></p></li>
<li><p><code>git checkout &lt;branch&gt; -- &lt;file path&gt;</code></p></li>
</ul>


<p>这个命令将指定branch中的指定文件checkout出来，更新当前working tree中的对应文件。</p>

<ul>
<li><code>git show &lt;branch&gt;:&lt;file path&gt; &gt;&amp; &lt;filename&gt;</code></li>
</ul>


<p>这个命令将指定branch中的指定文件checkout出来，并存到 <code>&lt;filename&gt;</code> 指定的路径上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linus说，请将这个配置加到你的.gitconfig]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/07/linus-git-config/"/>
    <updated>2013-11-07T18:18:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/07/linus-git-config</id>
    <content type="html"><![CDATA[<p>近日Linus说，请将 <code>git config core.abbrev 12</code> 加到你的git repository中。事实上，这个config很有意义，可以加到你的全局git config中：</p>

<!-- more -->


<p><code>git config --global core.abbrev 12</code>。</p>

<p>原因简单来说就是，git默认的7个字符的短HASH表示方法经常导致冲突，所以Linus建议改成12个字符。原文引用如下：</p>

<blockquote><p>Linus jumped in to say that he would like everybody to run this command in their repositories:</p>

<p>   git config core.abbrev 12</p>

<p>That causes git to abbreviate commit hashes to 12 characters. The default of seven characters is too small to prevent occasional hash collisions in the kernel; it was, he said, a big mistake made early in git&rsquo;s history. He also noted that he spends a lot of time fixing up hashes in patch, many of which are &ldquo;clearly bogus.&rdquo; Most of the problems, most likely, are caused by the rebasing of trees.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在博客内容中插入Liquid代码时的注意点]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/07/embed-liquid-codes-in-blog/"/>
    <updated>2013-11-07T09:44:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/07/embed-liquid-codes-in-blog</id>
    <content type="html"><![CDATA[<p>Octopress/Jekyll一个很好的功能就是可以非常方便的插入代码，深得码农的喜爱。不过这里有一个注意点就是，如果你插入的代码中含有Liquid代码，那很可能会导致编译出错，比如：</p>

<!-- more -->




<figure class='code'><figcaption><span>rake generate出错信息</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">## Generating Site with Jekyll</span>
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>Configuration from /home/markz/Projects/blog/_config.yml
</span><span class='line'>Building site: <span class="nb">source</span> -&gt; public
</span><span class='line'>Liquid Exception: <span class="k">if </span>tag was never closed in 2013-11-05-add-uyan-comment.markdown
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:88:in <span class="sb">`</span>assert_missing_delimitation!<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:49:in `parse&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/tag.rb:10:in <span class="sb">`</span>initialize<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/tags/if.rb:24:in `initialize&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:28:in <span class="sb">`</span>new<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/block.rb:28:in `parse&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/document.rb:5:in <span class="sb">`</span>initialize<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/template.rb:58:in `new&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/template.rb:58:in <span class="sb">`</span>parse<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/liquid-2.3.0/lib/liquid/template.rb:46:in `parse&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/convertible.rb:79:in <span class="sb">`</span>do_layout<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/work/markz/Projects/blog/plugins/post_filters.rb:167:in `do_layout&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/post.rb:195:in <span class="sb">`</span>render<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:200:in `block in render&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in <span class="sb">`</span>each<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:199:in `render&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/lib/jekyll/site.rb:41:in <span class="sb">`</span>process<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/lib/ruby/gems/1.9.1/gems/jekyll-0.12.0/bin/jekyll:264:in `&lt;top (required)&gt;&#39;</span>
</span><span class='line'>/home/markz/.rbenv/versions/1.9.3-p0/bin/jekyll:23:in <span class="sb">`</span>load<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">/home/markz/.rbenv/versions/1.9.3-p0/bin/jekyll:23:in `&lt;main&gt;&#39;</span>
</span><span class='line'>Build Failed
</span></code></pre></td></tr></table></div></figure>


<p>原因地球人都知道，就是博客中插入的代码含有Liquid的if标签。解决办法有两种：</p>

<ol>
<li><p>使用<code>{% include_code %}</code>。将代码存成一个文件，然后将其include到博客中来。</p></li>
<li><p>使用raw标签，将代码（包含三个backticks）使用<code>{% raw %}</code>，<code>{% endraw %}</code>包起来即可。</p></li>
</ol>


<p><strong>Note:</strong> 上文中要将raw和endraw打印出来需要将其转义，其他标签都可以用<code>raw/endraw</code>搞定，但是要转义他们本身，要这么写：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{{</span> <span class="s2">&quot;{% raw &quot;</span> <span class="o">}}</span>%<span class="o">}</span> <span class="o">{{</span> <span class="s2">&quot;{% endraw &quot;</span> <span class="o">}}</span>%<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Octopress中使用友言，替换Disqus]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/05/add-uyan-comment/"/>
    <updated>2013-11-05T21:56:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/05/add-uyan-comment</id>
    <content type="html"><![CDATA[<p>Disqus应该是国外做的一个评论系统，按现在时髦的话说，不太接中国的地气，所以考虑换一个评论系统。具体做起来非常的简单，Octopress就像一个模板系统，以前Java火热的时候用过Velocity，大体思路都是利用一些markdown的语法填在预先写好的模板文件中，然后解析器解释该文件，从而生成最终需要的东西。</p>

<p>在Octopress中，发表的博客文章使用的模板是<code>source/_layout/post.html</code>，打开之后搜索disqus就可以发现原来的disqus部分的代码。所以要将其替换成其他的评论系统就很直观了。这里我使用了友言，因为Google了一下貌似现在国内友言做的还不错。</p>

<p>总体来说就是三步：</p>

<!-- more -->


<ol>
<li>在<code>_config.yml</code>中添加一个配置项，比如<code>uyan_id: xxx</code></li>
<li>添加一个被include的文件，用来存放友言提供给我们的插入代码，比如：<code>source/_include/post/uyan_comments.html</code></li>
<li>修改<code>source/_layout/post.html</code>，将disqus的部分替换成使用友言。</li>
</ol>


<p>以下就是我的修改：</p>

<figure class='code'><figcaption><span>上述三点的改动 diff (uyan-comments-changes.diff)</span> <a href='http://www.markzhang.cn/downloads/code/uyan-comments-changes.diff'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gh">diff --git a/_config.yml b/_config.yml</span>
</span><span class='line'><span class="gh">index 6caabf1..98a32c8 100644</span>
</span><span class='line'><span class="gd">--- a/_config.yml</span>
</span><span class='line'><span class="gi">+++ b/_config.yml</span>
</span><span class='line'><span class="gu">@@ -93,6 +93,9 @@ delicious_count: 3</span>
</span><span class='line'> disqus_short_name:
</span><span class='line'> disqus_show_comment_count: false
</span><span class='line'>
</span><span class='line'><span class="gi">+# Uyan Comments</span>
</span><span class='line'><span class="gi">+uyan_id: &lt;填写你的友言的uid&gt;</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> # Google Analytics
</span><span class='line'> google_analytics_tracking_id:
</span><span class='line'>
</span><span class='line'><span class="gh">diff --git a/source/_includes/post/uyan_comments.html b/source/_includes/post/uyan_comments.html</span>
</span><span class='line'>new file mode 100644
</span><span class='line'><span class="gh">index 0000000..7e063c3</span>
</span><span class='line'><span class="gd">--- /dev/null</span>
</span><span class='line'><span class="gi">+++ b/source/_includes/post/uyan_comments.html</span>
</span><span class='line'><span class="gu">@@ -0,0 +1,4 @@</span>
</span><span class='line'><span class="gi">+&lt;!-- UY BEGIN --&gt;</span>
</span><span class='line'><span class="gi">+&lt;div id=&quot;uyan_frame&quot;&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="gi">+&lt;script type=&quot;text/javascript&quot; src=&quot;http://v2.uyan.cc/code/uyan.js?uid={{ site.uyan_id }}&quot;&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="gi">+&lt;!-- UY END --&gt;</span>
</span><span class='line'><span class="gh">diff --git a/source/_layouts/post.html b/source/_layouts/post.html</span>
</span><span class='line'><span class="gh">index da9e9c4..36bd433 100644</span>
</span><span class='line'><span class="gd">--- a/source/_layouts/post.html</span>
</span><span class='line'><span class="gi">+++ b/source/_layouts/post.html</span>
</span><span class='line'><span class="gu">@@ -25,10 +25,10 @@ single: true</span>
</span><span class='line'>     &lt;/p&gt;
</span><span class='line'>   &lt;/footer&gt;
</span><span class='line'> &lt;/article&gt;
</span><span class='line'><span class="gd">-{% if site.disqus_short_name and page.comments == true %}</span>
</span><span class='line'><span class="gi">+{% if site.uyan_id and page.comments == true %}</span>
</span><span class='line'>   &lt;section&gt;
</span><span class='line'>     &lt;h1&gt;Comments&lt;/h1&gt;
</span><span class='line'><span class="gd">-    &lt;div id=&quot;disqus_thread&quot; aria-live=&quot;polite&quot;&gt;{% include post/disqus_thread.html %}&lt;/div&gt;</span>
</span><span class='line'><span class="gi">+    {% include post/uyan_comments.html %}</span>
</span><span class='line'>   &lt;/section&gt;
</span><span class='line'> {% endif %}
</span><span class='line'> &lt;/div&gt;
</span></code></pre></td></tr></table></div></figure>


<p><strong>Note:</strong> 有一个注意点就是友言会采集当前域名作为评论来源的一个index，来归类存放你的留言。所以在<code>rake preview</code>的时候，是看不到友言的评论框的。只有将你的博客上传到了网络上之后，你才能看到。因为很多时候我们开发完了都会使用<code>rake preview</code>先在本地<code>http://localhost:4000</code>上看一下，所以这是看不到的，并不是代码有问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客 Code Names]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/04/blog-code-names/"/>
    <updated>2013-11-04T20:46:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/04/blog-code-names</id>
    <content type="html"><![CDATA[<p>跟老美共事发现它们很喜欢每件事情都起个Code Name，所以我也给我的博客每年都取一个Code Name。命名的逻辑跟Ubuntu一样，从2013年的H开始，每个Code Name都是两个单词且开头字母相同。如下：</p>

<!-- more -->


<p>2014 Imagine Illimitable</p>

<p>2013 Happy Hacking</p>
]]></content>
  </entry>
  
</feed>
