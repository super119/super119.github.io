<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Make Things Cool]]></title>
  <link href="http://markzhang.cn/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2016-01-07T11:07:00+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[为什么包含多句代码的宏要用do while包括起来？]]></title>
    <link href="http://markzhang.cn/blog/2016/01/07/kernel-do-while-macro/"/>
    <updated>2016-01-07T11:05:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/07/kernel-do-while-macro</id>
    <content type="html"><![CDATA[<p>为了看起来更清晰，这里用一个简单点的宏来演示：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define SAFE_DELETE(p) do{ delete p; p = NULL} while(0)</span>
</span></code></pre></td></tr></table></div></figure>


<p>假设这里去掉 <code>do...while(0)</code>,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define SAFE_DELETE(p) delete p; p = NULL;</span>
</span></code></pre></td></tr></table></div></figure>


<p>那么以下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">p</span><span class="p">)</span> <span class="n">SAFE_DELETE</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span>   <span class="p">...</span><span class="k">do</span> <span class="n">sth</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>就有两个问题，</p>

<ol>
<li><p>因为if分支后有两个语句，else分支没有对应的if，编译失败</p></li>
<li><p>假设没有else, SAFE_DELETE中的第二个语句无论if测试是否通过，会永远执行。</p></li>
</ol>


<p>你可能发现，为了避免这两个问题，我不一定要用这个令人费解的do&hellip;while,  我直接用{}括起来就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define SAFE_DELETE(p) { delete p; p = NULL;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>的确，这样的话上面的问题是不存在了，但是我想对于C++程序员来讲，在每个语句后面加分号是一种约定俗成的习惯，这样的话，以下代码:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">p</span><span class="p">)</span> <span class="n">SAFE_DELETE</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="k">else</span>   <span class="p">...</span><span class="k">do</span> <span class="n">sth</span><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>其else分支就无法通过编译了（原因同上），所以采用do&hellip;while(0)是做好的选择了。</p>

<p>也许你会说，我们代码的习惯是在每个判断后面加上{}, 就不会有这种问题了，也就不需要do&hellip;while了，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">if</span><span class="p">(...)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>诚然，这是一个好的，应该提倡的编程习惯，但一般这样的宏都是作为library的一部分出现的，而对于一个library的作者，他所要做的就是让其库具有通用性，强壮性，因此他不能有任何对库的使用者的假设，如其编码规范，技术水平等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[netstat -na输出中Recv-Q和Send-Q两项的值不为零需要注意程序是否有问题]]></title>
    <link href="http://markzhang.cn/blog/2016/01/07/recv-q-send-q/"/>
    <updated>2016-01-07T10:59:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/07/recv-q-send-q</id>
    <content type="html"><![CDATA[<p>Recv-Q：表示收到的数据中还有多少没有被进程取走（通过recv）</p>

<p>Send-Q：表示需要发送的数据还有多少没有被发出</p>

<p>所以，一般来说这两个值都是0，如果不为0且持续增长，那就表明程序出现了问题。</p>

<p>比如Recv-Q的数字持续增长，表示没有进程去取这些收到的数据。比如使用select+recv来收数据的时候，由于select有1024这个限制，所以如果socket的FD大于1024的时候，就会导致这个socket FD上的数据不会被select检测到从而导致recv不会被调用。</p>

<p>所以，通过netstat的这两个值就可以简单判断程序收不到包到底是包没到还是包没有被进程recv。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel suspend的逻辑]]></title>
    <link href="http://markzhang.cn/blog/2016/01/06/kernel-suspend-description/"/>
    <updated>2016-01-06T09:44:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/06/kernel-suspend-description</id>
    <content type="html"><![CDATA[<p>代码位于：power/suspend.c，从函数pm_suspend开始。</p>

<p>suspend的逻辑和driver相关的主要就是遍历所有device，并调用他们相关driver的suspend函数指针（包括该device的class，bus这些的suspend函数指针）。</p>

<!-- more -->


<p>至于device调用的先后次序是这样的：当我们执行device_add的时候，这些device会被加到一个dpm_list的list中，而且晚add的device会出现在list的靠前位置。也就是说，早add的device会晚一点被suspend，最后add的device会第一个被suspend。</p>

<p>resume的时候就正好反过来，最后add的device会第一个被resume。</p>

<p>而具体在suspend一个device的时候，会依次调用这些函数指针：device所属的power domain，device的type，device所属的class，device所属的bus。</p>

<p>在上述的逻辑之前，会有一个名为suspend_prepare的调用，在这里会freeze userspace（不schedule了就OK了），会freeze有freezable属性的workqueue。在上述逻辑之后，kernel就会转到arch层继续做suspend的动作。在这里就是每种arch，每种mach各不相同了。在这里一般就是针对具体的硬件，做state saving，clock gate，power gate，prepare cpu reset handler这样的一些动作了。</p>

<p>上面提到的有Freezable属性的这个workqueue比较实用，在suspend的时候会freeze，这样就会避免当suspend的时候，一些设备被关闭（或者clock被gate，或者power被gate），但是workqueue中还有work在运行从而导致一些问题。</p>

<p>跟了一下代码，这个system_freezable_wq主要就是在create workqueue的时候加上了一个FREEZABLE的flag，然后当suspend发生的时候，在没有开始真正suspend device之前，有一个suspend_prepare会调用suspend_freeze_processes，这样一路调用下来，最终会调用到freeze_workqueues_begin，在这里会将workqueue的maxactive设成0，这样workqueue里面的work就无法执行到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel resume的逻辑]]></title>
    <link href="http://markzhang.cn/blog/2016/01/05/kernel-suspend-resume-description/"/>
    <updated>2016-01-05T15:59:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/05/kernel-suspend-resume-description</id>
    <content type="html"><![CDATA[<p>Resume的时候，其实最开始是从bootrom启动，再到uboot，然后再到kernel，到kernel的common code的时候，arch相关的代码都已经跑完，此时CPU已经起来了（其实CPU起来之后执行的第一句代码位于设定好的CPU reset handler指定地方的代码，一般这是一段汇编，在这里会去读取suspend结束的时候的一些系统状态，从而可以顺利的转到kernel层继续）。</p>

<!-- more -->


<p>所以到了kernel这边的时候，是从suspend结束时的下一条指令开始继续执行。具体就位于suspend.c的suspend_enter的下半部分代码。</p>

<p>在这里就可以看到，比如dpm_resume_noirq就是关键函数。在这里就会依次去调用所有device对应的driver的resume方法，顺序是先suspend的后被resume，后suspend的先resume。</p>

<p>结合之前说的suspend的逻辑，综合一下就是：</p>

<p>device_add的时候：</p>

<p>先被add的device，后被suspend，先被resume</p>

<p>后被add的device，先被suspend，后被resume</p>

<p>不过这不是绝对的，细节一点来说，这里面还分noirq的device resume list和irq enabled device resume list，具体的可以去看源代码。</p>

<p>然后suspend_enter函数就会被执行完成，按照之前suspend时候的调用栈，就会回到函数：suspend_devices_and_enter这个函数中调用suspend_enter的下一句继续执行，在这里又会做一些resume的工作，比如console resume就在这里。</p>

<p>最后就回到了调用suspend_devices_and_enter的函数enter_state，在这里会调用suspend_finish，这个函数里面就会调用到suspend_thaw_processes，这个函数就会thaw workqueues, thaw tasks，然后调用schedule开始进程调度，到这个时候userspace也就活过来了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Cron的一些小Tips]]></title>
    <link href="http://markzhang.cn/blog/2016/01/04/cron-tips/"/>
    <updated>2016-01-04T10:08:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/04/cron-tips</id>
    <content type="html"><![CDATA[<ul>
<li><p>crontab -e编辑定时任务，crontab -l查看。最后的cron任务文件保存在/var/spool/cron/crontab目录下</p></li>
<li><p>cron会切换到/var/spool/cron/crontab目录下cron文件的owner这个用户，然后执行定义的定时任务。</p></li>
<li><p>但是cron切换用户的时候，任何环境变量，包括.bashrc都不会被执行到。所以诸如$HOME这样的变量也是没有定义的。所以，一般在定时任务的脚本中，我们会这样处理：</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">HOME</span><span class="o">=</span>/home/markz
</span><span class='line'><span class="nb">source</span> <span class="k">${</span><span class="nv">HOME</span><span class="k">}</span>/.bashrc
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/bin:<span class="nv">$PATH</span>
</span><span class='line'>.... &lt;tasks&gt;
</span></code></pre></td></tr></table></div></figure>


<p>有一点注意，~/.bashrc往往都含有大量的定义和脚本执行，这有可能会影响到source的成功执行。我们之所以在需要cron的脚本中加入这句source，大多数情况下是为了定义一些环境变量。所以为了让source能保证成功，一般我们都会把需要的环境变量单独存放到一个文件中，然后去source那个文件即可。直接source ~/.bashrc不是一个好的做法。</p>

<ul>
<li>/var/log/syslog保存了cron的log，查看该log可以方便的知道定时任务执行的一些情况。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compile: what is softfp & hardfp?]]></title>
    <link href="http://markzhang.cn/blog/2016/01/04/softfp-hardfp/"/>
    <updated>2016-01-04T09:56:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/04/softfp-hardfp</id>
    <content type="html"><![CDATA[<p>hardfp compiles inline FP instructions.  If you have an FPU this will be fastest.  If you don&rsquo;t, every FP instruction will trap to an emulation routine (assuming your runtime supports this).</p>

<!-- more -->


<p>softfp will compile a library call for every FP operation.  Use this if you never run on a system with an FPU.</p>

<p>来自gcc的manual：</p>

<blockquote><p>-mfloat-abi=name       Specifies which floating-point ABI to use.  Permissible values are: soft, softfp and hard.</p>

<p>Specifying soft causes GCC to generate output containing library calls for floating-point operations.  softfp allows the generation of code using hardware floating-point instructions, but still uses the soft-float calling conventions.  hard allows generation of floating-point instructions and uses FPU-specific calling conventions.</p>

<p>The default depends on the specific target configuration.  Note that the hard-float and soft-float ABIs are not link-compatible; you must compile your entire program with the same ABI, and link with a compatible set of libraries.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UTF-8 Encoding rules]]></title>
    <link href="http://markzhang.cn/blog/2016/01/03/utf8-encoding-rules/"/>
    <updated>2016-01-03T11:38:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/03/utf8-encoding-rules</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cm">/* UTF-8 encoding</span>
</span><span class='line'><span class="cm">00000000-01111111  00-7F  US-ASCII (single byte)</span>
</span><span class='line'><span class="cm">10000000-10111111  80-BF  Second, third, or fourth byte of a multi-byte sequence</span>
</span><span class='line'><span class="cm">11000000-11011111  C0-DF  Start of 2-byte sequence</span>
</span><span class='line'><span class="cm">11100000-11101111  E0-EF  Start of 3-byte sequence</span>
</span><span class='line'><span class="cm">11110000-11110100  F0-F4  Start of 4-byte sequence</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么linux的TTY登录程序getty/agetty一般都会设置一个-L的option？]]></title>
    <link href="http://markzhang.cn/blog/2016/01/03/getty-l/"/>
    <updated>2016-01-03T11:36:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/03/getty-l</id>
    <content type="html"><![CDATA[<p>-L option表示程序不等待DCD信号。DCD信号是串口通讯时的一个信号，表示Data Carrier Detected，一般是modem连通之后会发送回来的一个信号，表示数据载波OK，可以继续通信了。</p>

<!-- more -->


<p>但是，在现在的串口通信中，特别是嵌入式开发的时候，开发板上的串口，DCD这个pin一般都不会连线的，一般只连tx/rx/cts/rts四根线就OK了。</p>

<p>所以，如果getty或者agetty没有指定-L选项，那么open /dev/ttyS0就会block在那里，因为kernel会wait在一个waitqueue上，等待串口的DCD信号上来（通过中断）。</p>

<p>事实上，在getty/agetty程序中，指定-L option之后，代码中就会以NON_BLOCK的方式来打开/dev/ttyS0，这样kernel就不会去等待DCD信号了，从而打开串口就不会block了。</p>

<p>对于local的开发板上的串口来说，不连DCD线是合理的。因为这是local设备，不是要和远程的一个modem进行通信，所以需要DCD。本地的串口连上述那四根线就OK了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DMABUF/DMA Mapping/IOMMU/CMA/TTM/GEM/GART/SMMU]]></title>
    <link href="http://markzhang.cn/blog/2015/12/30/dmabuf-slash-dma-mapping-slash-iommu-slash-cma-slash-ttm-slash-gem-slash-gart-slash-smmu/"/>
    <updated>2015-12-30T09:24:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/30/dmabuf-slash-dma-mapping-slash-iommu-slash-cma-slash-ttm-slash-gem-slash-gart-slash-smmu</id>
    <content type="html"><![CDATA[<ol>
<li><p>DMABUF can be used as a wrapper to encapsulate other memory management frameworks. All these memory management framework(I mean mostly for graphics), buffer is the keypoint. DMABUF defines a standard buffer structure. So DMABUF can be used as a wrapper for TTM/GEM/Android ION&hellip; and etc. Notice DMABUF can&rsquo;t replace these things, cause it doesn&rsquo;t cover everything. E.g: DMABUF has no userspace interfaces, right now only kernel interfaces(can be used in device driver).</p></li>
<li><p>Kernel has DMA mapping API from origin. ARM defines IOMMU which can be used to connect scattered physical memory as a continuous region for devices which needs continue address to work(e.g: DMA). So IOMMU implementations &amp; CMA should work behind kernel DMA mapping API. E.g: dma_alloc_from_contiguous can be implemented by CMA; dma_alloc_coherent can be implemented by IOMMU or by the normal case(just call __get_free_pages). So for device drivers need dma buffers, we should use dma mapping APIs, not call iommu api directly.</p></li>
<li><p>For tegra, GART &amp; SMMU can be used to implement IOMMU apis.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux graphics stack 理解]]></title>
    <link href="http://markzhang.cn/blog/2015/12/29/linux-graphics-stack/"/>
    <updated>2015-12-29T14:09:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/29/linux-graphics-stack</id>
    <content type="html"><![CDATA[<p>Display and mode setting: DRM. DRM defines connector/encoder/crtc to support display(including multi-monitor). And KMS makes mode setting happens in kernel space.</p>

<!-- more -->


<hr />

<p>2D acceleration: X server EXA/UXA extension. Vendor should write a X server driver which implements EXA or UXA(should be upstreamed). UXA is an enhancement design of EXA, proposed by intel, so GEM is used in UXA. DRM has no direct 2D acceleration interface definitions(e.g: memory copy/move, blit, color space conversion&hellip;), this is defined in EXA/UXA extensions. But vendor&rsquo;s X server driver will use drm functions, mostly is buffer manipulations.</p>

<p>3D acceleration: via Mesa. Mesa has 2 parts:</p>

<p>libGL.so &mdash; the implementation of OpenGL spec, the default OpenGL implementation library in Linux. This libGL.so translates OpenGL callings to Mesa-specified instructions.</p>

<p>DRI driver &mdash; the driver accepts the Mesa-specified instructions generated by libGL.so and call drm functions to get them accelerated in GPU. Should be upstreamed.</p>

<p>DRM: has userspace libdrm &amp; kernel space drm driver.</p>

<p>libdrm: Implemented drm APIs. Vendor can hook it&rsquo;s implementations as well as add more APIs which used by EXA/UXA driver(2D) or DRI driver(3D). That&rsquo;s why the build result of libdrm normally has 2 libraries(e.g: libdrm.so &amp; libdrm_intel.so). Vendor codes of libdrm should be upstreamed.</p>

<p>Kernel drm driver: Works under kernel drm framework, should be upstreamed. Cause vendor can add APIs in libdrm, so kernel drm driver can handle vendor specified ioctls.</p>

<p>GLX: X server extension of OpenGL. X server has DRI/DRI2 extensions as well.</p>

<p>They&rsquo;re working with libGL.so in Mesa. By these extensions, Mesa can do:</p>

<ol>
<li><p>Direct rendering: libGL.so in Mesa try to figure out whether DRI driver is ready in Mesa. If so, GLX returns some infos(such as window size, position&hellip;) or create off-screen buffers(via DRI/DRI2 X extension) for Mesa. The rendering is handled in Mesa&rsquo;s DRI driver &mdash; no relations with X server.</p></li>
<li><p>Indirect rendering: libGL.so in Mesa can&rsquo;t find out Mesa&rsquo;s DRI driver. So it queries whether DRI is available in X server. If so, it pass the Mesa-specified instructions which generated by libGL.so to X server. And GLX/DRI/DRI2 extensions of X server handles the rest things. Normally it&rsquo;s software rendering which implemented by Mesa as well. AIGLX(Accelerated Indirect GLX) seems has some solutions to accelerate this.</p></li>
</ol>


<p>So Mesa handles a lot of works in linux 3D graphics stack. And it has lots of relations with X server as well(GLX and DRI X extensions).</p>

<p>An important reason that why we involve so many components is, decouple the dependencies of all of these guys. According to this design, DRM is not related with X server so it works with other programs as well(e.g: Wayland). Mesa is the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux通过sendmsg在进程中共享FD]]></title>
    <link href="http://markzhang.cn/blog/2015/12/25/share-fd-by-sendmsg/"/>
    <updated>2015-12-25T10:57:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/25/share-fd-by-sendmsg</id>
    <content type="html"><![CDATA[<p>对于现代Linux来说，FD的使用变的越来越广泛。FD不光用于一个文件或设备的打开句柄，现在FD还往往会用于一些其他数据类型的句柄，比如一块buffer。</p>

<p>对于一些要避免拷贝的buffer来说（比如一块用于display的buffer，或者一块用于render的buffer），使用FD来表示这块buffer并在不同进程中传递就被使用的越来越广泛。而且进程退出（不管是正常退出还是被杀）的时候，FD还能被kernel回收，再加上 <code>reference count</code>，这块buffer就不会有泄漏的问题。看看Android和Linux kernel的代码就会发现，现在使用FD的这种例子是越来越多了。</p>

<p>在userspace，进程共享FD可以通过 <code>sendmsg</code> 来实现：</p>

<!-- more -->


<p>man 7 unix</p>

<p>man sendmsg</p>

<p>sendmsg可以发送control message，也就是不是普通的regular数据。看sendmsg的manual可以知道。</p>

<p>control message其实也是指定一个指针和一个长度，和普通数据一样。</p>

<p>有趣的事，control message可以发送一个FD（或一组，以数组方式组织）给另外一个进程。不是说把FD这个数字发给了别人，而是这个FD真正的另外一个进程中存在，而且和发送进程的FD指向的是一个struct file</p>

<p>简单来说，就好象接收进程dup了发送进程的那个FD一样。事实上嘛，大家都懂的，其实就是kernel帮助接收进程dup了一下而已。。。</p>

<p>在man 7 unix中搜索SCM_RIGHTS可以看到具体用法和信息。</p>

<p>有个条件是：必须工作在UNIX这个socket domain上（AF_UNIX），TCP/IP socket domain是不行的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel: 怎么通过struct file *得到文件名]]></title>
    <link href="http://markzhang.cn/blog/2015/12/25/get-file-name-by-struct-file-star/"/>
    <updated>2015-12-25T10:54:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/25/get-file-name-by-struct-file-star</id>
    <content type="html"><![CDATA[<p>只是一个小Tip，代码如下：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">tmp</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">path_get</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">tmp</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">__get_free_page</span><span class="p">(</span><span class="n">GFP_TEMPORARY</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">tmp</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">-</span><span class="n">ENOMEM</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">pathname</span> <span class="o">=</span> <span class="n">d_path</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_path</span><span class="p">,</span> <span class="n">tmp</span><span class="p">,</span> <span class="n">PAGE_SIZE</span><span class="p">);</span>
</span><span class='line'><span class="n">path_put</span><span class="p">(</span><span class="o">&amp;</span><span class="n">file</span><span class="o">-&gt;</span><span class="n">f_path</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">IS_ERR</span><span class="p">(</span><span class="n">pathname</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">free_page</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">tmp</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">PTR_ERR</span><span class="p">(</span><span class="n">pathname</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">printk</span><span class="p">(</span><span class="n">KERN_WARNING</span> <span class="s">&quot;File name: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pathname</span><span class="p">);</span>
</span><span class='line'><span class="n">free_page</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">tmp</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGDB配置使用]]></title>
    <link href="http://markzhang.cn/blog/2015/12/25/setup-kgdb/"/>
    <updated>2015-12-25T10:49:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/25/setup-kgdb</id>
    <content type="html"><![CDATA[<p>KGDB可以用于linux kernel的调试，具体的配置步骤是：</p>

<!-- more -->


<p>make menuconfig, under &ldquo;Kernel Hacking&rdquo;, enable &ldquo;KGDB&rdquo; &amp; &ldquo;KGDB over serial line&rdquo;. Enable &ldquo;compile kernel with debug info&rdquo;(CONFIG_DEBUG_INFO) &amp; &ldquo;enable frame pointer&rdquo;(CONFIG_FRAME_POINTER) options(both are under &ldquo;Kernel Hacking&rdquo;).</p>

<p>有关CONFIG_FRAME_POINTER这个option，需要在enable了ARCH_CONFIG_FRAME_POINTERS这个option之后才会出现在Kernel hacking下面。</p>

<p>这ARCH_CONFIG_FRAME_POINTERS在make menuconfig里面是找不到的。这个option是专门给其他人select用的。一般都是在ARCH config的时候会去select这个option</p>

<p>比如x86下，一般会enable这个option。而ARM则不会（可能是考虑到生成的kernel文件尺寸和性能）。</p>

<p>所以，在ARM下，可以编辑arch/arm/Kconfig，在CONFIG_ARM下面的一堆select的最后，添加上一句select CONFIG_ARCH_FRAME_POINTERS就可以了。</p>

<p>从实验结果来看，只要enable了CONFIG_DEBUG_INFO，基本上就差不多了，能看到代码了。</p>

<hr />

<p>Add kernel option: <code>kgdboc=ttyS0,38400 kgdbwait</code> into kernel command line.</p>

<p>根据我的实验，这里115200不行。在后面gdb设置target remote /dev/ttyS0的时候，会被告知最高支持到38400.</p>

<p>所以，这里如果115200不行，就改成38400。</p>

<hr />

<p>Start kernel, kernel will wait for connection from remote PC&rsquo;s gdb.</p>

<p>On remote machine, &ldquo;<gdb path> ./vmlinux&rdquo; &mdash; this &ldquo;vmlinux&rdquo; mostly is under the root directory of kernel(a big kernel image with debug infos, not the one under arch/arm/boot, that is stripped version).</p>

<p>需要注意的是，这里的GDB必须使用host是x86-64，target是ARM的那种GDB。我们PC上的gdb一般host和target都是x86-64。</p>

<p>这样的GDB可以在一些常见的toolchain网站找到，比如linaro。</p>

<hr />

<p>Enter gdb commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span>remotebaud 38400
</span><span class='line'>target remote /dev/ttyS0
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>Done. You can list source codes, set breakpoints now. Continue the debugging after finished.</p>

<p>CAUTION: Close any other programs(normally it&rsquo;s minicom which we use to monitor serial outputs) which may occupy &ldquo;/dev/ttyS0&rdquo; before running gdb on remote machine. Otherwise gdb can&rsquo;t connect with target board.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04安装Microsoft lifecam studio摄像头]]></title>
    <link href="http://markzhang.cn/blog/2015/12/24/ubuntu-install-microsoft-camera/"/>
    <updated>2015-12-24T09:20:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/24/ubuntu-install-microsoft-camera</id>
    <content type="html"><![CDATA[<p>这是一个UVC摄像头，所以可以使用uvcvideo这个kernel驱动，一般kernel都编译了这个module。</p>

<p>什么是UVC？</p>

<p>UVC，全称为：USB video class 或USB video device class</p>

<!-- more -->


<p>UVC是Microsoft与另外几家设备厂商联合推出的为USB视频捕获设备定义的协议标准，目前已成为USB org标准之一。</p>

<p>如今的主流操作系统(如Windows XP SP2 and later, Linux 2.4.6 and later, MacOS 10.5 and later)都已提供UVC设备驱动，因此符合UVC规格的硬件设备在不需要安装任何的驱动程序下即可在主机中正常使用。使用UVC技术的包括摄像头、数码相机、类比影像转换器、电视棒及静态影像相机等设备。</p>

<p>最新的UVC版本为UVC 1.1，由USB Implementers Forum定义包括基本协议及负载格式。</p>

<p>网络摄像头是第一个支持UVC而且也是数量最多的UVC设备，目前，操作系统只要是 Windows XP SP2 之后的版本都可以支持 UVC，当然 Vista 就更不用说了。Linux系统自2.4以后的内核都支持了大量的设备驱动，其中支持UVC设备。</p>

<p>使用 UVC 的好处 USB 在 Video这块也成为一项标准了之后，硬件在各个程序之间彼此运行会更加顺利，而且也省略了驱动程序安装这一环节。</p>

<p>所以，apt-get一下guvcview就可以看到图像了。</p>

<p>问题：</p>

<p><strong> 第一个问题 </strong></p>

<p>也是uvc驱动官方网站给出的问题，就是有关这款摄像头每次都请求最大USB带宽的问题，需要给uvcvideo这个kernel module添加一个参数，具体做法是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo rmmod uvcvideo
</span><span class='line'>sudo modprobe uvcvideo <span class="nv">quirks</span><span class="o">=</span>0x80
</span><span class='line'>重新插拔摄像头
</span><span class='line'>cat /sys/module/uvcvideo/parameters/quirks来检验是否设置成功了。
</span></code></pre></td></tr></table></div></figure>


<p>参考资料：<a href="http://www.ideasonboard.org/uvc/faq/#faq6">http://www.ideasonboard.org/uvc/faq/#faq6</a></p>

<p><strong> 第二个问题 </strong></p>

<p>有的时候会发现好好的图像定格了，或者是整个摄像头设备都没了（在lsusb中看不到了）。此外还有个现象就是，摄像头上的蓝灯会莫名其妙的闪烁起来。Google下，这是由于Chrome中的Peperflash造成的。所以，禁用PeperFlash，安装Adobe的flash即可。做法：</p>

<p>打开chrome，输入about:plugins，点右上角Details，Disable PeperFlash</p>

<p>在Adobe网站下载11.2的flashplayer，可以下载.tar.gz包那个版本，解开，得到libflashplayer.so和一个usr目录。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mkdir /opt/google/chrome/plugins
</span><span class='line'>sudo cp &lt;libflashplayer.so&gt; /opt/google/chrome/plugins
</span><span class='line'>sudo cp usr/* /usr
</span></code></pre></td></tr></table></div></figure>


<p>重启Chrome，再次进入about:plugins，发现11.2的Adobe flash是enable的，PeperFlash是disable的，就OK了。</p>

<p>貌似PeperFlash是Chrome自带的一个flashplayer，有GPU加速。</p>

<p>Adobe的Linux flashplayer不会再有新版本，但是会有安全更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird on Ubuntu 12.04 - 调整邮件列表行间距]]></title>
    <link href="http://markzhang.cn/blog/2015/12/24/thunderbird-change-line-height/"/>
    <updated>2015-12-24T09:14:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/24/thunderbird-change-line-height</id>
    <content type="html"><![CDATA[<p>很不幸必须手动修改配置文件来做到，Thunderbird本身没有提供这样的配置项：</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>markz@markz-hp6200:~<span class="nv">$ </span><span class="nb">cd</span> .thunderbird/
</span><span class='line'>markz@markz-hp6200:~/.thunderbird<span class="nv">$ </span>ls
</span><span class='line'>a8feo3zj.default  Crash Reports  profiles.ini
</span><span class='line'>markz@markz-hp6200:~/.thunderbird<span class="nv">$ </span><span class="nb">cd </span>a8feo3zj.default/
</span><span class='line'>markz@markz-hp6200:~/.thunderbird/a8feo3zj.default<span class="nv">$ </span><span class="nb">cd </span>chrome/
</span><span class='line'>markz@markz-hp6200:~/.thunderbird/a8feo3zj.default/chrome<span class="nv">$ </span>ls
</span><span class='line'>userChrome.css
</span><span class='line'>markz@markz-hp6200:~/.thunderbird/a8feo3zj.default/chrome<span class="nv">$ </span>cat userChrome.css
</span><span class='line'>treechildren:-moz-tree-row <span class="o">{</span>
</span><span class='line'>height: 35px !important;
</span><span class='line'><span class="o">}</span>
</span><span class='line'>markz@markz-hp6200:~/.thunderbird/a8feo3zj.default/chrome<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里注意如果没有发现那个 <code>chrome</code> 的目录，那就自己创建一个，<code>userChrome.css</code> 也自己创建，然后将内容填入即可。全部做完重启Thunderbird就能看到效果了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel barrier/wmb/mb宏的作用]]></title>
    <link href="http://markzhang.cn/blog/2015/12/23/kernel-barrier-mb-wmb/"/>
    <updated>2015-12-23T10:28:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/23/kernel-barrier-mb-wmb</id>
    <content type="html"><![CDATA[<p>内存屏障主要解决的问题是编译器的优化和CPU的乱序执行。</p>

<p>编译器在优化的时候，生成的汇编指令可能和c语言程序的执行顺序不一样，在需要程序严格按照c语言顺序执行时，需要显式的告诉编译不需要优化，这在linux下是通过barrier()宏完成的，它依靠volidate关键字和memory关键字，前者告诉编译barrier()周围的指令不要被优化，后者作用是告诉编译器汇编代码会使内存里面的值更改，编译器应使用内存里的新值而非寄存器里保存的老值。</p>

<p>同样，CPU执行会通过乱序以提高性能。汇编里的指令不一定是按照我们看到的顺序执行的。linux中通过mb()系列宏来保证执行的顺序。具体做法是通过mfence/lfence指令（它们是奔4后引进的，早期x86没有）以及x86指令中带有串行特性的指令（这样的指令很多，例如linux中实现时用到的lock指令，I/O指令，操作控制寄存器、系统寄存器、调试寄存器的指令、iret指令等等）。简单的说，如果在程序某处插入了mb()/rmb()/wmb()宏，则宏之前的程序保证比宏之后的程序先执行，从而实现串行化。wmb的实现和barrier()类似，是因为在x86平台上，写内存的操作不会被乱序执行。</p>

<p>实际上在RSIC平台上，这些串行工作都有专门的指令由程序员显式的完成，比如在需要的地方调用串行指令，而不像x86上有这么多隐性的带有串行特性指令（例如lock指令）。所以在risc平台下工作的朋友通常对串行化操作理解的容易些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux kernel data types, alignment, compat_ioctl 数据类型，对齐问题和compat_ioctl]]></title>
    <link href="http://markzhang.cn/blog/2015/12/23/kernel-data-type-compat-ioctl/"/>
    <updated>2015-12-23T10:21:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/23/kernel-data-type-compat-ioctl</id>
    <content type="html"><![CDATA[<p>特别是在写IOCTL的时候，由于有32bit userspace + 64bit kernel的问题，而且由于architecture的不同，不同data type的length也不同，所以在IOCTL中建议用u32, u64, s32这样无视architecture fix size的data type。</p>

<p>这里是来自LDD的不同的architecture的data type的size：</p>

<!-- more -->


<p><img src="http://markzhang.cn/downloads/image/kernel-u32-s32.png" alt="kernel architecture indepedent data types" /></p>

<p>此外有关IOCTL中structure的alignment的问题，注意添加padding使数据长度alignment，现在一般来说都是添加padding到64bit对齐。这里是为什么需要这么做（针对ARM，x86更不用说，因为x86-64早就有了）：</p>

<blockquote><p>Q: I&rsquo;m new in kernel development. Could you tell me or give me some
materials to read that why we need to align the size of IOCTL structures
to 64bit? I can understand if we&rsquo;re working in a 64bit kernel but why we
need to do this if we&rsquo;re in a 32bit arm kernel? Besides, why the
pointers in IOCTL structure should be declared as u64?</p>

<p>A: Because in a few years/months you&rsquo;ll have arm64, but still the same
driver with the same ioctls &hellip; and if the ioctls are not <em>exactly</em>
the same you get to write compat ioctl code which copies the old 32bit
struct into the 64bit struct the kernel understands. Hence your ioctl
must be laid out exactly the same for both 32bit and 64bit, which
happens if you naturally align/pad everything to 64bits and only use
fixed-sized integers and no pointers.</p>

<p>Mark: Ah, I see. Thanks. Yes, u64 still works as 32 bit pointer.</p></blockquote>

<p>参看LDD十一章中有关Nature Alignment的描述。Alignment主要是牵涉到性能问题，不对齐的数据在fetch的时候会有exception，从而降低performance。</p>

<p>这里是网上搜到的一些建议：</p>

<p>There are some rules that should be followed regardless:</p>

<ul>
<li><p>ioctl commands should never be written in an architecture specific
way. In the example of the OMAP driver, you definitely want to be
able ot use the same command when running Linux on the C6x DSP.</p></li>
<li><p>If possible, use only scalar values as ioctl arguments</p></li>
<li><p>Avoid types that are register sized: &lsquo;long&rsquo;, &lsquo;size_t&rsquo;, pointer.
Instead use only <strong>u8, </strong>u16, <strong>u32 and </strong>u64 and their signed
versions.</p></li>
<li><p>If you use structures, try very hard to avoid pointers in them,
it messes up all sorts of tools.</p></li>
<li><p>If you use structures, make all members naturally aligned, and pad
the size of the structures to a multiple of the maximum member size.</p></li>
<li><p>Never put sub-command numbers into a structure.</p></li>
</ul>


<p>有关compat_ioctl：支持64bit的driver必须要实现的ioctl，当有32bit的userspace application call 64bit kernel的IOCTL的时候，这个callback会被调用到。</p>

<p>Q: Suppose I have defined the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#define MY_IOCTL_CMD1 _IOR(MAGIC_NUMBER, 0x01, arg1)</span>
</span><span class='line'><span class="cp">#define MY_IOCTL_CMD2 _IOW(MAGIC_NUMBER, 0x02, arg2)</span>
</span><span class='line'><span class="cp">#ifdef CONFIG_COMPAT</span>
</span><span class='line'><span class="cp">#define MY_COMPAT_IOCTL_CMD1 _IOR(MAGIC_NUMBER, 0x01, compat_arg1)</span>
</span><span class='line'><span class="cp">#define MY_COMPAT_IOCTL_CMD2 _IOW(MAGIC_NUMBER, 0x02, compat_arg2)</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now when we do ioctl from user space, we usually do</p>

<p>ioctl(fd, MY_IOCTL_CMD1, &amp;arg1)</p>

<p>So do we really need to have an ioctl with MY_COMPAT_IOCTL_CMD1 as request?</p>

<p>In the devide code I have handlers defined as follows. ioctl: device_ioctl</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#ifdef CONFIG_COMPAT</span>
</span><span class='line'><span class="nl">compat_ioctl:</span> <span class="n">device_compat_ioctl</span>
</span><span class='line'><span class="cp">#endif</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can anybody please provide some explanations around this?</p>

<hr />

<p>A: This compat stuff is for running a 32-bit program in a 64-bit kernel. When you call the ioctl(fd, MY_IOCTL_CMD1, &amp;arg1) from a 32-bit program on a 64-bit kernel, the kernel will divert the ioctl to the .compat_ioctl function in the file_operations struct. This compat_ioctl function is responsible for copying the user argument arg1 as if it were compat_arg1, which uses the 32-bit layout. The compat_arg1 typedef is defined in the kernel so that when compiled for 64-bit, the structure is exactly the same layout as the arg1 compiled for 32-bit.</p>

<p>The definition of MY_IOCTL_CMD1 will take the sizeof arg1 into account when creating the cmd id. When you compile a program for a 32-bit machine, the value for MY_IOCTL_CMD1 will be different than if you compiled it for a 64-bit machine. The 32-bit MY_IOCTL_CMD1 should have the same value as the 64-bit MY_COMPAT_IOCTL_CMD1 in the kernel, however.</p>

<p>There&rsquo;s never a need to use compat_arg1 or MY_COMPAT_IOCTL_CMD1 in a user-space application. Those are only for code compiled in the kernel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[家庭安防 - 一套萤石设备组建的家庭安防]]></title>
    <link href="http://markzhang.cn/blog/2015/12/22/ezviz-family-protection/"/>
    <updated>2015-12-22T15:07:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/22/ezviz-family-protection</id>
    <content type="html"><![CDATA[<p>智能硬件的火热也加速了安防产业的发展。家庭安防现在也成为了很多家庭考虑的一个方面。特别是对于楼层较低的家庭来说，安装一套安防系统还是相当之有必要。</p>

<p>之前也试用过360智能摄像机、小蚁智能摄像机，但是只有一个摄像头始终还是觉得单薄了一些，在二手卖掉这两个摄像头之后，购买了一套萤石的安防设备。</p>

<!-- more -->


<p>之所以说只有一个摄像头显的方案单薄主要是因为以下一些原因：</p>

<ul>
<li><p>没有录像设备。不管是出于隐私考虑还是容量/上传带宽的考虑，将24小时的录像上传到云端并不是一个最佳的方案。所以如果有一个24小时的录像设备，那么摄像头的存在才有意义。而且万一发生盗窃，就算摄像头被盗走，也还有录像设备保存了所有的录像资料。</p></li>
<li><p>没有报警设备。只有一个摄像头的话，唯一的报警设备就是手机。但是手机上的这些APP不能发出高分贝的报警音，而且由于系统的原因，在我测试的时候，安装在手机上的APP并不能及时的上报报警。比如Android系统由于 <code>Low memory Killer</code> 的存在，导致很多后台进程会在用户未感知的情况下被杀掉从而导致不报警。还有现在很多国内的安卓系统都有安全中心这样的东西，它会控制哪些APP不能启动后台Service等。手机报警唯一的适用场景是外出，如果是晚上睡觉，那你还要一直开着手机否则就收不到报警信息了。。。</p></li>
<li><p>摄像头有覆盖不到的区域，比如阳台。一般摄像头都是放在客厅，那么其实家里其他一些地方并覆盖不到。</p></li>
<li><p>我买的这两款摄像头处于成本售价的原因，夜视效果都不好。对于安防来说，其实要的就是夜视效果。。。</p></li>
</ul>


<p>还有其实有一些功能其实是没有必要的，比如所谓的双向对讲。就是可以在手机上说话然后让摄像头播放出来，我想说这个其实是娱乐功能吧？谁会整天用这功能？</p>

<p>回到主题，基于以上一些考虑，在Google了一番之后，重新采购了以下设备：</p>

<ul>
<li><p>萤石C3C商铺宝摄像机</p></li>
<li><p>萤石N1互联网硬盘录像机</p></li>
<li><p>萤石A1C互联网报警盒子套装</p></li>
</ul>


<p>不是给萤石打广告，实在是我懒的去找多家的产品然后进行比较，所以就都在萤石一家买了。。。</p>

<p>首先来说摄像机和录像机。选用C3C主要是它有WIFI，而且超强夜视（看看镜头里面的红外灯珠就懂了）。挂在客厅的角落天花板上就可以覆盖到整个客厅。再配合N1录像机，就做到了监控录像两不误。我买的N1是最便宜的一款，最多支持4路输入。放入一块1T的硬盘，如果是移动侦测录像（就是只有探测到移动产生才会录像）的话，估计能录个几个月。C3C的唯一缺点就是它是针对商铺用的，所以没有录音，只有录像。此外由于我的C3C配合N1录像，所以C3C本身里面就不需要再插SD卡了。</p>

<p>C3C和N1的配置也非常简单，通过手机上的 <code>萤石视频</code> 就可以非常轻松的配置上，N1也能自动检测到C3C并开启录像。并且也支持定时计划，比如晚上11点之后就开启移动侦测报警，早上7点就关闭移动侦测报警等，总体来说还不错。</p>

<p>借用一下萤石官网的图片，如果侵犯到了萤石的权益请告知，我会删除：</p>

<p><img src="http://markzhang.cn/downloads/image/c3c.png" alt="C3C" /></p>

<p><img src="http://markzhang.cn/downloads/image/n1.png" alt="N1" /></p>

<p>不过也不是没有可以吐槽的地方，比如N1。N1做为录像机，出于安全考虑，自然我们会把它摆到不显眼的地方。但是N1上的三个灯是要闹哪样？一个电源红色灯常亮，一个硬盘灯如果开启24小时录像那是不停的闪（因为要写硬盘嘛），还有一个蓝色的网络灯那就不说了。。。就跟黑暗中的灯塔一样能闪瞎眼。而且还没有配置项可以关闭这些灯。显然研发人员是把N1当作一台电脑来设计的了。还有C3C，随机配的电源线只有一米，如果家庭装修的时候没考虑到监控的话，这一米的线能干嘛？摆在茶几上监控么？但凡要吊在天花板上的话，至少也要五米的线。所以我很无奈的又在淘宝上买了一根电源延长线。</p>

<p>再来说说所谓的A1C互联网报警盒子套装，名字很长而且唬人。其实就是一个报警盒子A1C，加上一个红外探测器和一个单体门磁。</p>

<p>借用一下萤石官网的图片，如果侵犯到了萤石的权益请告知，我会删除：</p>

<p><img src="http://markzhang.cn/downloads/image/a1c-collection.png" alt="a1c collection" /></p>

<p>A1C相当与是所有传感器（或者说探测设备）的网关，自带WIFI。其他的探测器比如我买的红外探测器和单体门磁，通过无线射频与A1C传递信息。再结合A1C上配置的报警策略，来决定是否要报警。</p>

<p>只有A1C上有高分贝的报警喇叭，探测器本身是不会报警的，探测器只是发送信号给A1C，所以光买探测器不买A1C是没有任何用处的。</p>

<p>有关红外探测器，装上电池，添加到A1C上，放在高处就可以了，非常简单。至于探测器如何添加到A1C上，说明书上有详细说明，而且A1C也有语音提示，这方面做的还是很不错的，简单易用。只需要注意说明书上告知要将红外探测器放到1.8m &ndash; 2.3m的高处，而且最好是用泡沫胶粘贴在墙角位置，探测器随机还附送了泡棉胶，这点萤石还是很贴心的。</p>

<p>所以这个红外探测器就可以成为摄像头的一个很好的补充设备，比如阳台。阳台一般都有很多扇窗户，每扇窗户上都安装门磁不经济管理也不方便，所以在阳台墙上安装一个红外探测，就把整个阳台管上了。此外放在房间也是一个不错的选择，因为探测器和A1C是射频方式连接的，所以只要不是隔了很多堵墙的话，一般信号传输都是没有问题的。</p>

<p>再说单体门磁。萤石有两种门磁，一种就是常见的两个一套的，这两个玩意一旦分离就报警，需要面对面的安装在门和门框上。我买的这个是单体门磁（因为套装中就是这个），高级一点，只有一个设备，贴在门上即可。它会感应门的位置从而报警。实际使用下来来看报警还是相当准确的。</p>

<p>实际使用下来，这套套装工作的还是不错的。出门的时候设置成 <code>外出模式</code>，红外和门磁一旦检测到异常A1C就会报警并发送消息到手机。晚上的时候设置成 <code>睡眠模式</code>，同样可以监测报警。A1C也支持跟摄像头一样的定时计划，比如到晚上11点，就可以挨个设定每个探测器上发的报警是否启动，到早上7点就可以恢复（也就是取消所有报警）。</p>

<p>最后说到报警的话，还要再提一点，那就是摄像机的移动监测报警。这个功能其实不如红外探测和无线门磁这样的报警准确。因为摄像机的移动监测其实就是检测画面是否有变化，有变化就会报警。所以一般晚上的时候，如果外面的光线传到室内，也会导致画面变化从而报警。比如你家对面有个KTV，晚上正是灯火辉煌的时候，各种霓虹灯乱闪，这个时候如果你开启摄像头的移动监测报警。。。你就等着手机一直叫吧。所以其实摄像机的主要任务还是记录下家中的情况，真正的准确报警还是要依赖各种传感器。</p>

<p>吐槽：一开始买来的A1C，开机就提示要升级，结果升级完了之后语音就没了。。。客服态度倒是很好，还把研发找来，研发给我打电话一通询问，感觉就是我跟他一起解bug。这其实挺好，说明萤石还是乐意听取用户的声音的，我要吐槽的是，为毛申请产品换货需要5-7天的审核？你没看错，就是说你在萤石官网提交了售后申请之后，至少要五天，这个申请才会被批准（果然我的申请第五天“准时”被批准了），然后你才能填快递单号将东西寄回，而且快递费还要自己先垫付，事情全部结束后再打萤石热线去要这个快递费。</p>

<p>好在萤石的客服和研发还是不错，早早的给了我换货的寄送地址，所以我一早就把有问题的A1C寄回了，完了之后过了大概一周收到电话说新的可以寄给我了。。。问了一下研发说语音没有了的原因是不知道为什么，升级的时候语音包丢了。。。</p>

<p>作为用户来说，买了东西自然希望第一时间安装调试好然后开始使用，所以当发现产品质量有问题的时候，应该是尽快帮用户解决问题，可能商家也有商家的难处，但是站在用户角度来说，我表示这点萤石做的不如360这样的互联网公司。到现在我还在等萤石的客服给我打电话，告知我什么时候能给我快递费。。。从我买这套萤石产品开始到现在，我少说已经打了近十次萤石热线了吧。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[repo init 中指定manifest和branch的含义]]></title>
    <link href="http://markzhang.cn/blog/2015/12/22/repo-init-manifest-branch/"/>
    <updated>2015-12-22T14:59:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/22/repo-init-manifest-branch</id>
    <content type="html"><![CDATA[<p>比如：</p>

<p>repo init -u git://xxx/xxx/manifest.git -b <BRANCH> -m <MANIFEST></p>

<!-- more -->


<p></p>

<p>这里-m和-b的含义是：</p>

<ol>
<li><p>注意到manifest.git本身也是一个git project</p></li>
<li><p>所以，-b指定的是使用#1中这个git project的哪个branch</p></li>
<li><p>-m指定的是，下载该git project中的哪个文件（应该是首先切换了branch，然后再下载该文件）。</p></li>
</ol>


<p>repo init这样做过了之后，其实本地就建立起来了一个.repo目录，里面核心文件就是manifest.xml，这个xml中就定义了：</p>

<ul>
<li><p>包含哪些git project</p></li>
<li><p>每个git project使用什么branch</p></li>
<li><p>每个git project在本地磁盘上的路径和远端服务器上该git project的路径。</p></li>
</ul>


<p>事实上，当repo init完成，在本地的.repo/manifests目录下就可以看到manifest这个git project，可以用git branch -av来查看branch，用git log来查看日志。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird配置 - for kernel maillist]]></title>
    <link href="http://markzhang.cn/blog/2015/12/21/kernel-thunderbird/"/>
    <updated>2015-12-21T14:22:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/21/kernel-thunderbird</id>
    <content type="html"><![CDATA[<p>From kernel: Documentation/email-clients.txt</p>

<!-- more -->


<p>Thunderbird (GUI)</p>

<p>Thunderbird is an Outlook clone that likes to mangle text, but there are ways
to coerce it into behaving.</p>

<ul>
<li>Allows use of an external editor:
The easiest thing to do with Thunderbird and patches is to use an
&ldquo;external editor&rdquo; extension and then just use your favorite $EDITOR
for reading/merging patches into the body text.  To do this, download
and install the extension, then add a button for it using
View->Toolbars->Customize&hellip; and finally just click on it when in the
Compose dialog.</li>
</ul>


<p>To beat some sense out of the internal editor, do this:</p>

<ul>
<li><p>Edit your Thunderbird config settings so that it won&rsquo;t use format=flowed.
Go to &ldquo;edit->preferences->advanced->config editor&rdquo; to bring up the
thunderbird&rsquo;s registry editor, and set &ldquo;mailnews.send_plaintext_flowed&rdquo; to
&ldquo;false&rdquo;.</p></li>
<li><p>Disable HTML Format: Set &ldquo;mail.identity.id1.compose_html&rdquo; to &ldquo;false&rdquo;.</p></li>
<li><p>Enable &ldquo;preformat&rdquo; mode: Set &ldquo;editor.quotesPreformatted&rdquo; to &ldquo;true&rdquo;.</p></li>
<li><p>Enable UTF8: Set &ldquo;prefs.converted-to-utf8&rdquo; to &ldquo;true&rdquo;.</p></li>
<li><p>Install the &ldquo;toggle wordwrap&rdquo; extension.  Download the file from:
  <a href="https://addons.mozilla.org/thunderbird/addon/2351/">https://addons.mozilla.org/thunderbird/addon/2351/</a>
Then go to &ldquo;tools->add ons&rdquo;, select &ldquo;install&rdquo; at the bottom of the screen,
and browse to where you saved the .xul file.  This adds an &ldquo;Enable
Wordwrap&rdquo; entry under the Options menu of the message composer.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
