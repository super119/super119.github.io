<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Make Things Cool]]></title>
  <link href="http://markzhang.cn/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2016-01-03T11:43:28+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[repo init 中指定manifest和branch的含义]]></title>
    <link href="http://markzhang.cn/blog/2015/12/22/repo-init-manifest-branch/"/>
    <updated>2015-12-22T14:59:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/22/repo-init-manifest-branch</id>
    <content type="html"><![CDATA[<p>比如：</p>

<p>repo init -u git://xxx/xxx/manifest.git -b <BRANCH> -m <MANIFEST></p>

<!-- more -->


<p></p>

<p>这里-m和-b的含义是：</p>

<ol>
<li><p>注意到manifest.git本身也是一个git project</p></li>
<li><p>所以，-b指定的是使用#1中这个git project的哪个branch</p></li>
<li><p>-m指定的是，下载该git project中的哪个文件（应该是首先切换了branch，然后再下载该文件）。</p></li>
</ol>


<p>repo init这样做过了之后，其实本地就建立起来了一个.repo目录，里面核心文件就是manifest.xml，这个xml中就定义了：</p>

<ul>
<li><p>包含哪些git project</p></li>
<li><p>每个git project使用什么branch</p></li>
<li><p>每个git project在本地磁盘上的路径和远端服务器上该git project的路径。</p></li>
</ul>


<p>事实上，当repo init完成，在本地的.repo/manifests目录下就可以看到manifest这个git project，可以用git branch -av来查看branch，用git log来查看日志。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git am失败的时候怎么办]]></title>
    <link href="http://markzhang.cn/blog/2015/05/11/deal-with-git-am-failures/"/>
    <updated>2015-05-11T10:15:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/05/11/deal-with-git-am-failures</id>
    <content type="html"><![CDATA[<p>本文主要参考了以下文章:</p>

<p><a href="http://www.pizzhacks.com/bugdrome/2011/10/deal-with-git-am-failures/">http://www.pizzhacks.com/bugdrome/2011/10/deal-with-git-am-failures/</a></p>

<p><code>git am</code> 或 <code>git am -3</code> 打patch的时候经常会遇到fail，就是因为patch不apply。但是 <code>git am</code> 不像 <code>git cherry-pick</code> 一样会显示冲突的地方从而让我们可以修改，很多时候 <code>git am</code> 并不显示冲突，只是让我们修正冲突，这就产生了麻烦。</p>

<!-- more -->


<p>于是上面的文章就很好的解决了这个问题，因为一般产生冲突的时候，并不是所有的改动都有冲突，往往冲突是比较少的（<code>patch</code> 本身是可以智能的自动解决一些冲突的），所以我们就可以先用 <code>git apply</code> 来打patch，并将冲突存为一个单独的文件，最后查看冲突文件再手动将冲突修正就可以了。</p>

<p>引用上面文章中的内容，当 <code>git am</code> 失败的时候，可以这么做：</p>

<p><code>bash
$ git apply PATCH --reject
$ edit edit edit
$ git add FIXED_FILES
$ git am --resolved
</code></p>

<p>当 <code>git am</code> 失败的时候，它会告诉你patch文件被它放在了一个路径下面，所有，你只需要直接去 <code>git apply --reject</code> 这个patch就好了：</p>

<p>``` bash
The copy of the patch that failed is found in&hellip;</p>

<pre><code>    xxxxxx
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（三）]]></title>
    <link href="http://markzhang.cn/blog/2014/04/22/git-gossip-3/"/>
    <updated>2014-04-22T07:58:00+08:00</updated>
    <id>http://markzhang.cn/blog/2014/04/22/git-gossip-3</id>
    <content type="html"><![CDATA[<p>这次来说说有关 <code>no branch</code> 的那些事。</p>

<p>其实之前在<a href="http://markzhang.cn/blog/2014/04/04/git-gossip-1/">Git都在说些啥（一）</a>中已经提过一些有关 <code>no branch</code> 的东西。这次再来看看其他两段git的提示信息，都是与 <code>no branch</code> 有关的。</p>

<!-- more -->


<p>``` bash
Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide$ git ck origin/master
Note: checking out &lsquo;origin/master&rsquo;.</p>

<p>You are in &lsquo;detached HEAD&rsquo; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.</p>

<p>If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:</p>

<p>  git checkout -b new_branch_name</p>

<p>HEAD is now at 82b25d9b1856&hellip; HelloGL: Add missing shader files
Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide$ git b
* (no branch)
  master
  tmp
Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide$ git pull
You are not currently on a branch, so I cannot use any
&lsquo;branch.<branchname>.merge&rsquo; in your configuration file.
Please specify which remote branch you want to use on the command
line and try again (e.g. &lsquo;git pull <repository> <refspec>&rsquo;).
See git-pull(1) for details.
```</p>

<p>第一段信息来自命令 <code>git checkout origin/master</code>。Git的这段唠叨意思就是，哥们你checkout了一个版本，但是没有指定branch的名字，所以哥现在给你创建了一个特殊的branch，名字叫 <code>no branch</code>。这个branch特殊在哪呢，就是你可以在这个branch上工作，可以提交commit，但是将来你一旦离开了这个branch，比如你checkout到其他的branch上去了，那么你就再也回不来了哈。你做的那些commit就找不到了哈。所以哥们现在强烈建议你，以后checkout branch使用 <code>git checkout -b new_branch_name</code>。</p>

<p><strong> 注：</strong> 之前在<a href="http://markzhang.cn/blog/2014/04/04/git-gossip-1/">Git都在说些啥（一）</a>提到过了，使用 <code>git reflog</code> 可以找回你在 <code>no branch</code> 上提交过的commit。前提是git还帮你留着这些commits。</p>

<p>第二段提示信息来自执行 <code>git pull</code> 的时候，之前在<a href="http://markzhang.cn/blog/2014/04/21/git-gossip-2/">Git都在说些啥（二）</a>中已经详细说了 <code>git pull</code> 会出现的这种错误信息。所以，这里想说的是，只要你工作在 <code>no branch</code> 上，那么执行 <code>git pull</code> 的时候，就必须写全了，比如：<code>git pull origin master</code>，这样git才知道怎么去做merge。</p>

<p>说到这里，你可能会问，为什么git要搞这么一个莫名其貌，麻烦无比的 <code>no branch</code> 出来？其实 <code>no branch</code> 是有一些适用的场景的。<code>no branch</code> 相当于是一种临时branch，建立这个branch的唯一原因就是将来我们肯定会放弃掉这个branch，所以在做比如 <code>git rebase</code> 的时候，<code>no branch</code> 就很make sense了。因为我们知道 <code>git rebase</code> 的时候，git需要根据你的指令，将commits重新做排列、修正、squash等等，此时，git就会以第一个需要rebase的commit之前的那个commit为base，checkout到一个 <code>no branch</code> 上去，rebase做完之后，再最终将 <code>no branch</code> 覆盖掉你执行 <code>git rebase</code> 时的branch。所以，在这种场景下，使用 <code>no branch</code> 就比使用一个有名字的branch更加的make sense。</p>

<p>还有一种场景你肯定熟悉，就是使用repo的时候。repo是Google做的一个Python脚本程序，用于管理多个git仓库。你会发现，经常你做完 <code>repo sync</code> 之后，来到其中任意一个git仓库（或者叫git project吧，repo中是称为project的），执行一下 <code>git branch</code>，你会发现你都处在 <code>no branch</code> 上。我的感觉是，repo针对每一个git project，是可以定义 <code>revision</code> 的（在.repo/manifest.xml中可以定义所有的git project，其中就可以针对每个project定义revision）。而这个revision，就是一个git commit的HASH，所以在这种场景下，repo在 <code>git fetch</code> 取得了该project远端的所有更新之后，如何将你本地的文件更新到你指定的revision上？肯定是执行 <code>git checkout &lt;commit hash&gt;</code> 这样的命令了，那么这个时候自然 <code>no branch</code> 就产生了。当然repo也可以很二的约定一个俗气无比的branch名字，比如 <code>git checkout -b this_really_sucks &lt;commit hash&gt;</code>？</p>

<p>其实 <code>no branch</code> 本身没啥，只是由于相比其他的branch，<code>no branch</code> 有一些特殊的地方，所以在 <code>no branch</code> 上工作是，你就经常会收到git的一些抱怨，习惯了就好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（二）]]></title>
    <link href="http://markzhang.cn/blog/2014/04/21/git-gossip-2/"/>
    <updated>2014-04-21T21:33:00+08:00</updated>
    <id>http://markzhang.cn/blog/2014/04/21/git-gossip-2</id>
    <content type="html"><![CDATA[<p>这一次我们来说说 <code>git pull</code> 的时候经常会碰到的一段信息。</p>

<!-- more -->


<p>``` bash
Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide$ git pull
You asked me to pull without telling me which branch you
want to merge with, and &lsquo;branch.tmp.merge&rsquo; in
your configuration file does not tell me, either. Please
specify which branch you want to use on the command line and
try again (e.g. &lsquo;git pull <repository> <refspec>&rsquo;).</p>

<p>See git-pull(1) for details.</p>

<p>If you often merge with the same branch, you may want to
use something like the following in your configuration file:</p>

<pre><code>[branch "tmp"]  
remote = &lt;nickname&gt;  
merge = &lt;remote-ref&gt;  

[remote "&lt;nickname&gt;"]  
url = &lt;url&gt;  
fetch = &lt;refspec&gt;  
</code></pre>

<p>See git-config(1) for details.
```</p>

<p>首先来看一下怎么操作，git就会唠叨上面一段话（假设我们现在在一个git repository的根目录，目前位于master branch）：</p>

<p><code>bash
git branch tmp
git checkout tmp
git pull
</code></p>

<p>上面的三个命令很简单，首先就是基于当前的branch，创建一个新的branch叫 <code>tmp</code>，然后checkout到这个branch，最后执行 <code>git pull</code>。那为什么最后执行 <code>git pull</code> 的时候就会出现上面那一大段信息呢？</p>

<p>其实很简单。我们都知道，<code>git pull</code> 是做两件事情：首先做 <code>git fetch</code>，也就是将远端仓库中的所有改动都取回来；然后就是做 <code>git merge</code>，也就是将远端仓库的某个branch和我们当前本地所在的branch做一次merge。</p>

<p>所以，当 <code>git pull</code> 做第二件事情，也就是 <code>git merge</code> 的时候，它需要知道将本地的当前所在的这个branch和远端的哪个branch进行merge。当git不知道需要和远端的哪个branch进行merge时，就会出现上述的错误信息了。</p>

<p>解决办法有两个：</p>

<ul>
<li><p>写全 <code>git pull</code> 命令，比如 <code>git pull origin master</code>。这样git就知道跟 <code>origin</code> 这个remote git仓库的master branch进行merge。</p></li>
<li><p>使用 <code>git checkout -b &lt;branch name&gt; &lt;remote refs&gt;</code> 来创建branch，比如 <code>git checkout -b tmp origin/master</code>。这里我们在checkout的时候，明确指定了checkout名为origin的remote git仓库中的master branch，所以将来我们在这个tmp branch上进行 <code>git pull</code> 的时候，git自然就知道去和哪个远端的branch merge了。</p></li>
</ul>


<p><strong> NOTE：</strong> 事实上，<code>git branch</code> / <code>git checkout</code>，也可以使用 <code>-t</code> 这个参数来明确指定新的本地branch需要”track“哪个branch。</p>

<p>最后提一下，一开头git的那段出错信息中提到的一些所谓的配置项：</p>

<p>``` bash
If you often merge with the same branch, you may want to
use something like the following in your configuration file:</p>

<pre><code>[branch "tmp"]
remote = &lt;nickname&gt;
merge = &lt;remote-ref&gt;
</code></pre>

<p>```</p>

<p>其实，这段信息的意思就是，git无法在你的git仓库的根目录下的 <code>.git/config</code> 中找到tmp这个branch的merge信息，也没有在你的全局git配置：<code>$HOME/.gitconfig</code> 中找到。</p>

<p>而对于一个没有上述问题的branch，比如在本文所举的例子中，master branch，在 <code>.git/config</code> 中就有这样的设置：</p>

<p>``` bash
[branch &ldquo;master&rdquo;]</p>

<pre><code>remote = origin
merge = refs/heads/master
</code></pre>

<p>```</p>

<p>所以可以看到，其实git的逻辑很简单，只是我们需要确切的知道它究竟在干些啥，这样也就能理解它的抱怨了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git都在说些啥（一）]]></title>
    <link href="http://markzhang.cn/blog/2014/04/04/git-gossip-1/"/>
    <updated>2014-04-04T14:28:00+08:00</updated>
    <id>http://markzhang.cn/blog/2014/04/04/git-gossip-1</id>
    <content type="html"><![CDATA[<p>当我们在做某些git操作的时候，git有的时候会给出一段一段的提示信息，而往往这些信息都是比较重要的。因为按照UNIX的设计哲学，执行成功或是无害操作，这些都是不会有任何提示信息的。做Linux的Hackers也奉行这种哲学，所以当git开始唠叨的时候，你真的需要关注一下它到底在罗嗦些啥。</p>

<p>这篇文章描述的就是某一个git的唠叨。</p>

<!-- more -->


<p>有的时候，特别是当执行 <code>git checkout</code> 的时候，你可能会看到这样的信息：</p>

<blockquote><p>Warning: you are leaving 30 commits behind, not connected to
any of your branches:</p>

<p>2553655 Merge branch &lsquo;master&rsquo; into prod</p>

<p>6b07300 Fix build</p>

<p>&hellip; and 28 more.</p>

<p>If you want to keep them by creating a new branch, this may be a good time
to do so with:</p>

<p>git branch new_branch_name 654646464</p></blockquote>

<p>注：以上信息来自：<a href="https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM">https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM</a></p>

<p>所以git的这段罗嗦到底是什么意思？</p>

<p>发生这种情况时，你一般工作在 <code>no branch</code> 上，也就是说，这个branch没有名字。也就是说，一旦你发生了 <code>git checkout</code> 操作之后，无法你是checkout到了一个有名字的branch，还是没有指定checkout的branch，就是更新本地的文件，这个 <code>no branch</code> 就再也回不去了，因为这个branch没有名字，所以你无法告诉git，我需要再回到这个branch上去。</p>

<p>基于此，如果你在 <code>no branch</code> 上有一些commit（无论是你自己commit的，还是你cherry-pick的），那么，当发生 <code>git checkout</code> 的时候，git就会给出上面的信息，告诉你，如果你现在不做点事的话，之前你所在的 <code>no branch</code> 就再也回不去了，所以，这个时候你最好建一个branch来保证你还能回到 <code>no branch</code> 上去：</p>

<blockquote><p>If you want to keep them by creating a new branch, this may be a good time
to do so with:</p>

<p>git branch new_branch_name 654646464</p></blockquote>

<p>事实上，如果你真的碰到了这种情况，而且当git给出上面一段信息告诉了你利害关系之后，你仍然义无反顾的无视了git的警告，没有创建一个有名字的branch来保存之前你在 <code>no branch</code> 上的工作成果，最终在某一天你想起来，想要找回N久之前在 <code>no branch</code> 上的一些commit的话，你仍然还有一根救命稻草：</p>

<p><code>git reflog</code></p>

<p>基本上，<code>git reflog</code> 将给出所有“失联”的commit。也就是说，这些commit不属于任何branch（no connection），从git数据库中删掉也无所谓。</p>

<p>所以，你最好期望 <code>git reflog</code> 中有你需要的commit，因为就像上面所说，这些commit本就是可以被安全删除的commit，如果你做过 <code>git gc</code>，或者是git自动做过 <code>git gc</code> 的话（git有一套逻辑来判断什么时候应该做一次gc），这些commit就真的没有了。</p>

<p>注：上面一段说的有点严重，事实上，git对待失联的commit，有一个expire time的设定，所以也不是说一旦执行过 <code>git gc</code>，这些commit就真的没有了。但是为了安全起见，对于重要的commit，还是需要注意不要丢了。</p>
]]></content>
  </entry>
  
</feed>
