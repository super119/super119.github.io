<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2014-01-20T21:47:29+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git常见命令和配置]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/20/git-tips/"/>
    <updated>2013-11-20T21:01:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/20/git-tips</id>
    <content type="html"><![CDATA[<h2>常用配置</h2>

<p>``` cfg git常用配置
[color]</p>

<pre><code>    ui = auto
</code></pre>

<p>[user]</p>

<pre><code>    name = Mark Zhang
    email = xxxx@xxxx.xxx
</code></pre>

<p>[core]</p>

<pre><code>    editor = vim
    abbrev = 12
    pager = less -X -F
</code></pre>

<p>[diff]</p>

<pre><code>    tool = vimdiff
    renames = true
</code></pre>

<p>[difftool]</p>

<pre><code>    prompt = No
</code></pre>

<p>[sendemail]</p>

<pre><code>    chainreplyto = false
    smtpserver = xxxxxxxx
    smtpencryption = tls
    from = Mark Zhang &lt;xxxx@xxx.xxx&gt;
    envelopesender = auto
</code></pre>

<p>[alias]</p>

<pre><code>    s = status
    cp = cherry-pick
    ck = checkout
    b = branch
    lo = log --oneline
    dt = difftool
</code></pre>

<p>```</p>

<!-- more -->


<h2>常用命令</h2>

<ul>
<li><code>git remote add &lt;name&gt; &lt;url&gt;</code></li>
</ul>


<p>如果要添加本地的一个git repository的话，<url>填写成 <code>git repository的路径/.git</code> 即可。</p>

<ul>
<li><p><code>git fetch -p &lt;remote name, e.g: origin&gt;</code></p></li>
<li><p><code>git show &lt;commit id&gt;</code></p></li>
<li><p><code>git push origin HEAD:next</code></p></li>
</ul>


<p>Push本地HEAD commit对应的branch到名为 <code>origin</code> 的远端仓库的 <code>next</code> branch上。</p>

<ul>
<li><code>git push origin +HEAD:next / git push -f origin HEAD:next</code></li>
</ul>


<p>所谓的Force update，也就是用本地的commit历史覆盖远端的。</p>

<ul>
<li><code>git push origin :next</code></li>
</ul>


<p>删除远端仓库的 <code>next</code> branch。</p>

<ul>
<li><code>git push --tags</code></li>
</ul>


<p>Push本地的tag列表到远端。</p>

<ul>
<li><p><code>git format-patch -&lt;N&gt;</code></p></li>
<li><p><code>git format-patch &lt;commit id&gt;^..&lt;commit id&gt;</code></p></li>
</ul>


<p>这个命令可以用来为一个指定的commit生成patch。</p>

<ul>
<li><p><code>git format-patch --subject-prefix 'PATCH V2' --cover-letter</code></p></li>
<li><p><code>git send-email --to=XXX --to=XXX --cc=XXX *.patch</code></p></li>
<li><p><code>git send-email --no-signed-off-cc --to=XXX --to=XXX --cc=XXX *.patch</code></p></li>
<li><p><code>git rebase -i &lt;commit id&gt;</code></p></li>
<li><p><code>git checkout &lt;branch&gt; -- &lt;file path&gt;</code></p></li>
</ul>


<p>这个命令将指定branch中的指定文件checkout出来，更新当前working tree中的对应文件。</p>

<ul>
<li><code>git show &lt;branch&gt;:&lt;file path&gt; &gt;&amp; &lt;filename&gt;</code></li>
</ul>


<p>这个命令将指定branch中的指定文件checkout出来，并存到 <code>&lt;filename&gt;</code> 指定的路径上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linus说，请将这个配置加到你的.gitconfig]]></title>
    <link href="http://www.markzhang.cn/blog/2013/11/07/linus-git-config/"/>
    <updated>2013-11-07T18:18:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/11/07/linus-git-config</id>
    <content type="html"><![CDATA[<p>近日Linus说，请将 <code>git config core.abbrev 12</code> 加到你的git repository中。事实上，这个config很有意义，可以加到你的全局git config中：</p>

<!-- more -->


<p><code>git config --global core.abbrev 12</code>。</p>

<p>原因简单来说就是，git默认的7个字符的短HASH表示方法经常导致冲突，所以Linus建议改成12个字符。原文引用如下：</p>

<blockquote><p>Linus jumped in to say that he would like everybody to run this command in their repositories:</p>

<p>   git config core.abbrev 12</p>

<p>That causes git to abbreviate commit hashes to 12 characters. The default of seven characters is too small to prevent occasional hash collisions in the kernel; it was, he said, a big mistake made early in git&rsquo;s history. He also noted that he spends a lot of time fixing up hashes in patch, many of which are &ldquo;clearly bogus.&rdquo; Most of the problems, most likely, are caused by the rebasing of trees.</p></blockquote>
]]></content>
  </entry>
  
</feed>
