<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: kernel | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/kernel/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2015-07-28T11:05:55+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kernel的ZONE_DMA]]></title>
    <link href="http://www.markzhang.cn/blog/2015/07/28/zone-dma/"/>
    <updated>2015-07-28T10:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/07/28/zone-dma</id>
    <content type="html"><![CDATA[<p>转载自：<a href="https://lkml.org/lkml/2011/7/6/249">https://lkml.org/lkml/2011/7/6/249</a></p>

<!-- more -->


<p>On Wed, Jul 06, 2011 at 11:19:00AM -0500, Christoph Lameter wrote:</p>

<blockquote><p>What I described is the basic memory architecture of Linux. I am not that
familiar with ARM and the issue discussed here. Only got involved because
ZONE_DMA was mentioned. The nature of ZONE_DMA is often misunderstood.</p>

<p>The allocation of the memory banks for the Samsung devices has to fit
somehow into one of these zones. Its probably best to put the memory banks
into ZONE_NORMAL and not have any dependency on ZONE_DMA at all.</p></blockquote>

<p>Let me teach you about the ARM memory management on Linux.</p>

<p>Firstly, lets go over the structure of zones in Linux.  There are three
zones &ndash; ZONE_DMA, ZONE_NORMAL and ZONE_HIGHMEM.  These zones are filled
in that order.  So, ZONE_DMA starts at zero.  Following on from ZONE_DMA
is ZONE_NORMAL memory, and lastly ZONE_HIGHMEM.</p>

<p>At boot, we pass all memory over to the kernel as follows:</p>

<ol>
<li><p>If there is no DMA zone, then we pass all low memory over as ZONE_NORMAL.</p></li>
<li><p>If there is a DMA zone, by default we pass all low memory as ZONE_DMA.
This is required so drivers which use GFP_DMA can work.</p>

<p>Platforms with restricted DMA requirements can modify that layout to
move memory from ZONE_DMA into ZONE_NORMAL, thereby restricting the
upper address which the kernel allocators will give for GFP_DMA
allocations.</p></li>
<li><p>In either case, any high memory as ZONE_HIGHMEM if configured (or memory
is truncated if not.)</p></li>
</ol>


<p>So, when we have (eg) a platform where only the <em>even</em> MBs of memory are
DMA-able, we have a 1MB DMA zone at the beginning of system memory, and
everything else in ZONE_NORMAL.  This means GFP_DMA will return either
memory from the first 1MB or fail if it can&rsquo;t.  This is the behaviour we
desire.</p>

<p>Normal allocations will come from ZONE_NORMAL <em>first</em> and then try ZONE_DMA
if there&rsquo;s no other alternative.  This is the same desired behaviour as
x86.</p>

<p>So, ARM is no different from x86, with the exception that the 16MB DMA
zone due to ISA ends up being different sizes on ARM depending on our
restrictions.</p>
]]></content>
  </entry>
  
</feed>
