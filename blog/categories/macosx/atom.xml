<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacOSX | Make Things Cool]]></title>
  <link href="http://markzhang.cn/blog/categories/macosx/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2016-09-16T11:40:29+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSTask Tips (swift)]]></title>
    <link href="http://markzhang.cn/blog/2016/04/12/swift-cocoa-nstask/"/>
    <updated>2016-04-12T12:51:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/04/12/swift-cocoa-nstask</id>
    <content type="html"><![CDATA[<p>NSTask是常用的一个Foundation class，它相当于Linux中的popen，可以用来fork执行一个程序，然后将程序的输入输出重定向。然而我在使用这个class的时候，遇到了一些问题，记录在此。</p>

<!-- more -->


<h2>如何取得程序的输出（比如stdout）</h2>

<p>这个比较容易，比如：</p>

<p>``` java
let task = NSTask()
task.launchPath = xxx
task.arguments = xxx</p>

<p>let outPipe = NSPipe()
task.standardOutput = outPipe
let errPipe = NSPipe()
task.standardError = errPipe</p>

<p>outPipe.fileHandleForReading.readabilityHandler = {</p>

<pre><code>(handle: NSFileHandle) in
let data = handle.readDataOfLength(128)
&lt;your String&gt;.appendContentsOf(String(data: data, encoding: NSUTF8StringEncoding)!)
</code></pre>

<p>}</p>

<p>task.launch()
```</p>

<p>当然你也可以用NSPipe.fileHandleForReading的readToEndOfFile来一次性读出来（等待task执行完毕之后）。</p>

<h2>如何知道程序执行结束</h2>

<p>根据NSTask的manual，有两种方法：</p>

<ul>
<li><p>设置NSTask的terminationHandler</p></li>
<li><p>使用NSNotificationCenter，注册监听消息：NSTaskDidTerminateNotification</p></li>
</ul>


<p>这两种方法都可以，但是有一些区别：</p>

<ul>
<li><p>terminationHandler是在NSTask的线程中被调用的，所以如果我们要在程序执行结束后去update UI，那么在这里做是不行的，运行的时候xcode会告诉你，UI被另外一个background thread修改，会出一个assertion。</p></li>
<li><p>NSTaskDidTerminateNotification就没有上述的问题，因为我们注册的NSTaskDidTerminateNotification的observer就是在程序的主线程（main）被调用的。</p></li>
</ul>


<p>我们可以通过在terminationHandler和NSTaskDidTerminateNotification observer函数中加入这样的代码来看出区别：</p>

<p><code>java
NSLog("Current thread is: %@", NSThread.currentThread())
</code></p>

<p>通过打印当前thread的信息，就可以看出terminationHandler是在一条非main的线程中被call的，而notification则不是。</p>

<p>由此可以猜测，NSTask应该是首先create一条thread，然后在这条thread中去执行fork，最后调用类似waitpid这样的函数等待被执行的程序执行完毕，并且同时调用我们注册的terminationHandler。</p>

<p>需要注意的是，注册的notification observer一定要及时的remove（可以在observer function里面去remove），否则一旦你多注册一次，你的observer function就会被多call一次。很显然，notification center是用一张list来记录所有的observer的，当有notification发生时，这个list上所有的observer function都会被call一遍。</p>

<p>此外还有一点：如果我们有设置terminationHandler，那么NSTaskDidTerminateNotification就不会被发送了。</p>

<h2>如何得知程序的return value</h2>

<p>按照NSTask的manual，可以通过读取：terminationStatus来得知。但是我做下来发现这个property读取出来的值不一定正确。</p>

<p>也就是说，terminationStatus和我们手动执行：<code>run xxx program; echo $?</code> 这样出来的结果是不同的。</p>

<p>目前还不知道这个问题的原因和解决方法。</p>

<h2>有关Swift的selector</h2>

<p>在注册notification的时候，需要填写一个名为selector的param，也就是我们的notification observer的function。</p>

<p>在swift 2.1中，这里可以直接写function的名字（作为一个字符串），但是一定要注意和objective-C一样，function name是要带参数的，比如：<code>myNotificationObserverFunction:</code>，最后的冒号就表示这个function有一个参数。</p>

<p>漏写这个冒号就会导致runtime 程序无法找到这个function：unknown selector&hellip;.</p>

<p>在Swift 2.2中，有一个新的语法可以显式的生成一个selector：<code>#selector(function name)</code>，不过貌似目前最新的Xcode还只支持到swift 2.1，所以目前还只能用上面的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Winbox for Mac OS X，修改界面字体]]></title>
    <link href="http://markzhang.cn/blog/2014/07/24/winbox-mac-change-font/"/>
    <updated>2014-07-24T18:19:00+08:00</updated>
    <id>http://markzhang.cn/blog/2014/07/24/winbox-mac-change-font</id>
    <content type="html"><![CDATA[<p>RouterOS（或简称ROS）是拉脱维亚的Mikrotik开发的一个强大到变态（对于个人用户而言）的路由系统。基于Linux，支持x86和MIPS（routerboard）。也就是说，你可以找一台PC来，装上routeros，就变身成了一台路由器。所以也有很多人称RouterOS为软路由。</p>

<p>Winbox是Mikrotik开发的RouterOS的管理工具（客户端）。当然，RouterOS也有网页版和命令行（终端，支持SSH，串口等）的管理界面，但是Winbox是相对来说最直观和好用的（当然用多了肯定到最后就是纯命令行了）。</p>

<p>有一个问题就是，Winbox只有windows版的。在Mac和Linux上，要使用wine来运行（或安装虚拟机）。</p>

<!-- more -->


<p>对于Mac OS X，网上有爱好者已经做好了一个包，下载下来安装即可，不用自己去折腾安装和配置 <code>wine</code>。地址在这里：</p>

<p><a href="http://wiki.mikrotik.com/wiki/MikroTik_WinBox_for_Mac_StandAlone">http://wiki.mikrotik.com/wiki/MikroTik_WinBox_for_Mac_StandAlone</a></p>

<p>的确很好用，就是有一个问题，字体太难看。看起来用的是默认的宋体，所以英文显示效果不忍直视。</p>

<p>所以很自然想修改字体。说起修改这个字体，其实就是修改windows的默认字体。参考了这篇文章：</p>

<p><a href="http://linfan.info/blog/2012/03/01/wine-mac/">http://linfan.info/blog/2012/03/01/wine-mac/</a></p>

<p>具体可以这么做：</p>

<ul>
<li>找一个喜欢的字体（Mac OS X自带了很多字体，如果安装了Office for Mac，那微软的很多字体也都有了），拷贝到 <code>/Applications/Winbox.app/drive_c/windows/Fonts</code> 目录下。比如我用的是微软雅黑：</li>
</ul>


<p><code>bash
cp /Library/Fonts/Microsoft/Microsoft\ Yahei.ttf /Applications/WinBox.app/drive_c/windows/Fonts
</code></p>

<ul>
<li>使用Wine运行注册表编辑器。这个打包好的Winbox for Mac，使用的是Wineskin（就是一个wine的wrapper，这样就把winbox.exe做成了Mac上的Winbox.app），所以这样：</li>
</ul>


<p><code>bash
open /Applications/WinBox.app/Wineskin.app/
</code></p>

<p>然后点击 <code>Advanced</code> 按钮，再选择 <code>Tools</code> 标签页，最后点击 <code>Registry Editor (regedit)</code> 按钮，出现windows的注册表编辑器，导入这个注册表：</p>

<p>``` ini
REGEDIT4</p>

<p>[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]
&ldquo;Microsoft Yahei&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Comic Sans MS&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Courier&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Courier New&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Fixedsys&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Helv&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Helvetica&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Lucida Console&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Lucida Sans&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Microsoft Sans Serif&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MingLiU&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;PMingLiu&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS Shell Dlg&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS Shell Dlg 2&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS Dialog&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS Gothic&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS PGothic&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS UI Gothic&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS Mincho&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;MS PMincho&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;SimHei&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;SimSun&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;NSimSun&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;System&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Tahoma&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Times&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Times New Roman&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Tms Rmn&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Trebuchet MS&rdquo;=&ldquo;Microsoft Yahei&rdquo;
&ldquo;Verdana&rdquo;=&ldquo;Microsoft Yahei&rdquo;
```</p>

<p>这样就OK了，再次打开Winbox，终于看到舒服的界面了：</p>

<p><img src="/downloads/image/mac-winbox-change-font.png" alt="Mac Winbox changed font" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X（Mavericks）共享VPN给其他设备]]></title>
    <link href="http://markzhang.cn/blog/2014/07/17/mac-share-vpn-connection/"/>
    <updated>2014-07-17T11:22:00+08:00</updated>
    <id>http://markzhang.cn/blog/2014/07/17/mac-share-vpn-connection</id>
    <content type="html"><![CDATA[<p>之前写过一篇文章叫“Chnroutes的使用“，主要说的是如何通过使用 <code>chnroutes</code> 从而将国内和国外的路由分开，国内走正常路由，国外则走VPN。现在的问题是，如果在一台电脑上有了VPN之后，如何将这个VPN share给其他设备，比如PS3？</p>

<!-- more -->


<p>首先很自然想到的是Mac OS X（Mavericks）自带的 <code>Internet Sharing</code> 功能：</p>

<p><img src="/downloads/image/mac-internet-sharing.png" alt="Mac OS X Internet Sharing" /></p>

<p>但是通过使用后发现有如下的问题：</p>

<ol>
<li><p>你需要有两个网络设备，才能开始share。上面的截图也可以看到，你要选择一个 <code>From</code> 的设备，再选择 <code>To</code> 的网络设备（也就是说其他设备是通过本机的这个网络设备连接的）。</p></li>
<li><p>当然你可以说，VPN在Mac OS X里面也是一个单独的网络设备啊。是，但是通过试验，如果你只有一个网络设备，比如WIFI，那么就意味着我们既需要通过这个WIFI去连接VPN，还要通过这个WIFI让其他的设备能够连到本机，这是没法做到的。试验的结果就是，当你开了 <code>Internet Sharing</code> 之后，你的VPN就拨不上去（一拨就掉）；当你开了VPN之后，<code>Inetnet Sharing</code> 一开你的VPN就掉。事实上，如果通过WIFI来share的话，你会发现Mac OS X会将WIFI配置成一个AP，所以自然一旦被enable，你的VPN就掉了。</p></li>
<li><p>就算以上两点对你来说都没问题，这第三点就是绝望的来源：Mac OS X不会forward VPN的数据。也就是说，你想要通过Mac OS X的这个 <code>Internet Sharing</code> 功能来share你的VPN的话，是不可行的。</p></li>
</ol>


<p>所以没办法还是通过万能的Google来寻找答案，答案在这里：</p>

<p><a href="http://rodrigo.sharpcube.com/2010/06/20/using-and-sharing-a-vpn-connection-on-your-mac/">http://rodrigo.sharpcube.com/2010/06/20/using-and-sharing-a-vpn-connection-on-your-mac/</a></p>

<p>基本上就是需要我们写脚本来实现，上面这篇文章中，VPN使用的是OpenVPN，我测试的时候，使用的是PPTP的VPN，所以根据上文中 <code>Troubleshooting</code> 一节的描述，我做了这么两个脚本：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>开启VPN共享 bash (share-pptp-vpn.sh)</span> <a href='/downloads/code/share-pptp-vpn.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>natd -same_ports -use_sockets -unregistered_only -dynamic -interface ppp0 -clamp_mss
</span><span class='line'>ipfw -f flush
</span><span class='line'>ipfw add divert natd ip from any to any via ppp0
</span><span class='line'>ipfw add pass all from any to any
</span><span class='line'>sysctl -w net.inet.ip.forwarding<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>关闭VPN共享 bash (off-share-pptp-vpn.sh)</span> <a href='/downloads/code/off-share-pptp-vpn.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>killall natd
</span><span class='line'>ipfw -f flush
</span><span class='line'>sysctl -w net.inet.ip.forwarding<span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>所以当拨上了VPN之后，运行开启VPN共享那个脚本就OK了。在PS3上将网关指到Macbook的IP地址就可以了。</p>

<p>最后一个遗留问题。Mac OS X的VPN高级设定中有这么一个checkbox：</p>

<p><img src="/downloads/image/mac-send-traffic-over-vpn.png" alt="Send all traffic over VPN" /></p>

<p>这个 <code>Send all traffic over VPN</code> 我不太理解是什么意思，是指本地NAT网络的地址不走VPN么？还是Mac OS X内置了类似 <code>chnroutes</code> 这样的功能？</p>

<p>有意思的是，有的时候如果enable了这个选项，我发现PS3连接网络就会出现问题。而如果VPN已经拨上去了，再去enable这个选项貌似就没有影响。</p>

<p>没有深究这个，所以这是目前的一个遗留问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X(Mavericks) CommandLineTools 和 osx-gcc-installer]]></title>
    <link href="http://markzhang.cn/blog/2014/07/03/apple-cli-and-osx-gcc-installer/"/>
    <updated>2014-07-03T13:22:00+08:00</updated>
    <id>http://markzhang.cn/blog/2014/07/03/apple-cli-and-osx-gcc-installer</id>
    <content type="html"><![CDATA[<p>Mac OS X Command Line Tools是Mac开发人员经常会遇到的一个问题。Command Line Tools（以下简称CLI）其实就是一堆Unix/Linux上开发需要的基础东西，比如gcc, make, g++等。在Mac上开发，如果使用Xcode的话，是不需要这些东西的，因为Xcode已经集成了这些东西，在Xcode的IDE中直接进行编译调试，所以用户不需要关心这些东西有没有，在哪。</p>

<p>但是如果我们在开发自己的基于Makefile的程序时，或者是要porting UNIX/Linux上的一些程序时，这些东西就变成必须的了。</p>

<!-- more -->


<p>苹果官方的CLI在苹果的网站上可以下载到，地址不需要自己去找，如果你已经安装了Xcode的话，那启动Xcode，选择菜单：<code>Xcode -&gt; Open Develop Tool -&gt; More Develop Tools</code>，然后浏览器就会被启动并来到下载苹果CLI的地方。下载dmg然后安装就完了。</p>

<p>苹果的CLI安装完成之后，其实是安装了两个pkg：</p>

<p><code>bash
com.apple.pkg.CLTools_Executables
com.apple.pkg.MacOSX10_9_SDK
</code></p>

<p>用 <code>pkgutils --files &lt;pkg name&gt;</code> 就可以看到安装了哪些文件，在什么地方。所以CLTools_Executables这个package，是安装在 <code>/Library/Developer</code> 目录下的，所以如果要使用gcc的话，把路径：<code>/Library/Developer/CommandLineTools/usr/bin/</code> 添加到PATH中去。</p>

<p>你可以看到，苹果的这个CLI，有很多llvm, gcc, clang这样的东西，这里有篇文章解释的很好：</p>

<p><a href="http://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html">http://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html</a></p>

<p>说来就是这么简单的事情，但是你如果在Google上尝试寻找答案的话，你会发现这些答案基本上在Mac OS X 10.9（Mavericks）上都没法用，典型的答案有：</p>

<ul>
<li>运行 <code>xcode-select --install</code>，反正在我的机器上，<code>xcode-select</code> 压根没有 <code>--install</code> 这个option。</li>
<li>执行程序：<code>/System/Library/CoreServices/Install Command Line Developer Tools.app</code>，其实这就是 <code>xcode-select --install</code> 去执行的程序，在我的Mac上运行没反应。</li>
<li>还有一些文章说直接在终端运行gcc，就会跳出一个对话框让你安装CLI的，我也没有碰到这么神奇的事情。</li>
</ul>


<p>现在再来说说 <code>osx-gcc-installer</code>。</p>

<p><code>osx-gcc-installer</code> 是github上一个开源的东西，估计是作者自己编译了苹果的一些open source的东西得到的：</p>

<p><a href="https://github.com/kennethreitz/osx-gcc-installer">https://github.com/kennethreitz/osx-gcc-installer</a></p>

<p>我对这个东西的理解是，在Mac OS X Lion/Mountain Lion之前，要安装苹果的CLI，是需要首先安装Xcode的（貌似是需要在安装了Xcode之后，在Xcode中有一个地方可以下载CLI），所以为了让我们在不安装Xcode的前提下得到gcc/make，就有了这个项目。该项目的README文件印证了这一点：</p>

<blockquote><p>For Lion and Mountain Lion users, Apple now provides an official Command Line Tools for Xcode package that you can install without needing to install Xcode itself! You can download it from Apple&rsquo;s developer site (free registration required) and search for &ldquo;Command Line Tools&rdquo;.</p></blockquote>

<p>之前我也安装过这个东西，现在如上面所说，我已经安装了苹果官方的CLI，所以很自然的我就想卸载掉这个东西，照例Google了一大圈之后，发现一般都是这么说的：</p>

<blockquote><p>According to the creator of the package, you can install Xcode on top of it since it is just a subset. Then you can use the uninstall command to completely remove:</p>

<p>sudo /Developer/Library/uninstall-devtools &mdash;mode=all</p>

<p>Definitely not a quick uninstall, but it should work.</p></blockquote>

<p>以上摘自StackOverflow: <a href="http://stackoverflow.com/questions/9332196/how-to-remove-the-osx-gcc-installer">http://stackoverflow.com/questions/9332196/how-to-remove-the-osx-gcc-installer</a></p>

<p>但事实上，这个做法在Mavericks上也是不行的，首先，我压根就没有 <code>/Developer</code> 这个目录，据说是Xcode从4.3开始就是一个“绿色软件”，所有东西都在 <code>/Applications/Xcode.app</code> 下面了。</p>

<p>此外，事实上我之前的确装过老版本的Xcode，在安装了 <code>osx-gcc-installer</code> 之后，的确有 <code>/Developer</code> 这个目录，但是运行了那个脚本之后，什么事情都没发生。<code>/usr/bin/gcc, /usr/bin/llvm-gcc-4.2</code> 这些文件还在那。</p>

<p>所以还是自己想办法了，通过 <code>pkgutils --expand GCC-10.7-v2.pkg tmp</code> ，可以在 <code>GCC-10.7-v2.pkg</code> 解开（这个pkg也就是osx-gcc-installer在Mac OS X 10.8上的安装文件），可以看到这个pkg包含了9个package：</p>

<p><code>bash
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DevSDK.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DeveloperToolsCLI.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DeveloperToolsSystemSupport.pkg
-rw-r--r--  1 mark  staff   6.7K  8 12  2011 Distribution
drwxr-xr-x  3 mark  staff   102B  7  3 14:00 Resources
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 VersionedDeveloperToolsSystemSupport.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 X11SDK.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 XcodeUserSystemSupport.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 clang.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 gcc4.2.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 llvm-gcc4.2.pkg
</code></p>

<p>所以我使用 UninstallPKG 这个软件将这9个packag都删除掉就OK了。UninstallPKG是收费软件，售价9.99美元，试用版只能执行三次Uninstall，不过通过使用我发现不是只能uninstall 3个package，而是限制只能使用3次，也就是说，你可以一次选择多个package一并删除。</p>

<p>所以打开UninstallPKG，选择这9个package然后uninstall即可。注意这9个package的包名是上述名字后面都加了一个 <code>Leo</code>（估计是Snow Leopad的意思）。</p>

<p><img src="/downloads/image/uninstallpkg.png" alt="UninstallPKG" /></p>

<p>所以到此简单来说，现在由于苹果提供了官方的CLI，所以其实 <code>osx-gcc-installer</code> 这个东西已经不再需要了。除非有一些你需要的其他东西依赖它。貌似现在新版的 HomeBrew 也是需要苹果的CLI而不是osx-gcc-installer了。<code>osx-gcc-installer</code> 的TroubleShooting是这样说的：</p>

<blockquote><p>Do not install this if you already have Xcode installed! Mixing Xcode and osx-gcc-installer is known to cause various difficult-to-diagnose problems and is not recommended.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Mac OS X上的Chrome添加SSL证书]]></title>
    <link href="http://markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification/"/>
    <updated>2014-03-25T21:49:00+08:00</updated>
    <id>http://markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification</id>
    <content type="html"><![CDATA[<p>Chrome在访问自签名SSL证书的网站时，会给出一个warning的页面，每次都要去点一下那个 <code>Proceed</code> 按钮特烦。每天点一次，日积月累下来每年也要花不少时间来点这个破玩意。Chrome就不能聪明一点来个诸如”记住我的选择“这样的按钮么？</p>

<p>折腾总是发生在忍无可忍的时候，幸好要解决这个问题不麻烦。</p>

<!-- more -->


<ul>
<li><p>首先就是把SSL证书导出了。这个非常容易，访问一下有SSL warning的那个网站，在Chrome给出的warning页面，地址栏的开头有一个被划了斜线的https，点那里就可以看到证书的信息，从而可以将证书导出出来。</p></li>
<li><p>然后就是导入这个证书了。直接在Mac OS X的应用列表中启动 <code>Keychain Access</code>，当然你也可以在Chrome里面选择Settings &ndash;> Advanced settings &ndash;> Manage Certification，这样出来的就是Mac OS X的 <code>Keychain Access</code> 这个应用程序。</p></li>
</ul>


<p><img src="/downloads/image/keychain-access.png" alt="Keychain Access" /></p>

<ul>
<li><p>在 <code>Keychain Access</code> 的界面中，点击左下的 + 按钮，选择刚才得到的SSL证书，就将该证书导入了。</p></li>
<li><p>最后我们要选择 <code>Always Trust</code> 这个证书，否则SSL warning还是会有。在 <code>Keychain Access</code> 中，双击刚才导入的证书，在出现的对话框中，展开 <code>Trust</code> 那个部分，然后选择 <code>Always Trust</code> 就可以了。比如下图就是12306网站的SSL证书：</p></li>
</ul>


<p><img src="/downloads/image/keychain-always-trust.png" alt="Always trust SSL certification" /></p>

<ul>
<li>重启Chrome，再访问那个网站，就没有SSL warning了。</li>
</ul>

]]></content>
  </entry>
  
</feed>
