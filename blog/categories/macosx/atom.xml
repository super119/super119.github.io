<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MacOSX | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/macosx/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2014-07-23T18:38:41+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mac OS X（Mavericks）共享VPN给其他设备]]></title>
    <link href="http://www.markzhang.cn/blog/2014/07/17/mac-share-vpn-connection/"/>
    <updated>2014-07-17T11:22:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/07/17/mac-share-vpn-connection</id>
    <content type="html"><![CDATA[<p>之前写过一篇文章叫“Chnroutes的使用“，主要说的是如何通过使用 <code>chnroutes</code> 从而将国内和国外的路由分开，国内走正常路由，国外则走VPN。现在的问题是，如果在一台电脑上有了VPN之后，如何将这个VPN share给其他设备，比如PS3？</p>

<!-- more -->


<p>首先很自然想到的是Mac OS X（Mavericks）自带的 <code>Internet Sharing</code> 功能：</p>

<p><img src="/downloads/image/mac-internet-sharing.png" alt="Mac OS X Internet Sharing" /></p>

<p>但是通过使用后发现有如下的问题：</p>

<ol>
<li><p>你需要有两个网络设备，才能开始share。上面的截图也可以看到，你要选择一个 <code>From</code> 的设备，再选择 <code>To</code> 的网络设备（也就是说其他设备是通过本机的这个网络设备连接的）。</p></li>
<li><p>当然你可以说，VPN在Mac OS X里面也是一个单独的网络设备啊。是，但是通过试验，如果你只有一个网络设备，比如WIFI，那么就意味着我们既需要通过这个WIFI去连接VPN，还要通过这个WIFI让其他的设备能够连到本机，这是没法做到的。试验的结果就是，当你开了 <code>Internet Sharing</code> 之后，你的VPN就拨不上去（一拨就掉）；当你开了VPN之后，<code>Inetnet Sharing</code> 一开你的VPN就掉。事实上，如果通过WIFI来share的话，你会发现Mac OS X会将WIFI配置成一个AP，所以自然一旦被enable，你的VPN就掉了。</p></li>
<li><p>就算以上两点对你来说都没问题，这第三点就是绝望的来源：Mac OS X不会forward VPN的数据。也就是说，你想要通过Mac OS X的这个 <code>Internet Sharing</code> 功能来share你的VPN的话，是不可行的。</p></li>
</ol>


<p>所以没办法还是通过万能的Google来寻找答案，答案在这里：</p>

<p><a href="http://rodrigo.sharpcube.com/2010/06/20/using-and-sharing-a-vpn-connection-on-your-mac/">http://rodrigo.sharpcube.com/2010/06/20/using-and-sharing-a-vpn-connection-on-your-mac/</a></p>

<p>基本上就是需要我们写脚本来实现，上面这篇文章中，VPN使用的是OpenVPN，我测试的时候，使用的是PPTP的VPN，所以根据上文中 <code>Troubleshooting</code> 一节的描述，我做了这么两个脚本：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>开启VPN共享 bash (share-pptp-vpn.sh)</span> <a href='/downloads/code/share-pptp-vpn.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>natd -same_ports -use_sockets -unregistered_only -dynamic -interface ppp0 -clamp_mss
</span><span class='line'>ipfw -f flush
</span><span class='line'>ipfw add divert natd ip from any to any via ppp0
</span><span class='line'>ipfw add pass all from any to any
</span><span class='line'>sysctl -w net.inet.ip.forwarding<span class="o">=</span>1
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>关闭VPN共享 bash (off-share-pptp-vpn.sh)</span> <a href='/downloads/code/off-share-pptp-vpn.sh'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'>killall natd
</span><span class='line'>ipfw -f flush
</span><span class='line'>sysctl -w net.inet.ip.forwarding<span class="o">=</span>0
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>所以当拨上了VPN之后，运行开启VPN共享那个脚本就OK了。在PS3上将网关指到Macbook的IP地址就可以了。</p>

<p>最后一个遗留问题。Mac OS X的VPN高级设定中有这么一个checkbox：</p>

<p><img src="/downloads/image/mac-send-traffic-over-vpn.png" alt="Send all traffic over VPN" /></p>

<p>这个 <code>Send all traffic over VPN</code> 我不太理解是什么意思，是指本地NAT网络的地址不走VPN么？还是Mac OS X内置了类似 <code>chnroutes</code> 这样的功能？</p>

<p>有意思的是，有的时候如果enable了这个选项，我发现PS3连接网络就会出现问题。而如果VPN已经拨上去了，再去enable这个选项貌似就没有影响。</p>

<p>没有深究这个，所以这是目前的一个遗留问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac OS X(Mavericks) CommandLineTools 和 osx-gcc-installer]]></title>
    <link href="http://www.markzhang.cn/blog/2014/07/03/apple-cli-and-osx-gcc-installer/"/>
    <updated>2014-07-03T13:22:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/07/03/apple-cli-and-osx-gcc-installer</id>
    <content type="html"><![CDATA[<p>Mac OS X Command Line Tools是Mac开发人员经常会遇到的一个问题。Command Line Tools（以下简称CLI）其实就是一堆Unix/Linux上开发需要的基础东西，比如gcc, make, g++等。在Mac上开发，如果使用Xcode的话，是不需要这些东西的，因为Xcode已经集成了这些东西，在Xcode的IDE中直接进行编译调试，所以用户不需要关心这些东西有没有，在哪。</p>

<p>但是如果我们在开发自己的基于Makefile的程序时，或者是要porting UNIX/Linux上的一些程序时，这些东西就变成必须的了。</p>

<!-- more -->


<p>苹果官方的CLI在苹果的网站上可以下载到，地址不需要自己去找，如果你已经安装了Xcode的话，那启动Xcode，选择菜单：<code>Xcode -&gt; Open Develop Tool -&gt; More Develop Tools</code>，然后浏览器就会被启动并来到下载苹果CLI的地方。下载dmg然后安装就完了。</p>

<p>苹果的CLI安装完成之后，其实是安装了两个pkg：</p>

<p><code>bash
com.apple.pkg.CLTools_Executables
com.apple.pkg.MacOSX10_9_SDK
</code></p>

<p>用 <code>pkgutils --files &lt;pkg name&gt;</code> 就可以看到安装了哪些文件，在什么地方。所以CLTools_Executables这个package，是安装在 <code>/Library/Developer</code> 目录下的，所以如果要使用gcc的话，把路径：<code>/Library/Developer/CommandLineTools/usr/bin/</code> 添加到PATH中去。</p>

<p>你可以看到，苹果的这个CLI，有很多llvm, gcc, clang这样的东西，这里有篇文章解释的很好：</p>

<p><a href="http://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html">http://www.cnblogs.com/qoakzmxncb/archive/2013/04/18/3029105.html</a></p>

<p>说来就是这么简单的事情，但是你如果在Google上尝试寻找答案的话，你会发现这些答案基本上在Mac OS X 10.9（Mavericks）上都没法用，典型的答案有：</p>

<ul>
<li>运行 <code>xcode-select --install</code>，反正在我的机器上，<code>xcode-select</code> 压根没有 <code>--install</code> 这个option。</li>
<li>执行程序：<code>/System/Library/CoreServices/Install Command Line Developer Tools.app</code>，其实这就是 <code>xcode-select --install</code> 去执行的程序，在我的Mac上运行没反应。</li>
<li>还有一些文章说直接在终端运行gcc，就会跳出一个对话框让你安装CLI的，我也没有碰到这么神奇的事情。</li>
</ul>


<p>现在再来说说 <code>osx-gcc-installer</code>。</p>

<p><code>osx-gcc-installer</code> 是github上一个开源的东西，估计是作者自己编译了苹果的一些open source的东西得到的：</p>

<p><a href="https://github.com/kennethreitz/osx-gcc-installer">https://github.com/kennethreitz/osx-gcc-installer</a></p>

<p>我对这个东西的理解是，在Mac OS X Lion/Mountain Lion之前，要安装苹果的CLI，是需要首先安装Xcode的（貌似是需要在安装了Xcode之后，在Xcode中有一个地方可以下载CLI），所以为了让我们在不安装Xcode的前提下得到gcc/make，就有了这个项目。该项目的README文件印证了这一点：</p>

<blockquote><p>For Lion and Mountain Lion users, Apple now provides an official Command Line Tools for Xcode package that you can install without needing to install Xcode itself! You can download it from Apple&rsquo;s developer site (free registration required) and search for &ldquo;Command Line Tools&rdquo;.</p></blockquote>

<p>之前我也安装过这个东西，现在如上面所说，我已经安装了苹果官方的CLI，所以很自然的我就想卸载掉这个东西，照例Google了一大圈之后，发现一般都是这么说的：</p>

<blockquote><p>According to the creator of the package, you can install Xcode on top of it since it is just a subset. Then you can use the uninstall command to completely remove:</p>

<p>sudo /Developer/Library/uninstall-devtools &mdash;mode=all</p>

<p>Definitely not a quick uninstall, but it should work.</p></blockquote>

<p>以上摘自StackOverflow: <a href="http://stackoverflow.com/questions/9332196/how-to-remove-the-osx-gcc-installer">http://stackoverflow.com/questions/9332196/how-to-remove-the-osx-gcc-installer</a></p>

<p>但事实上，这个做法在Mavericks上也是不行的，首先，我压根就没有 <code>/Developer</code> 这个目录，据说是Xcode从4.3开始就是一个“绿色软件”，所有东西都在 <code>/Applications/Xcode.app</code> 下面了。</p>

<p>此外，事实上我之前的确装过老版本的Xcode，在安装了 <code>osx-gcc-installer</code> 之后，的确有 <code>/Developer</code> 这个目录，但是运行了那个脚本之后，什么事情都没发生。<code>/usr/bin/gcc, /usr/bin/llvm-gcc-4.2</code> 这些文件还在那。</p>

<p>所以还是自己想办法了，通过 <code>pkgutils --expand GCC-10.7-v2.pkg tmp</code> ，可以在 <code>GCC-10.7-v2.pkg</code> 解开（这个pkg也就是osx-gcc-installer在Mac OS X 10.8上的安装文件），可以看到这个pkg包含了9个package：</p>

<p><code>bash
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DevSDK.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DeveloperToolsCLI.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 DeveloperToolsSystemSupport.pkg
-rw-r--r--  1 mark  staff   6.7K  8 12  2011 Distribution
drwxr-xr-x  3 mark  staff   102B  7  3 14:00 Resources
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 VersionedDeveloperToolsSystemSupport.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 X11SDK.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 XcodeUserSystemSupport.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 clang.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 gcc4.2.pkg
drwxr-xr-x  6 mark  staff   204B  7  3 14:00 llvm-gcc4.2.pkg
</code></p>

<p>所以我使用 UninstallPKG 这个软件将这9个packag都删除掉就OK了。UninstallPKG是收费软件，售价9.99美元，试用版只能执行三次Uninstall，不过通过使用我发现不是只能uninstall 3个package，而是限制只能使用3次，也就是说，你可以一次选择多个package一并删除。</p>

<p>所以打开UninstallPKG，选择这9个package然后uninstall即可。注意这9个package的包名是上述名字后面都加了一个 <code>Leo</code>（估计是Snow Leopad的意思）。</p>

<p><img src="/downloads/image/uninstallpkg.png" alt="UninstallPKG" /></p>

<p>所以到此简单来说，现在由于苹果提供了官方的CLI，所以其实 <code>osx-gcc-installer</code> 这个东西已经不再需要了。除非有一些你需要的其他东西依赖它。貌似现在新版的 HomeBrew 也是需要苹果的CLI而不是osx-gcc-installer了。<code>osx-gcc-installer</code> 的TroubleShooting是这样说的：</p>

<blockquote><p>Do not install this if you already have Xcode installed! Mixing Xcode and osx-gcc-installer is known to cause various difficult-to-diagnose problems and is not recommended.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Mac OS X上的Chrome添加SSL证书]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification/"/>
    <updated>2014-03-25T21:49:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/25/mac-chrome-add-ssl-certification</id>
    <content type="html"><![CDATA[<p>Chrome在访问自签名SSL证书的网站时，会给出一个warning的页面，每次都要去点一下那个 <code>Proceed</code> 按钮特烦。每天点一次，日积月累下来每年也要花不少时间来点这个破玩意。Chrome就不能聪明一点来个诸如”记住我的选择“这样的按钮么？</p>

<p>折腾总是发生在忍无可忍的时候，幸好要解决这个问题不麻烦。</p>

<!-- more -->


<ul>
<li><p>首先就是把SSL证书导出了。这个非常容易，访问一下有SSL warning的那个网站，在Chrome给出的warning页面，地址栏的开头有一个被划了斜线的https，点那里就可以看到证书的信息，从而可以将证书导出出来。</p></li>
<li><p>然后就是导入这个证书了。直接在Mac OS X的应用列表中启动 <code>Keychain Access</code>，当然你也可以在Chrome里面选择Settings &ndash;> Advanced settings &ndash;> Manage Certification，这样出来的就是Mac OS X的 <code>Keychain Access</code> 这个应用程序。</p></li>
</ul>


<p><img src="/downloads/image/keychain-access.png" alt="Keychain Access" /></p>

<ul>
<li><p>在 <code>Keychain Access</code> 的界面中，点击左下的 + 按钮，选择刚才得到的SSL证书，就将该证书导入了。</p></li>
<li><p>最后我们要选择 <code>Always Trust</code> 这个证书，否则SSL warning还是会有。在 <code>Keychain Access</code> 中，双击刚才导入的证书，在出现的对话框中，展开 <code>Trust</code> 那个部分，然后选择 <code>Always Trust</code> 就可以了。比如下图就是12306网站的SSL证书：</p></li>
</ul>


<p><img src="/downloads/image/keychain-always-trust.png" alt="Always trust SSL certification" /></p>

<ul>
<li>重启Chrome，再访问那个网站，就没有SSL warning了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X Mavericks上的浏览器插件的问题]]></title>
    <link href="http://www.markzhang.cn/blog/2014/01/20/internet-plugins-on-mavericks/"/>
    <updated>2014-01-20T21:30:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/01/20/internet-plugins-on-mavericks</id>
    <content type="html"><![CDATA[<p>升级了Mavericks之后，发现浏览器中的一些插件出问题了。最先遇到的就是在Safari中经常会蹦出来对话框说，是否要在该网站上运行迅雷（Thunder xxx）插件，有几个选项，yes/no/never for this site&hellip;. 后来又发现旺旺不工作了，也就是在浏览器中点击旺旺图标，旺旺出不来了&hellip;.</p>

<p>所以花了点时间看了一下，原来现在在Safari中有专门的 <code>Internet plug-ins</code> 这样的设置了，而且该设置影响安装的所有浏览器（如Chrome, Firefox）。</p>

<!-- more -->


<p>首先进入Safari的Preferences（COMMAND + ,），在 <code>Security</code> 标签中，有 <code>Internet plug-ins</code> 这一项，我们需要先点击 <code>Allow Plug-ins</code>，然后点击后面的 <code>Manage Website Settings...</code> 按钮出现对话框：</p>

<p><img src="/downloads/image/manage-website-settings.png" alt="Manage Website Settings" /></p>

<p>在这里就可以设置每个plugin的处理方式了，如上图所示，针对旺旺插件，我们选择了 <code>Allow Always</code>。你还可以在这里找到其他很多你需要用到的插件，比如淘宝的 <code>AliEdit</code>，也就是密码输入框的插件、迅雷的下载插件等等。值得一提的还有就是支付宝的插件，名字有点怪，叫：<code>npalicdo plugin</code>。</p>

<p>有意思的是，在MacOS X上，所有的插件是统一安装在一个地方的：<code>/Library/Internet Plug-Ins</code>。所以插件一旦安装了，所有的浏览器就都能使用了。只是每个浏览器是否使能某个插件，在各自的设置里面，如上面介绍的Safari的。在Chrome中，那就是在页面：<code>chrome://plugins</code> 里面。</p>

<p>所以其实比如下载了支付宝的浏览器插件，安装的时候，其实就是把文件拷贝到了 <code>/Library/Internet Plug-Ins</code> 这个目录下而已。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X 如何截屏]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot/"/>
    <updated>2013-12-25T21:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot</id>
    <content type="html"><![CDATA[<p><em>文章是从网上找来的，但是忘记当初的网址了，所以没写上转载的地址。如果您发现这是您的原创，请告知，我会加上转载信息，谢谢。</em></p>

<p>在Mac OS X下有很强大的截屏功能，它不仅仅是对屏幕的全屏COPY，而是包括很多细节在里面，就从这点来看，已经比过所有版本的Windows了。</p>

<p>下面我来向大家详细介绍一下： 　　</p>

<!-- more -->


<p>对全屏的截图我们可以通过按 苹果键（花键）+ Shift键 + 3来执行，之后伴随着清脆的一声提示音后，在桌面上就会生成一个图片文件，这就是刚刚截屏的图片了，默认文件类型是PNG的。</p>

<p>自定义截屏是很方便的一个功能，是可以通过按 苹果键（花键）+ Shift键 + 4来执行，当执行组合按键之后鼠标指针的光标会变成十字，现在你就可以画出你想要截取屏幕的范围了，画好后截出的图片也会放在桌面上。</p>

<p>另外，如果在按 苹果键（花键）+ Shift键 + 4后按下 空格键，鼠标指针就会变成一个小照相机，这时是截取对象方式的截屏，把小照相机放在你想截图的窗口上按鼠标左键后就执行了对该窗口的截屏，很方便吧，</p>

<p>还有一个用法就是苹果键（花键）+Shift键再 + Ctrl键 + 4，这样截出的文件就放入系统的剪贴板了，不会生成文件出来，在做文档时直接粘贴就很方便了。</p>
]]></content>
  </entry>
  
</feed>
