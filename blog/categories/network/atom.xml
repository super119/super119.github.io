<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2014-06-08T22:09:52+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一站式密码管理器 - LastPass]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/08/lastpass/"/>
    <updated>2014-04-08T19:56:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/08/lastpass</id>
    <content type="html"><![CDATA[<p>我个人感觉，密码是相当反人类的设计。当你刚接触互联网的时候，可能感觉不到，甚至感觉理所当然，银行卡也需要设置密码呢。但是当访问的网站越来越多，各个站点论坛都需要注册用户、设置密码，多了之后密码就会变成非常痛苦的一种体验。</p>

<!-- more -->


<p>其实人自身就有很多唯一（Unique）的存在，密码不应该有存在的理由。之前我看过一个BBC的纪录片，为此还写过一篇博文：</p>

<p><a href="http://markzhang.cn/blog/2013/12/17/defeating-the-hackers/">密码之外的新的安全认证手段</a></p>

<p>之所以现在密码还被大量使用，可能现在技术还没有成熟、成本还没有降低到能普及的程度吧。</p>

<p>所以现在也涌现出了很多“密码管理”类的网站和应用，LastPass就是其中之一。我简单使用了一下，感觉还是挺方便的。</p>

<p>首先就是去<a href="http://www.lastpass.com">http://www.lastpass.com</a>注册一个账号了，不好意思，这里你又需要设置一个密码了。好在的是，设置了这个密码之后，以后的所有密码都不需要再记忆了，LastPass会帮你管理。所以，反过来说，一旦你的LastPass的密码被泄露的话，那后果就不堪设想了，所以为了安全起见，一些涉及到钱财类的密码还是单独设置吧，别依赖LastPass了。。。比如支付宝。:)</p>

<p>然后就是在LastPass的主页上，点击“下载”，就会下载一个针对你的浏览器的插件。我使用的是Chrome，所以一个Chrome插件就自动下载并安装了。安装完成之后，点击工具栏上出现的 <code>*</code> 字图标，输入你的LastPass的账号和密码，一切就已经就绪了。</p>

<p>LastPass有许多功能，比如表单的自动填写、Profile的设定等，但是我只使用了它的一个功能：自动生成密码。LastPass自动生成密码可以选择密码长度，默认是12个字符，也可以选择字符种类，比如包不包含特殊字符（默认不包含，因为有一些网站只接受字母和数字作为密码）等。</p>

<p>所以接下来我就先登录了一个我常去的网站，进入到账户设定，修改密码的页面，在新密码设定的输入框中，点击LastPass，选择自动生成密码，LastPass就会生成一个12个字符的密码并自动填充到密码框中，并且该密码自动保存在了你的LastPass的账户里面：</p>

<p><img src="/downloads/image/lastpass-saved-passwd.png" alt="LastPass自动生成并保存的密码" /></p>

<p>上图显示的就是我新生成的淘宝的密码，这里面URL这一项很重要，LastPass会根据URL中的 <code>domain name</code> ，来检测你当前访问的网站是否在LastPass中有对应的密码记录。举上面的例子来说，URL是 <code>http://110.taobao.com/...</code>，所以下次只要你访问 <code>xxx.taobao.com/xxxx</code> 这样的网址，在网页中所有的密码输入框中都会出现一个 <code>*</code> 字图标，并且有一个下标1，表示该网站LastPass中有一个匹配的密码记录，只要点击这个 <code>*</code> 字图标，密码就自动填到密码框中了，很方便：</p>

<p><img src="/downloads/image/lastpass-autofill.png" alt="LastPass自动填充密码" /></p>

<p>那有的时候，有些网站，比如淘宝，支付宝，网银等，密码输入都是有控件的，所以LastPass没法自动在密码框里面插入那个 <code>*</code> 字图标，这个时候怎么办？这也没有问题，只是稍微麻烦一点。以我使用Chrome浏览器，还是访问淘宝来举例，只需要去点击工具栏上那个LastPass的图标（这个图标也有一个1字的下标，表示该网站有一个对应的密码记录），选择 <code>Show matching sites</code> &ndash;> <code>Generated password for taobao.com</code> &ndash;> <code>Copy password</code>，然后再到密码输入框里面去粘贴就好了。如果很不幸你的网站的密码输入框不允许粘贴，那你只能手动去LastPass的密码保存页面，找到那个密码，然后手动输入了。。。</p>

<p>最后说一个我觉得是必须要设置的地方，就是 <code>Equivalent Domains</code>。要设置这个东西的原因在于，很多网站密码设置、修改不在一个domain上。比如126邮箱，使用的时候，我们登录的是www.126.com，但是修改密码的时候，是跳转到网易通行证的网站，也就是163.com；再比如139邮箱，登录的是139.com，但网页会自动跳转到10086.cn，又或者是cmpassport.com；淘宝也是，taobao.com/alipay.com/zhifubao.com这三个域名很多时候都是关联的，其实需要的都是相同的用户名和密码。上面提到，LastPass是根据 <code>domain name</code>，也就是域名来检测你当前访问的网页是否有匹配的密码记录的，所以如果你保存密码的时候，密码对应的域名是taobao.com，但是你现在访问某个alipay.com的网页，也需要这个密码，这个时候如果你不设置 <code>Equivalent Domains</code>的话，LastPass就不会自动提示密码了。</p>

<p>所以，点击工具栏上LastPass的图标，选择 <code>My LastPass Vault</code> &ndash;> <code>Settings</code> &ndash;> <code>Equivalent Domains</code>标签页，在里面新增一个记录，比如这样：</p>

<p><code>taobao.com, alipay.com</code></p>

<p><img src="/downloads/image/lastpass-equivalent-domains.png" alt="LastPass Equivalent Domains" /></p>

<p>保存之后，下次你访问某个alipay.com的页面，LastPass就会提示你淘宝的密码了。当然这里只是举例，如果你的淘宝账户和alipay的账户是分开的，那自然就不需要这样设置。</p>

<p>最后，给你的LastPass的账户设置一个强密码，然后祈祷LastPass不会被墙，LastPass的密码数据库不会被盗吧！还有就是，真正涉及到钱的网站，比如支付宝、网银等，还是不要使用LastPass来管理密码吧，虽然记忆N个密码实在麻烦，但是麻烦总好过丢钱吧。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架设无线桥接网络（WDS）]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/22/setup-wireless-wds/"/>
    <updated>2014-03-22T19:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/22/setup-wireless-wds</id>
    <content type="html"><![CDATA[<p>现在的无线路由器动辄3根天线，号称穿墙能力如何如何，信号可以从一楼一直覆盖到三楼。但是根据我几年来使用了N款无线路由器之后，发现都是扯。我现在使用的是一台ASUS的，3根天线，128M内存的无线路由器，支持刷第三方固件（如DD-WRT, Tomato），但是穿墙效果还是无法让人满意。路由器放在房间，客厅的信号就是时有时无。当然，我指的是使用ipad或者手机时，信号较弱，如果使用笔记本电脑要好一些。</p>

<p>忍受了2年之后，我决定在客厅再放一个无线路由器，做无线桥接（WDS）使用，彻底摆脱信号之苦。</p>

<!-- more -->


<p>简单说下两台路由器：</p>

<ol>
<li><p>做AP用的，也是连接着Internet的，就是那台ASUS的，放在书房。</p></li>
<li><p>做桥接用的，放在客厅的，是一台特价的时候买的四十块钱的Tenda（腾达）的无线路由器。</p></li>
</ol>


<p>其实网上介绍WDS的文章很多，但是很多文章都不适用于我的情况，所以做了很多次测试。</p>

<p>最后配置完成之后，发现其实非常简单：</p>

<h2>主路由器（做AP用的ASUS的那台）的配置</h2>

<p>由于我这台ASUS的路由器给我刷了Tomato的固件，所以这里是Tomato中的配置方法。按照下图配置即可：</p>

<p><img src="/downloads/image/tomato-ap-wds.png" alt="Tomato AP+WDS 配置" /></p>

<ul>
<li>工作模式设置成 <code>AP + WDS</code></li>
<li>通道尽量选择一个没人使用的。现在每家每户都有无线路由器，所以常见通道很多人都在使用，挑一个没人使用的比较好</li>
<li>无线加密还是按照以前的就好，现在基本上用的都是 <code>WPA2 Personal</code> 了</li>
<li>WDS一项中，你可以将辅路由器的MAC地址填写进去，也可以像上面的图中所示，选成AUTO</li>
</ul>


<h2>辅路由器（做桥接用的Tenda的那台）的配置</h2>

<p>忘记截图了，但是只需要确保以下几点即可：</p>

<ul>
<li>Internet连接要关闭，因为是做桥接用。没有关闭就设成有线网络连接Internet，反正我们不会插网线上去，所以等于禁用了</li>
<li>LAN的网段不要设成跟主路由器一个网段，以免冲突。比如主路由器是192.168.1.x, 辅路由器就可以设成192.168.2.x</li>
<li>关闭DHCP，因为所有的WIFI数据会被发送到主路由器去</li>
<li>工作模式设成WDS，然后填写主路由器的无线MAC地址。一般的路由器都会有一个Scan按钮，可以给出所有的无线网络，选择主路由器那个即可</li>
<li>无线加密设置成跟主路由器一样（加密方法、密钥），这很重要</li>
</ul>


<p>我这个Tenda的路由器，设成WDS模式之后，无线的SSID就会自动设置成跟主路由器一样。所以，当做完上面的设置之后，家里就只有一个无线信号，走到书房就自动连接到主路由器，走到客厅就会自动连接到辅路由器，Cool。</p>

<p>Have a good day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Ubuntu上连接Juniper SSL VPN]]></title>
    <link href="http://www.markzhang.cn/blog/2014/03/20/juniper-vpn-on-ubuntu/"/>
    <updated>2014-03-20T22:26:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/03/20/juniper-vpn-on-ubuntu</id>
    <content type="html"><![CDATA[<p>现在国内很多外企都使用Juniper SSL VPN，来让员工可以在家连入到公司的网络。但是我发现，Juniper的SSL VPN在windows和Mac OS X上都可以很好的工作，但是在Ubuntu上貌似就有问题。就算你正确安装了Java Runtime，打开浏览器，<code>Host Checker</code> 和 <code>Network Connect</code> 也无法正常运行。有人说这是因为现在我们大多使用64位的Ubuntu，而 <code>Host Checker</code> 和 <code>Network Connect</code> 需要32位的浏览器和32位的JRE才能工作。</p>

<p>我没有去深究32位的Ubuntu下是否Juniper VPN就真的可以正常工作了，因为我找到了一个更简单的办法。</p>

<!-- more -->


<p>这个方法来自这位大神，他自己分析了Juniper SSL VPN的工作过程，然后写了一个perl脚本解决了这个问题：</p>

<p><a href="http://smallhacks.wordpress.com/2012/07/15/jvpn-perl-script-to-connect-to-the-juniper-vpn-with-host-checker-enabled/">http://smallhacks.wordpress.com/2012/07/15/jvpn-perl-script-to-connect-to-the-juniper-vpn-with-host-checker-enabled/</a></p>

<p>对原理感兴趣的可以自己去看这篇文章（可能需要翻墙），这里简述一下步骤：</p>

<ul>
<li><p>从上面的文章提供的地址，下载 <code>jvpn-0.7.0.tar.bz2</code>。</p></li>
<li><p>解开，将配置文件 <code>jvpn.ini</code> 拷贝一份以便输入自己的配置，比如：<code>cp jvpn.ini mark.ini</code>，然后编辑这些配置项：</p></li>
</ul>


<p><code>bash
host: 你的VPN server的地址
username: 用户名
realm: 区域，一般的外企应该是 `Employee` 或者 `Contractor`
verifycert: 是否验证SSL证书，如果你本地没有导入你的VPN server的SSL的证书的，可以写0，否则写1
dnsprotect: 这可以防止Ubuntu的NetworkManager修改 `/etc/resolv.conf` 。我们需要修改这个文件从而修改DNS server的配置。
mode: `ncsvc/ncui` 都可以
</code></p>

<ul>
<li>然后就可以执行：<code>sudo perl ./jvpn.pl --conf mark.ini</code>。成功了就可以看到连到了VPN，按 <code>Ctrl+C</code> 可以中断连接。</li>
</ul>


<p><strong> Troubleshooting </strong></p>

<ul>
<li><code>sudo apt-get install libterm-readkey-perl</code>，如果jvpn.pl说 <code>Term::ReadKey module</code> 找不到的话</li>
<li><code>sudo apt-get install lib32z1</code>，如果出现这样的错误： <code>libz.so.1: cannot open shared object file: No such file or directory</code></li>
<li><code>sudo apt-get install gcc-multilib</code>，如果看到这样的错误： <code>bits/predefs.h: No such file or directory</code></li>
<li><code>sudo apt-get install libhttp-request-ascgi-perl</code>，如果jvpn.pl说 <code>HTTP::Request module</code> 找不到的话</li>
</ul>


<p>这样在Ubuntu下，就可以使用Juniper SSL VPN了。很多外企的网络，自带翻墙，所以拨上VPN之后，除了工作之外，还可以实现自动翻墙。配合上chnroute，就完美了。不清楚chnroute有啥作用的，可以看我之前写的一篇文章：</p>

<p><a href="http://markzhang.cn/blog/2013/12/04/chnroutes-on-mac/">Chnroutes的使用（Mac OS X Mavericks）</a></p>

<p>最后附上目前最新版本的jvpn 0.7.0：<a href="/downloads/soft/jvpn-0.7.0.tar.bz2">jvpn-0.7.0.tar.bz2</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chnroutes的使用（Mac OS X Mavericks）]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/04/chnroutes-on-mac/"/>
    <updated>2013-12-04T14:00:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/04/chnroutes-on-mac</id>
    <content type="html"><![CDATA[<p>翻墙是我朝人民的普遍需求。现在翻墙的普遍做法是搞一个VPN。买一个也好，找免费的也好。有了VPN之后面临的问题就是当VPN连接之后，所有的网络数据都会走VPN，这显然不是最高效的做法，对于一些没有被墙的网站或是应用，没有必要再走VPN，这样反而更慢。为此，<code>chnroutes</code>应蕴而生了。</p>

<!-- more -->


<p><code>chnroutes</code>就是一份路由表配置，它收集了绝大部分国内没有被墙的网站/IP，然后将他们加到路由表中，设定访问这些IP地址使用原来的网关（非VPN）。这样，在路由表中的IP地址就会走原来的网关，剩下来的就都走VPN了。</p>

<p>在<code>https://code.google.com/p/chnroutes/</code>上下载<code>chnroutes.py</code>，在Mac OS X上运行<code>./chnroutes.py -p mac</code>就得到两个文件：<code>ip-up</code> 和 <code>ip-down</code>。</p>

<p>打开文件一看就明白，没比这更简单的脚本了。<code>ip-up</code>就是使用netstat等命令取到非VPN的网关的IP地址，然后就调用<code>route</code>命令设置一大堆的路由信息。</p>

<p>这里要注意的是，在我的Macbook上（Mac OS X Mavericks），<code>ip-up</code>取到的所谓<code>OLDGW</code>是不对的。<code>ip-up</code>试图去取非VPN的那个网关IP地址，但其实取到的是我所有的网关，也就是包含了VPN的和本地的两个网关IP地址。所以我注释掉了<code>ip-up</code>中获取<code>OLDGW</code>的一行，直接将<code>OLDGW</code>设置成了我本地的网关IP地址。</p>

<p>这样，连接上VPN，然后运行<code>ip-up</code>就可以舒服的上网了。运行<code>ip-down</code>就可以删除掉<code>ip-up</code>添加的路由信息。</p>

<p>为了验证<code>ip-up</code>的确做了我们所想的事情，可以用命令<code>traceroute</code>来验证，比如：<code>traceroute www.youku.com</code>，就可以看到数据是从本地网关走的，而如果是：<code>traceroute www.youtube.com</code>，就可以看到数据是从VPN走的。</p>
]]></content>
  </entry>
  
</feed>
