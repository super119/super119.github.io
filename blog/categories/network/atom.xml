<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2015-05-11T10:32:05+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RouterOS：为什么我不用chnroutes]]></title>
    <link href="http://www.markzhang.cn/blog/2015/03/04/why-i-leave-chnroutes/"/>
    <updated>2015-03-04T09:28:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/03/04/why-i-leave-chnroutes</id>
    <content type="html"><![CDATA[<p>之前有一篇文章说了在RouterOS下配置chnroutes：</p>

<p><a href="http://markzhang.cn/blog/2014/08/20/ros-chnroutes/">RouterOS配置记录（二）：chnroutes</a></p>

<p>配置了chnroutes之后，国内IP不走VPN，国外的走VPN，一切看起来都很好。但是随着使用时间的增长，发现了一些问题：</p>

<!-- more -->


<ul>
<li><p>CDN的问题。由于翻墙的需要，所以我们不会使用ISP给我们提供的DNS server。一般来说，我们都会使用诸如 <code>8.8.8.8</code> 或者OpenDNS来作为我们的DNS server。但是由于这些地址本身就是国外地址，所以当访问这些DNS server的时候，根据chnroutes配置的策略，就会走VPN走。这样一来，对于你要访问的网站来说，它会认为你是一个国外的IP，从而无法给你正确的你想要的一个CDN IP。这就是为什么有的时候访问国内的一些在线直播的网站，挂上VPN和chnroutes就会卡，拿掉立马就好了的原因。</p></li>
<li><p>VPN的主要作用是用来访问被墙的网站，一般来说VPN本身的带宽都不会特别大（除非你很有钱买高档VPN），所以其实对于一些没有被墙的国外网站，不使用VPN其实更加快捷。</p></li>
<li><p>PSN（PlayStation Network，现在叫Sony Entertainment Network）无法登录，一些游戏在线搜索不到房间。具体原因我还不清楚，我的感觉可能是PSN的服务器和认证服务器不是同一个IP，而且一个是国内IP一个是国外IP。可能认证服务器需要验证客户端的IP地址，而认证服务器拿到的客户端的IP并不是之前我们连接PSN服务器的那个IP，这样导致了混乱。当然这是纯YY，很可能是其他原因。总之就是PSN无法登录，有一些游戏的在线联机也没法工作。</p></li>
</ul>


<p>基于此，我在想我是否真的需要chnroutes。现在想来其实我并不需要，因为我的需求基本上就只有一条：访问Google，包括gmail, google gerrit, plus, drive&hellip;</p>

<p>所以我开始构思不使用chnroutes的另外一条道路。</p>

<p>最一开始没想彻底抛弃chnroutes，就想先解决第一个问题，对于我来说，这个问题是最关键的。所以对于这个问题，很自然的就想到了 &mdash; 把DNS server的IP也加到chnroutes的地址表里面，假装成国内的IP不就OK了嘛&hellip; 试验了一下发现无效，因为这样一来，DNS的请求就会经过墙，DNS劫持就发生了，现象就是你访问google/youtube，出来的是另外一个网站，或者干脆就是连接不上。</p>

<p>有朋友建议我用TCP DNS，这样可以解决墙的DNS劫持的问题。但是这也不好做，因为我是配置ROS作为整个家里局域网的DNS server的，ROS本身是不支持TCP DNS的，为此有人（也是中国小伙）还在Mikrotik的论坛上发过类似的帖子：</p>

<p><a href="http://forum.mikrotik.com/viewtopic.php?t=68248">How to force DNS requests using tcp protocol!</a></p>

<p>其次，如果不使用ROS作为DNS server，也就是说让局域网内每台设备手动配置DNS（比如配置成OpenDNS的IP），这样貌似可行但其实也非常麻烦。因为TCP DNS毕竟是非常规需求，而且现在的设备早已不局限于电脑，还包括了手机、pad甚至各种嵌入式设备（比如树莓派、存储服务器等）。这些东西能否支持TCP DNS也是一个问题。</p>

<p>接下来我想到了autoproxy gfwlist：</p>

<p><a href="https://code.google.com/p/autoproxy-gfwlist/">https://code.google.com/p/autoproxy-gfwlist/</a></p>

<p>这张列表包含了天朝人民发现的被墙的网址和IP。我的想法很简单，既然chnroutes的IP列表太宽泛，那就找一张精准的表好了。结果把autoproxy这张表拿出来一看，傻了。因为这张表中包含了诸如：<code>*.google.com</code> 这样的网址，这样的东西在ROS里面如何处理？因为ROS作为路由设备，是只认识IP地址的，对域名它可是没有办法的。</p>

<p>虽然ROS的确是有一个叫做 <code>WebProxy</code> 的功能，但是通读了这个功能的manual之后，你会发现你只能针对域名设置 <code>Allow</code> 和 <code>Deny</code>，没有更多的动作可以做了。</p>

<p>如果你Google <code>routeros autoproxy gfwlist</code>，你会发现github上有一个项目叫 <code>gfwlist2routeros</code>：</p>

<p><a href="https://github.com/layerssss/gfwlist2routeos">https://github.com/layerssss/gfwlist2routeos</a></p>

<p>显然这也是国内某位大神的作品。但是就在项目的README中，也写到了：</p>

<blockquote><p>gfwlist 中包含一些通配符规则，如 <em>.google.com.</em> 之类的，该项目无法识别</p></blockquote>

<p>再次受挫感觉心灰意冷。在决定要放弃之前想到了最后一个笨办法。因为我的需求相对简单，主要就是要使用Google，所以我想我就自己建一个网站list，然后在路由器上写一个脚本，定时去解析这些网站然后将IP地址储存下来。这样当脚本运行了一定次数之后，我想可能绝大部分Google的这些IP就都能采集到，然后设置这些IP地址走VPN即可。</p>

<p>花了几个小时写完了脚本，然后设置了定时执行，睡了一觉之后起来之后测试发现还是不行。现象还是一样，要不就是网站被劫持了要不就是连不上。</p>

<p>分析了一下大致是这么几个原因：</p>

<ul>
<li><p>脚本在ROS上run，做DNS解析的时候也必须要从VPN走，否则就会被墙劫持。虽然我对OpenDNS的IP做了处理，但是我发现那些规则是在Firewall里面做的，对于ROS来说，它是不通过Firewall的&hellip;</p></li>
<li><p>修改了脚本，脚本一开始，将OpenDNS的IP加入到了静态路由中，解析完成后删除，发现还是不行。后来一想，局域网中有很多设备都是开着的，只要这些设备一访问Google，就会在ROS的DNS server中产生cache，这样我的脚本取到的IP地址就不正确了，因为这些地址都是墙参与产生的&hellip;</p></li>
</ul>


<p>到此彻底没了脾气。休息了一天之后发现ROS的DNS有静态DNS的功能（<code>/ip dns static</code>），于是又想到了可能可以对上面的方案做一点改进来达到目的。最终目的达成测试OK，具体来说我的做法是这样的：</p>

<ul>
<li>首先我写了一个脚本，在我的VPS上定时运行。这个脚本非常简单，就是去解析我给定的一个网站list，解析出每个网站的IP地址然后存成文件。将脚本放在VPS上执行而不是在ROS上执行的好处就是：彻底回避了墙。而且最后这些IP地址要从VPS走，所以在VPS上做DNS解析是最正确的做法了。脚本是这样的：</li>
</ul>


<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>HOSTS=(</p>

<pre><code>'www.google.com'
'www.googleapis.com'
'www.gstatic.com'
'mail.google.com'
'accounts.google.com'
'plus.google.com'
'play.google.com'
'www.gmail.com'
'drive.google.com'
</code></pre>

<p>)</p>

<p>echo -n &ldquo;&rdquo; > /home/mark/vpn-hosts-ips</p>

<p>for i in ${HOSTS[@]}; do</p>

<pre><code>ip=`ping -c 1 ${i} |grep PING|cut -d " " -f3|tail -c +2|head -c -2`
echo ${ip} &gt;&gt; /home/mark/vpn-hosts-ips
</code></pre>

<p>done</p>

<p>cp /home/mark/vpn-hosts-ips /Public/pub
chmod 644 /Public/pub/vpn-hosts-ips
```</p>

<p>使用Cron将这个脚本定时执行。脚本的最后将生成的文件放到了 <code>/Public/pub</code> 目录下，这是一个FTP的目录，作用就是接下来ROS可以下载到这个文件。</p>

<ul>
<li>在ROS上写一个脚本，这个脚本也是定时执行。脚本会通过FTP，去download上面步骤中生成的IP地址列表文件，然后将这些IP地址添加到静态DNS中，同时也将这些IP添加到一个address list中。这样通过 <code>/ip firewall mangle</code> 和路由表的设定，设置好这些IP地址从VPN走。ROS上的脚本是这个样子的：</li>
</ul>


<p>``` bash
:global hosts {\
&ldquo;www.google.com&rdquo;;\
&ldquo;www.googleapis.com&rdquo;;\
&ldquo;www.gstatic.com&rdquo;;\
&ldquo;mail.google.com&rdquo;;\
&ldquo;accounts.google.com&rdquo;;\
&ldquo;plus.google.com&rdquo;;\
&ldquo;play.google.com&rdquo;;\
&ldquo;www.gmail.com&rdquo;;\
&ldquo;drive.google.com&rdquo;;};</p>

<p>/tool fetch mode=ftp url=&ldquo;<a href="ftp://">ftp://</a><vps ip>/pub/vpn-hosts-ips&rdquo;</p>

<p>:global content [/file get [/file find name=vpn-hosts-ips] contents]
:global contentLen [ :len $content ]
:global lineEnd 0
:global line &ldquo;&rdquo;
:global lastEnd 0
:global index 0</p>

<p>/ip dns static remove [/ip dns static find]
/ip firewall address-list remove [/ip firewall address-list find]</p>

<p>:do {</p>

<pre><code>:set lineEnd [:find $content "\n" $lastEnd]
:set line [:pick $content $lastEnd $lineEnd]
:set lastEnd ( $lineEnd + 1 )

/ip dns static add address=$line name=[:pick $hosts $index]

:local found false
:foreach j in=[/ip firewall address-list find address=$line] do={
    :set found true;
}

:if ($found = false) do={
    /ip firewall address-list add list="vpn-list" address=$line
}

:set index ( $index + 1 )
</code></pre>

<p>} while ($lineEnd &lt; $contentLen)</p>

<p>/ip dns cache flush
```</p>

<ul>
<li>在客户端的机器上刷新DNS缓存。如果是windows，那么打开 <code>CMD</code>，输入：<code>ipconfig /flushdns</code> 即可。</li>
</ul>


<p>这样一来结果基本上满意了，测试访问google都一切正常。而且在ROS上，我也不再需要使用任何其他DNS了，使用ISP提供的DNS就可以了。</p>

<p>唯一的缺点就是，我们需要手动维护一张网站list，所以如果要翻墙的网站很多的话，这个方法是不适合的。我想如果谁有一个比较全的常用的Google的site list的话，不妨共享一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouterOS/远程启动/控制家里的PC]]></title>
    <link href="http://www.markzhang.cn/blog/2014/12/09/ros-rdp-wol/"/>
    <updated>2014-12-09T17:35:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/12/09/ros-rdp-wol</id>
    <content type="html"><![CDATA[<h2>远程启动</h2>

<p>远程启动其实就是 <code>WOL(Wake on Lan)</code>，现在的PC机基本上都支持。需要两个东西：</p>

<ul>
<li>在BIOS里面打开 <code>WOL</code></li>
<li>使用一个程序，发送WOL的一个包（所谓magic packet）给PC机</li>
</ul>


<p>先说第一个，在我的PC机上，这个设置是 Advanced Options &ndash;> APM &ndash;> Power on PCIE，设成 <code>Enabled</code> 即可。</p>

<!-- more -->


<p>再说第二个，很酷的是ROS就支持这个，这样你就不需要另外一台PC机常年开着了，ROS路由一直开着即可。在ROS中，打开 <code>New Terminal</code>，输入：</p>

<p><code>bash
/tool wol interface=&lt;连着你要唤醒的PC机的那个网口&gt; mac=&lt;要唤醒PC机的网卡的MAC地址&gt;
</code></p>

<p><img src="/downloads/image/ros-wol.png" alt="ROS Wake on Lan" /></p>

<p>如果你的路由器不是ROS，或是没有WOL功能的话，那就需要另外一台PC来执行WOL的程序了。在Linux下，可以使用：</p>

<p><code>bash
sudo apt-get install etherwake
wakeonlan &lt;mac address&gt;
</code></p>

<p>Windows下也一样，下载一个Wake on Lan的程序使用就行了。</p>

<h2>远程控制</h2>

<p>首先就是打开Windows的远程桌面功能。在 <code>高级系统设置 -&gt; 远程</code> 标签页里面：</p>

<p><img src="/downloads/image/windows-rdp.png" alt="Windows RDP" /></p>

<p>完了就是在ROS里面打开端口映射，这样你才可以从Internet上远程RDP到家里的PC机，需要映射的是著名的3389端口：</p>

<p><code>bash
chain=dstnat action=dst-nat to-addresses=&lt;xxx.xxx.xxx.xxx&gt; to-ports=3389 protocol=tcp dst-port=3389
chain=dstnat action=dst-nat to-addresses=&lt;xxx.xxx.xxx.xxx&gt; to-ports=3389 protocol=udp dst-port=3389
</code></p>

<p>这样就可以远程登录了。Ubuntu下面有自带的 <code>Remmina Remote Desktop</code> 可以使用，Mac下我用的是 <code>Jump Desktop</code>，个人感觉很好用。</p>

<p>最后一个小问题，有关远程登录机器开始菜单中没有 <code>关机</code> 这个功能，只需要打开 <code>Windows CMD</code>，也就是命令行界面，输入：</p>

<p><code>bash
shutdown /f /s
</code></p>

<p>就可以了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouterOS配置记录（四）：OpenVPN Client]]></title>
    <link href="http://www.markzhang.cn/blog/2014/09/01/ros-openvpn/"/>
    <updated>2014-09-01T15:42:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/09/01/ros-openvpn</id>
    <content type="html"><![CDATA[<p>OpenVPN是现在使用相当广泛的一种VPN solution。它不使用特定协议（比如PPTP依赖于GRE协议，如果GRE协议被墙，PPTP就完了），也不使用特定端口，TCP/UDP都支持，性能表现也相当优异（UDP）。所以现在使用OpenVPN作为VPN的solution很多，在Mikrotik的论坛上可以找到大量赞美OpenVPN的帖子。</p>

<p>但是，事实上当我把OpenVPN全部配置完成之后，发现两个问题：</p>

<!-- more -->


<ul>
<li>OpenVPN已被墙，应该就是2013年（或者更早）的事情。虽然上面提到了OpenVPN不使用特定协议，不使用特定端口，但是聪明的GFW还是找到了OpenVPN TLS验证时的特征并墙之。所以如果你辛辛苦苦配置好了服务器端和客户端，客户端拨号的时候发现："Peer disconnected/Connection reset"，那就是被墙的标志。OpenVPN TLS验证的时候，连接直接被reset了。</li>
</ul>


<p>针对这个问题，当然也有解决方案，那就是模糊TLS验证的数据，让GFW寻不到TLS的特征，比如：</p>

<p><a href="http://igfw.net/archives/13018">http://igfw.net/archives/13018</a></p>

<p>但是这种做法是没法在ROS上实现的。因为这要求修改OpenVPN sever和client的代码，而我们是无法修改ROS中的OpenVPN的实现的。</p>

<ul>
<li>ROS不支持UDP模式的OpenVPN。这个已经被广大ROS用户诟病已久，但不知道为什么Mikrotik就是不改：</li>
</ul>


<p><a href="http://forum.mikrotik.com/viewtopic.php?f=1&amp;t=26499">http://forum.mikrotik.com/viewtopic.php?f=1&amp;t=26499</a></p>

<p>TCP模式的OpenVPN延迟（latency）很高，不适合诸如电话会议、在线游戏等场景。</p>

<p>所以坦白说，有上述的两个问题，ROS+OpenVPN，已经没有太多的使用价值了。但是既然我已经将其配置完成了，所以本文还是将过程记录了下来。</p>

<h2>OpenVPN server侧配置</h2>

<p>OpenVPN server侧的配置稍微复杂一些，关键是要生成一堆证书、秘钥。但是也不是复杂到没法忍，关键是要有一篇好的turtorial。所以这里是我找到的一篇很好的文章，照做就行：</p>

<p><a href="https://www.linode.com/docs/networking/vpn/secure-communications-with-openvpn-on-ubuntu-12-04-precise-and-debian-7">Secure communications with OpenVPN on Ubuntu 12.04</a></p>

<p>照着上面的文章做就可以了，这里再给出我最终的OpenVPN server的配置文件作为一个参考：</p>

<p>``` bash
port 3389
proto tcp
dev tun</p>

<h1>Keys</h1>

<p>ca /etc/openvpn/easy-rsa/2.0/keys/ca.crt
cert /etc/openvpn/easy-rsa/2.0/keys/server.crt
key /etc/openvpn/easy-rsa/2.0/keys/server.key
dh /etc/openvpn/easy-rsa/2.0/keys/dh1024.pem</p>

<h1>This will be the internal tun0 connection IP</h1>

<p>server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt</p>

<h1>This will send all of a client&rsquo;s 10.x.x.x traffic through the VPN</h1>

<h1>push &ldquo;route 10.0.0.0 255.0.0.0&rdquo;</h1>

<p>keepalive 10 120</p>

<h1>Mikrotik does not support LZO compression</h1>

<h1>comp-lzo</h1>

<p>auth SHA1</p>

<h1>Select a cryptographic cipher.</h1>

<h1>cipher BF-CBC        # Blowfish (default)</h1>

<p>cipher AES-256-CBC</p>

<h1>user nobody</h1>

<h1>group nogroup</h1>

<p>status /var/log/openvpn/openvpn-status.log</p>

<p>persist-key
persist-tun
verb 3
```</p>

<p>几点解释：</p>

<ol>
<li>ROS的OpenVPN client只支持TCP，所以这里使用TCP模式：<code>proto tcp</code>。</li>
<li>被注释的那句：<code>push "route 10.0.0.0 255.0.0.0"</code> 是可以用来给客户端设置路由表的，但是由于我的ROS有chnroutes，所以我会在我的ROS上设置路由表，所以我的OpenVPN server侧就没有push路由表给客户端了。</li>
<li><code>comp-lzo</code> 一定要注释掉，这是因为ROS OpenVPN client不支持这个。所以ROS的OpenVPN UDP不支持，数据压缩又不支持，你就可以想想Mikrotik论坛上大家的怨气有多大了。有空可以上去搜看相关的帖子，相当欢乐。</li>
<li>有关cipher，Blowfish, AES这些ROS OpenVPN client都是支持的，所以可以自由选择。使用默认的Blowfish就挺好。</li>
<li>最后的 <code>verb 3</code> 可以改成诸如 <code>verb 6</code>，这样在 <code>/var/log/syslog</code> 中可以得到很多的log，客户端连不上OpenVPN server的时候，可以帮助调试和定位。</li>
</ol>


<p>配置完成之后，<code>sudo service openvpn restart</code>，OpenVPN server就ready了。</p>

<h2>OpenVPN client侧配置（ROS）</h2>

<p>相比server侧，ROS上client的配置就相对简单了很多。</p>

<p>首先是上传证书和秘钥到ROS上：</p>

<p><img src="/downloads/image/ros-system-certificates.png" alt="Certificates" /></p>

<p>这里其实是3个文件，client的公钥和私钥，还有就是server的证书，这三个文件首先upload到ROS上，然后在上图中点击 <code>Import</code> 按钮就可以导入了。</p>

<p>然后就是创建一个OpenVPN的client了：</p>

<p><img src="/downloads/image/ros-ppp-openvpn.png" alt="PPP Create OpenVPN Client" /></p>

<p>几点说明：</p>

<ol>
<li><code>Connect To</code> 和 <code>Port</code> 不用说了</li>
<li><code>Mode</code> ，这个有两个选项：<code>IP</code> 和 <code>Ethernet</code>，这表示数据是走layer 3还是layer 2，反映到VPN创建出来的本地虚拟网卡，就是tun还是tap，一般来说OpenVPN都是tun，所以这里是选择 <code>IP</code>。如果你使用PPTP，就可以看到虚拟网卡是tap。</li>
<li><code>User</code>，这个其实不需要，因为OpenVPN是使用证书来识别client的，每个client都会有一个证书。但是这里ROS需要填一个用户名，所以随便填一个就好（貌似OpenVPN也可以支持username/password的那种验证的，我没去调查）。</li>
<li><code>Profile</code>，因为在下面会选择加密方式等，所以profile就选default就好，default意思就是按照server的默认设置来。</li>
<li><code>Certificate</code>，这里要选择你upload到ROS上的，client的私钥，这个私钥是用来解密数据的。</li>
<li><code>Auth</code> / <code>Cipher</code>，这个就选成跟server端的配置一致即可。</li>
</ol>


<h2>结束</h2>

<p>所以总的来说，OpenVPN的配置并不复杂，只是ROS不支持UDP的OpenVPN，所以用来翻墙看看网页还是可以的，玩游戏啥的就要差不少。不过OpenVPN作为一个free的，性能优良的VPN solution，在国内网络中使用也是相当不错的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouterOS配置记录（三）：DDNS]]></title>
    <link href="http://www.markzhang.cn/blog/2014/08/21/ros-ddns/"/>
    <updated>2014-08-21T15:26:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/08/21/ros-ddns</id>
    <content type="html"><![CDATA[<p>配置动态DNS主要是为了能让你的RouterBoard在Internet上被访问到，这样我就可以远程控制我的RouterBoard，同时也可以开始做端口映射，在内网做server&hellip;等。</p>

<p>在ROS上配置DDNS非常简单，就是写一个script然后放到ROS的 <code>System</code> &ndash;> <code>Scheduler</code> 中就好了。不过在此之前，先去申请一个DDNS，我用的是3322的。</p>

<p>不过在开始之前，你要先确保你的宽带连接拨号之后，得到的是一个真实的IP地址。现在电信/联通/移动宽带有的时候拨号会得到一个假IP地址，比如 <code>192.168.x.x</code>，<code>10.x.x.x</code>，甚至之前我得到过 <code>100.x.x.x</code>，这个也不是真实的IP地址（RFC编号为6598。RFC 6598 &ndash; IANA-Reserved IPv4 Prefix for Shared Address Space）。判断自己拨号得到的IP是否是真实IP很简单，打开 www.ipaddress.com，网站会告诉你你目前的IP地址，把这个IP跟你在ROS里面看到的你拨号得到的IP比较是不是一样就知道了。</p>

<p>如果你得到的不是真实的IP地址，那就说明在运营商那边还有一层NAT，那么你做DDNS就没有用了，除非你用花生壳客户端这种专门的软件，但是花生壳客户端软件是没法装在ROS上的。可以打电话给宽带运营商投诉，让它给你分配真实的IP地址，如果它不从你可以打工信部电话投诉（我没试过，网友们说可以）。</p>

<!-- more -->


<p>所以先来看一下这个script是长什么模样：</p>

<p>``` bash
:global ednsuser &ldquo;xxxxxxxx&rdquo;
:global ednspass &ldquo;xxxxxxxx&rdquo;
:global ednshost &ldquo;xxxxxxxx.3322.org&rdquo;
:global ednsinterface &ldquo;SHUnicom&rdquo;
:global members &ldquo;<a href="http://members.3322.net/dyndns/update?system=dyndns">http://members.3322.net/dyndns/update?system=dyndns</a>&rdquo;
:global status
:global status [/interface get [/interface find name=$ednsinterface] running]</p>

<p>:if ($status!=false) do={
:global ednslastip [:resolve $ednshost]
:if ([ :typeof $ednslastip ] = nil ) do={ :global ednslastip &ldquo;0&rdquo; }
:global ednsiph [ /ip address get [/ip address find interface=$ednsinterface ] address ]
:global ednsip [:pick $ednsiph 0 [:find $ednsiph &ldquo;/&rdquo;]]
:global ednsstr &ldquo;&amp;hostname=$ednshost&amp;myip=$ednsip&rdquo;
:if ($ednslastip != $ednsip) do={
/tool fetch url=&ldquo;$members$ednsstr&rdquo; mode=http user=$ednsuser password=$ednspass dst-path=$ednshost
:delay 4
:global result [/file get $ednshost contents]
:log info ($ednshost . &ldquo; &rdquo; .$result)
/file remove $ednshost ;
}
}
```</p>

<p>以上script来自：<a href="http://h2appy.blog.51cto.com/609721/776837">ROS DDNS update script</a></p>

<p>修改一下 <code>ednsuser</code>/<code>ednspass</code>/<code>ednshost</code>就可以使用了。</p>

<p>简单来说这个script就是利用ROS的 <code>/tool fetch</code> 来访问一个网页：</p>

<p><a href="http://members.3322.net/dyndns/update?system=dyndns&amp;hostname=xxx&amp;myip=xxx">http://members.3322.net/dyndns/update?system=dyndns&amp;hostname=xxx&amp;myip=xxx</a></p>

<p>这个方法也是3322官方提供的，3322的server就可以从这个http请求中得到你的真实IP地址了。</p>

<p>然后就是来到ROS的 <code>System</code> &ndash;> <code>Scheduler</code>，点击加号按钮：</p>

<p><img src="/downloads/image/ros-system-scheduler.png" alt="ROS Add scheduler" /></p>

<p>把上面的你修改好的script贴到 <code>OnEvent</code> 那个编辑框里面，设定好名字和Interval就OK了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RouterOS配置记录（二）：chnroutes]]></title>
    <link href="http://www.markzhang.cn/blog/2014/08/20/ros-chnroutes/"/>
    <updated>2014-08-20T16:52:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/08/20/ros-chnroutes</id>
    <content type="html"><![CDATA[<p>之前写过一篇博客：Chnroutes的使用（Mac OS X Mavericks），讲述了在我的macbook pro上安装chnroutes，从而可以在上网的时候区分国内国外的IP，最终让国外的IP访问走VPN，国内的不走VPN。</p>

<p><a href="http://markzhang.cn/blog/2013/12/04/chnroutes-on-mac/">Chnroutes的使用（Mac OS X Mavericks）</a></p>

<p>现在有了ROS，事情就变的更加棒了，把chnroutes做在ROS上，那所有的网络设备就自动具备了chnroutes的功能。所以在刚配置好了ROS之后，我就尝试配置了chnroutes。</p>

<!-- more -->


<p>首先我的配置参考了这篇文章：</p>

<p><a href="http://autorosvpn.blogspot.jp/2013/05/ros-vpn.html">ros智能vpn自动翻墙</a></p>

<p>总的说来，在ROS上配置chnroutes，就是几个步骤：</p>

<ol>
<li>导入国内IP地址表</li>
<li>对每个请求中的IP进行查找，如果不在国内IP地址列表中的，就标记一下</li>
<li>在路由表中，根据标记，让数据走正常网关或是VPN</li>
</ol>


<h2>导入国内IP地址表</h2>

<p>这个其实非常简单，用VI就搞定了。首先根据我之前的文章：Chnroutes的使用（Mac OS X Mavericks），在我的MBP上运行 <code>./chnroutes.py -p mac</code>，就会生成ip-up/ip-down这两个文件。</p>

<p>ip-up文件里面就包含了所有的国内IP地址，所以接下来我们只需要将这个文件修改成ROS能认识的格式就行了，用VI就可以轻松搞定了。这里给出一个我目前在使用的（2014/7/22的数据）：</p>

<p><a href="/downloads/file/chinasites.rsc">2014/7/22 国内IP地址列表</a></p>

<p>一般来说，这个列表不需要经常更新，在IPv4地址已经差不多消耗殆尽的今天，你能经常访问到新的属于国内的IP地址也不是件容易的事情。</p>

<p>接下来就是把这个 <code>chinasites.rsc</code> 上传到RouterBoard上就OK了，可以用Filezilla，使用FTP的方式。或者你如果是windows平台，使用WinBox的话，也可以用拖拽的方式将文件拖到ROS的 <code>Files</code> 对话框中即可。</p>

<p>上传了之后，点击ROS的 <code>New Terminal</code>，在命令行下输入：<code>import chinasites.rsc</code>，所有的国内IP地址列表就导入了，在ROS的 <code>IP</code> &ndash;> <code>Firewall</code> &ndash;> <code>Address Lists</code> 中就可以看到：</p>

<p><img src="/downloads/image/ros-ip-firewall-address-lists.png" alt="China IP address list" /></p>

<p>在上图中可以看到，我们给这些IP地址都设了一个名字叫做 <code>novpn</code>，表示路由这些地址的时候，不需要走VPN，后面会看到如何使用的。</p>

<h2>标记Packets</h2>

<p>这是Linux netfilter/iptables非常强大的功能体现了，首先来看在ROS里面是怎么配置的：</p>

<p>``` bash
Flags: X &ndash; disabled, I &ndash; invalid, D &ndash; dynamic
 0   chain=prerouting action=mark-routing new-routing-mark=vpn passthrough=yes</p>

<pre><code> dst-address=!192.168.88.0/24 dst-address-list=!novpn 
</code></pre>

<p>```</p>

<p>这个配置项位于：<code>IP</code> &ndash;> <code>Firewall</code> &ndash;> <code>Mangle</code>。首先这个配置针对的是 <code>prerouting</code> 表，对Mangle/Prerouting还不清楚的，看我的这篇文章：</p>

<p><a href="http://markzhang.cn/blog/2014/07/23/netfilter-overview/">Linux Netfilter overview</a></p>

<p>然后，<code>dst-address-list=!novpn</code> 其实意思就是，如果目的地址不在 <code>novpn</code> 这个address list中的；最后 <code>action=mark-routing new-routing-mark=vpn</code> 就表示如果目的地址不在 <code>novpn</code> 中的，就给这些packet打上一个名为 <code>vpn</code> 的routing标记。</p>

<p>当然，上述命令中的：<code>dst-address=!192.168.88.0/24</code>，这表示本地局域网的地址不受该条规则影响，这也是非常好理解的。</p>

<p>所以总结来说，我们通过Linux netfilter的Mangle功能，成功的给不属于国内IP地址列表中的packet，打上了一个名为 <code>vpn</code> 的路由标记。</p>

<p>这里需要提一下 <code>passthrough=yes</code> 这个东西的作用。<code>passthrough=yes</code> 表示packet经过了本规则的处理之后，还会继续往下传递，给下面的rules继续处理。相反的例子是 <code>IP</code> &ndash;> <code>Firewall</code> &ndash;> <code>Fliter</code> 中的规则，比如 <code>accept</code> 或者 <code>drop</code> ，一旦匹配到了这些规则，就不会再继续往下处理了（下面的规则就不会再去执行了），所以这就是为什么我在上篇文章中提到说有一条 <code>drop</code> 的规则一定要放在最后。</p>

<p>所以这里我们设置了 <code>passthrough=yes</code> ，表示位于我们本条规则之后的规则还有机会继续被得到执行，所以你可以继续添加标记类的规则，或者其他任何Mangle的规则。所以再次重申，在Filter/Mangle这些表里，规则的顺序是很有影响的。</p>

<h2>添加路由</h2>

<p>点击 <code>IP</code> &ndash;> <code>Routes</code>，在 <code>Routes</code> 标签页，点击加号按钮添加一条路由规则：</p>

<p><img src="/downloads/image/ros-ip-routes.png" alt="ROS add routing" /></p>

<ul>
<li><p>Dst. Address，这表示哪些目的IP地址受这条路由影响，这里填写 <code>0.0.0.0/0</code> 表示所有IP地址。</p></li>
<li><p>Gateway，这表示这条路由走哪个Interface，一般来说，这就是你的VPN的PPP连接了。</p></li>
<li><p>Distance，这表示这条路由的权重。在之前的一篇介绍ROS的基础设置的文章中，有说到我们添加了一个PPPoE client来实现宽带拨号，在创建那个PPPoE Client的时候，有一个选项叫做：<code>Default Route Distance</code>，我的这项设置是10，而如上图所示，现在我们添加的这条路由，我的设置是1。其实很好理解，我们在添加PPPoE Client的时候，有选择 <code>Add Default Route</code>，所谓Default route就是路由所有IP地址：<code>0.0.0.0/0</code>的，那么现在我们又添加了一条路由，也是路由所有IP地址的，那应该选哪条路由呢？这就是根据路由的Distance来决定的。Distance值越小的，权重越高。</p></li>
<li><p>Routing Mark，这里填写的是 <code>vpn</code>。</p></li>
</ul>


<p>所以总结来说，这条路由的作用就是，对于 <code>Routing Mark</code> 是 <code>vpn</code> 的packet，走我们指定的 <code>Gateway</code>。而且由于这条路由的权重高于默认路由，所以就实现了非国内的IP地址，走我们指定的Gateway，而国内的IP地址还是走默认路由（宽带连接的那条路由）。</p>

<p>写了一堆字，其实做一下就是两分钟的事。ROS的确是非常Power的东西。</p>
]]></content>
  </entry>
  
</feed>
