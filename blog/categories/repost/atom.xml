<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: repost | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/repost/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2015-05-14T03:41:57+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GEM - Graphics Execution Manager 介绍]]></title>
    <link href="http://www.markzhang.cn/blog/2015/03/02/gem-introduction/"/>
    <updated>2015-03-02T11:15:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/03/02/gem-introduction</id>
    <content type="html"><![CDATA[<p>本文来自：<a href="http://lwn.net/Articles/283798/">http://lwn.net/Articles/283798/</a></p>

<p>NOTE: Currently the buffer creation/read/write are implemented by driver specified ioctls. So right now you can&rsquo;t find functions like &ldquo;drm_gem_create&rdquo; in kernel sources.
And that&rsquo;s also why we need &ldquo;dumb buffer&rdquo; in drm&rsquo;s ioctls(dumb_create, dumb_destroy&hellip;)</p>

<!-- more -->


<p>原文请看：<a href="http://lwn.net/Articles/283798/">http://lwn.net/Articles/283798/</a></p>

<p>GEM是Intel建议提出并实现的，所以这篇文章是GEM maintainer写的introduction，非常详尽，只是对照现在的kernel来说，内容已经有一点outdate（所以我写了上面的NOTE），但是大部分内容都是OK的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转载：GEM vs TTM]]></title>
    <link href="http://www.markzhang.cn/blog/2015/03/02/gem-vs-ttm/"/>
    <updated>2015-03-02T11:09:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/03/02/gem-vs-ttm</id>
    <content type="html"><![CDATA[<p>本文来自: <a href="http://lwn.net/Articles/283793/">http://lwn.net/Articles/283793/</a></p>

<p>Getting high-performance, three-dimensional graphics working under Linux is quite a challenge even when the fundamental hardware programming information is available.  One component of this problem is memory management: a graphics processor (GPU) is, essentially, a computer of its own with a distinct view of memory.  Managing the GPU&rsquo;s memory &ndash; and its view of system RAM &ndash; must be done carefully if the resulting system is intended to work at all, much less with acceptable performance.</p>

<p>Not that long ago, it appeared that this problem had been solved with thetranslation table maps (TTM) subsystem.  TTM remains outside of the mainline kernel, though, as do all drivers which use it.  A recent queryabout what would be required to get TTM merged led to an interesting discussion where it turned out that, in fact, TTM may not be the future of graphics memory management after all.</p>

<!-- more -->


<p></p>

<p>A number of complaints about TTM have been raised.  Its API is far larger than is needed for any free Linux driver; it has, in other words, a certain amount of code dedicated to the needs of binary-only drivers.  The fencing mechanism (which manages concurrency between the host CPUs and the GPU) is seen as being complex, difficult to work with, and not always yielding the best performance.  Heavy use of memory-mapped buffers can create performance problems of its own.  The TTM API is an exercise in trying to provide for everything in all situations;  as a result it is, according to some driver developers, hard to match to any specific hardware, hard to get started with, and still insufficiently flexible.  And, importantly, there is a distinct shortage of working free drivers which use TTM.  So Dave Airlie worries:</p>

<blockquote><p>I was hoping that by now, one of the radeon or nouveau drivers would have adopted TTM, or at least demoed something working using it, this hasn&rsquo;t happened which worries me&hellip;  The real question is whether TTM suits the driver writers for use in Linux desktop and embedded environments, and I think so far I&rsquo;m not seeing enough positive feedback from the desktop side
All of these worries would seem to be moot, since TTM is available and there is nothing else out there.  Except, as it turns out, there issomething out there: it&rsquo;s called the Graphics Execution Manager, or GEM. The Intel-sponsored GEM project is all of one month old, as of this writing. The GEM developers had not really intended to announce their work quite yet, but the TTM discussion brought the issue to the fore.</p></blockquote>

<p>Keith Packard&rsquo;s introduction to GEM includes a document describing the API as it exists so far.  There are a number of significant differences in how GEM does things.  To begin with, GEM allocates graphical buffer objects using normal, anonymous, user-space memory.  That means that these buffers can be forced out to swap when memory gets tight.  There are clear advantages to this approach, and not just in memory flexibility: it also makes the implementation of suspend and resume easier by automatically providing backing store for all buffer objects.</p>

<p>The GEM API tries to do away with the mapping of buffers into user space. That mapping is expensive to do and brings all sorts of interesting issues with cache coherency between the CPU and GPU.  So, instead, buffer objects are accessed with simple read() and write() calls.  Or, at least, that&rsquo;s the way it would be if the GEM developers could attach a file descriptor to each buffer object.  The kernel, however, does not make the management of that many file descriptors easy (yet), so the real API uses separate handles for buffer objects and a series of ioctl()calls.</p>

<p>That said, it is possible to map a buffer object into user space.  But then the user-space driver must take explicit responsibility for the management of cache coherency.  To that end there is a set of ioctl()calls for managing the &ldquo;domain&rdquo; of a buffer; the domain, essentially, describes which component of the system owns the buffer and is entitled to operate on it.  Changing the domains (there are two, one for read access and one for writes) of a buffer will perform the necessary cache flushes.  In a sense, this mechanism resembles the streaming DMA API, where the ownership of DMA buffers can be switched between the CPU and the peripheral controller. That is not entirely surprising, as a very similar problem is being solved.</p>

<p>This API also does away with the need for explicit fence operations. Instead, a CPU operation which requires access to a buffer will simply wait, if necessary, for the GPU to finish any outstanding operations involving that buffer.</p>

<p>Finally, the GEM API does not try to solve the entire problem; a number of important operations (such as the execution of a set of GPU commands) are left for the hardware-specific driver to implement.  GEM is, thus, quite specific to the needs of Intel&rsquo;s driver at this time; it does not try for the same sort of generality that was a goal of TTM.  As describedby Eric Anholt:</p>

<blockquote><p>The problem with TTM is that it&rsquo;s designed to expose one general API for all hardware, when that&rsquo;s not what our drivers want&hellip; We&rsquo;re trying to come at it from the other direction: Implement one driver well.  When someone else implements another driver and finds that there&rsquo;s code that should be common, make it into a support library and share it.</p></blockquote>

<p>The advantage to this approach is that it makes it relatively easy to create something which works well with Intel drivers.  And that may well be a good start; one working set of drivers is better than none.  On the other hand, that means that a significant amount of work may be required to get GEM to the point where it can support drivers for other hardware.  There seem to be two points of view on how that might be done: (1) add capabilities to GEM when needed by other drivers, or (2) have each driver use its own memory manager.</p>

<p>The first approach is, in many ways, more pleasing.  But it implies that the GEM API could change significantly over time.  And that, in turn, could delay the merging of the whole thing; the GEM API is exported to user space, and, as a result, must remain compatible as things change.  So there may be resistance to a quick merge of an API which looks like it may yet have to evolve for some time.</p>

<p>The second approach, instead, is best describedby Dave Airlie:</p>

<blockquote><p>Well the thing is I can&rsquo;t believe we don&rsquo;t know enough to do this in some way generically, but maybe the TTM vs GEM thing proves its not possible.  So we can then punt to having one memory manager per driver, but I suspect this will be a maintenance nightmare, so if people decide this is the way forward, I&rsquo;m happy to see it happen. However the person submitting the memory manager n+1 must damn well be willing to stand behind the interface until time ends, and explain why they couldn&rsquo;t re-use 1..n memory managers.</p></blockquote>

<p>One other remaining issue is performance.  Keith Whitwell posted some benchmark results showing that the i915 driver performs significantly worse with either TTM or GEM than without.  Keith Packard gets different results, though; his tests show that the GEM-based driver is significantly faster.  Clearly there is a need for a set of consistent benchmarks; performance of graphics drivers is important, but performance cannot be optimized if it cannot be reliably measured.</p>

<p>The use of anonymous memory also raises some performance concerns: a first-person shooter game will not provide the same experience if its blood-and-gore textures must be continually paged in.  Anonymous memory can also be high memory, and, thus, not necessarily accessible via a 32-bit pointer.  Some GPU hardware cannot address high memory; that will likely force the use of bounce buffers within the kernel.  In the end, GEM will have to prove that it can deliver good performance; GEM&rsquo;s developers are highly motivated to make their hardware look good, so there is a reasonable chance that things will work out on this front.</p>

<p>The conclusion to draw from all of this is that the GPU memory management problem cannot yet be considered solved.  GEM might eventually become that solution, but it is a very new API which still needs a fair amount of work.  There is likely to be a lot of work yet to be done in this area.</p>

<p>(Thanks to Timo Jyrinki for suggesting this topic.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRM memory management - 最好的GEM/TTM/PRIME解释]]></title>
    <link href="http://www.markzhang.cn/blog/2015/03/02/drm-memory-management/"/>
    <updated>2015-03-02T10:37:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/03/02/drm-memory-management</id>
    <content type="html"><![CDATA[<p>本文转载自：<a href="https://www.kernel.org/doc/htmldocs/drm/drm-memory-management.html">https://www.kernel.org/doc/htmldocs/drm/drm-memory-management.html</a></p>

<p><strong>Memory management</strong></p>

<ul>
<li>The Translation Table Manager (TTM)</li>
<li>The Graphics Execution Manager (GEM)</li>
<li>VMA Offset Manager</li>
<li>PRIME Buffer Sharing</li>
<li>PRIME Function References</li>
<li>DRM MM Range Allocator</li>
<li>DRM MM Range Allocator Function References</li>
<li>CMA Helper Functions Reference</li>
</ul>


<!-- more -->


<p>Modern Linux systems require large amount of graphics memory to store frame buffers, textures, vertices and other graphics-related data. Given the very dynamic nature of many of that data, managing graphics memory efficiently is thus crucial for the graphics stack and plays a central role in the DRM infrastructure.</p>

<p>The DRM core includes two memory managers, namely Translation Table Maps (TTM) and Graphics Execution Manager (GEM). TTM was the first DRM memory manager to be developed and tried to be a one-size-fits-them all solution. It provides a single userspace API to accommodate the need of all hardware, supporting both Unified Memory Architecture (UMA) devices and devices with dedicated video RAM (i.e. most discrete video cards). This resulted in a large, complex piece of code that turned out to be hard to use for driver development.</p>

<p>GEM started as an Intel-sponsored project in reaction to TTM&rsquo;s complexity. Its design philosophy is completely different: instead of providing a solution to every graphics memory-related problems, GEM identified common code between drivers and created a support library to share it. GEM has simpler initialization and execution requirements than TTM, but has no video RAM management capabilities and is thus limited to UMA devices.</p>

<p><strong>The Translation Table Manager (TTM)</strong></p>

<p>TTM initialization</p>

<p>Drivers wishing to support TTM must fill out a drm_bo_driver structure. The structure contains several fields with function pointers for initializing the TTM, allocating and freeing memory, waiting for command completion and fence synchronization, and memory migration. See the radeon_ttm.c file for an example of usage.</p>

<p>The ttm_global_reference structure is made up of several fields:</p>

<p>``` cpp
struct ttm_global_reference {</p>

<pre><code>enum ttm_global_types global_type;
size_t size;
void *object;
int (*init) (struct ttm_global_reference *);
void (*release) (struct ttm_global_reference *);
</code></pre>

<p>};
```</p>

<p>There should be one global reference structure for your memory manager as a whole, and there will be others for each object created by the memory manager at runtime. Your global TTM should have a type of TTM_GLOBAL_TTM_MEM. The size field for the global object should be sizeof(struct ttm_mem_global), and the init and release hooks should point at your driver-specific init and release routines, which probably eventually call ttm_mem_global_init and ttm_mem_global_release, respectively.</p>

<p>Once your global TTM accounting structure is set up and initialized by calling ttm_global_item_ref() on it, you need to create a buffer object TTM to provide a pool for buffer object allocation by clients and the kernel itself. The type of this object should be TTM_GLOBAL_TTM_BO, and its size should be sizeof(struct ttm_bo_global). Again, driver-specific init and release functions may be provided, likely eventually calling ttm_bo_global_init() and ttm_bo_global_release(), respectively. Also, like the previous object, ttm_global_item_ref() is used to create an initial reference count for the TTM, which will call your initialization function.</p>

<p><strong>The Graphics Execution Manager (GEM)</strong></p>

<p>GEM Initialization
GEM Objects Creation
GEM Objects Lifetime
GEM Objects Naming
GEM Objects Mapping
Memory Coherency
Command Execution
GEM Function Reference</p>

<p>The GEM design approach has resulted in a memory manager that doesn&rsquo;t provide full coverage of all (or even all common) use cases in its userspace or kernel API. GEM exposes a set of standard memory-related operations to userspace and a set of helper functions to drivers, and let drivers implement hardware-specific operations with their own private API.</p>

<p>The GEM userspace API is described in the GEM &ndash; the Graphics Execution Manager article on LWN. While slightly outdated, the document provides a good overview of the GEM API principles. Buffer allocation and read and write operations, described as part of the common GEM API, are currently implemented using driver-specific ioctls.</p>

<p>GEM is data-agnostic. It manages abstract buffer objects without knowing what individual buffers contain. APIs that require knowledge of buffer contents or purpose, such as buffer allocation or synchronization primitives, are thus outside of the scope of GEM and must be implemented using driver-specific ioctls.</p>

<p>On a fundamental level, GEM involves several operations:</p>

<ul>
<li>Memory allocation and freeing</li>
<li>Command execution</li>
<li>Aperture management at command execution time</li>
</ul>


<p>Buffer object allocation is relatively straightforward and largely provided by Linux&rsquo;s shmem layer, which provides memory to back each object.</p>

<p>Device-specific operations, such as command execution, pinning, buffer read &amp; write, mapping, and domain ownership transfers are left to driver-specific ioctls.</p>

<p><strong>GEM Initialization</strong></p>

<p>Drivers that use GEM must set the DRIVER_GEM bit in the struct drm_driver driver_features field. The DRM core will then automatically initialize the GEM core before calling the load operation. Behind the scene, this will create a DRM Memory Manager object which provides an address space pool for object allocation.</p>

<p>In a KMS configuration, drivers need to allocate and initialize a command ring buffer following core GEM initialization if required by the hardware. UMA devices usually have what is called a &ldquo;stolen&rdquo; memory region, which provides space for the initial framebuffer and large, contiguous memory regions required by the device. This space is typically not managed by GEM, and must be initialized separately into its own DRM MM object.</p>

<p><strong>GEM Objects Creation</strong></p>

<p>GEM splits creation of GEM objects and allocation of the memory that backs them in two distinct operations.</p>

<p>GEM objects are represented by an instance of struct drm_gem_object. Drivers usually need to extend GEM objects with private information and thus create a driver-specific GEM object structure type that embeds an instance of struct drm_gem_object.</p>

<p>To create a GEM object, a driver allocates memory for an instance of its specific GEM object type and initializes the embedded struct drm_gem_object with a call to drm_gem_object_init. The function takes a pointer to the DRM device, a pointer to the GEM object and the buffer object size in bytes.</p>

<p>GEM uses shmem to allocate anonymous pageable memory. drm_gem_object_init will create an shmfs file of the requested size and store it into the struct drm_gem_object filp field. The memory is used as either main storage for the object when the graphics hardware uses system memory directly or as a backing store otherwise.</p>

<p>Drivers are responsible for the actual physical pages allocation by calling shmem_read_mapping_page_gfp for each page. Note that they can decide to allocate pages when initializing the GEM object, or to delay allocation until the memory is needed (for instance when a page fault occurs as a result of a userspace memory access or when the driver needs to start a DMA transfer involving the memory).</p>

<p>Anonymous pageable memory allocation is not always desired, for instance when the hardware requires physically contiguous system memory as is often the case in embedded devices. Drivers can create GEM objects with no shmfs backing (called private GEM objects) by initializing them with a call to drm_gem_private_object_init instead of drm_gem_object_init. Storage for private GEM objects must be managed by drivers.</p>

<p>Drivers that do not need to extend GEM objects with private information can call the drm_gem_object_alloc function to allocate and initialize a struct drm_gem_object instance. The GEM core will call the optional driver gem_init_object operation after initializing the GEM object with drm_gem_object_init.</p>

<p>int (<em>gem_init_object) (struct drm_gem_object </em>obj);</p>

<p>No alloc-and-init function exists for private GEM objects.</p>

<p><strong>GEM Objects Lifetime</strong></p>

<p>All GEM objects are reference-counted by the GEM core. References can be acquired and release by calling drm_gem_object_reference and drm_gem_object_unreference respectively. The caller must hold the drm_device struct_mutex lock. As a convenience, GEM provides the drm_gem_object_reference_unlocked and drm_gem_object_unreference_unlocked functions that can be called without holding the lock.</p>

<p>When the last reference to a GEM object is released the GEM core calls the drm_driver gem_free_object operation. That operation is mandatory for GEM-enabled drivers and must free the GEM object and all associated resources.</p>

<p>void (<em>gem_free_object) (struct drm_gem_object </em>obj);</p>

<p>Drivers are responsible for freeing all GEM object resources, including the resources created by the GEM core. If an mmap offset has been created for the object (in which case drm_gem_object::map_list::map is not NULL) it must be freed by a call to drm_gem_free_mmap_offset. The shmfs backing store must be released by calling drm_gem_object_release (that function can safely be called if no shmfs backing store has been created).</p>

<p><strong>GEM Objects Naming</strong></p>

<p>Communication between userspace and the kernel refers to GEM objects using local handles, global names or, more recently, file descriptors. All of those are 32-bit integer values; the usual Linux kernel limits apply to the file descriptors.</p>

<p>GEM handles are local to a DRM file. Applications get a handle to a GEM object through a driver-specific ioctl, and can use that handle to refer to the GEM object in other standard or driver-specific ioctls. Closing a DRM file handle frees all its GEM handles and dereferences the associated GEM objects.</p>

<p>To create a handle for a GEM object drivers call drm_gem_handle_create. The function takes a pointer to the DRM file and the GEM object and returns a locally unique handle. When the handle is no longer needed drivers delete it with a call to drm_gem_handle_delete. Finally the GEM object associated with a handle can be retrieved by a call to drm_gem_object_lookup.</p>

<p>Handles don&rsquo;t take ownership of GEM objects, they only take a reference to the object that will be dropped when the handle is destroyed. To avoid leaking GEM objects, drivers must make sure they drop the reference(s) they own (such as the initial reference taken at object creation time) as appropriate, without any special consideration for the handle. For example, in the particular case of combined GEM object and handle creation in the implementation of the dumb_create operation, drivers must drop the initial reference to the GEM object before returning the handle.</p>

<p>GEM names are similar in purpose to handles but are not local to DRM files. They can be passed between processes to reference a GEM object globally. Names can&rsquo;t be used directly to refer to objects in the DRM API, applications must convert handles to names and names to handles using the DRM_IOCTL_GEM_FLINK and DRM_IOCTL_GEM_OPEN ioctls respectively. The conversion is handled by the DRM core without any driver-specific support.</p>

<p>GEM also supports buffer sharing with dma-buf file descriptors through PRIME. GEM-based drivers must use the provided helpers functions to implement the exporting and importing correctly. See the section called “PRIME Buffer Sharing”. Since sharing file descriptors is inherently more secure than the easily guessable and global GEM names it is the preferred buffer sharing mechanism. Sharing buffers through GEM names is only supported for legacy userspace. Furthermore PRIME also allows cross-device buffer sharing since it is based on dma-bufs.</p>

<p><strong>GEM Objects Mapping</strong></p>

<p>Because mapping operations are fairly heavyweight GEM favours read/write-like access to buffers, implemented through driver-specific ioctls, over mapping buffers to userspace. However, when random access to the buffer is needed (to perform software rendering for instance), direct access to the object can be more efficient.</p>

<p>The mmap system call can&rsquo;t be used directly to map GEM objects, as they don&rsquo;t have their own file handle. Two alternative methods currently co-exist to map GEM objects to userspace. The first method uses a driver-specific ioctl to perform the mapping operation, calling do_mmap under the hood. This is often considered dubious, seems to be discouraged for new GEM-enabled drivers, and will thus not be described here.</p>

<p>The second method uses the mmap system call on the DRM file handle.</p>

<p>``` cpp
void <em>mmap(void </em>addr, size_t length, int prot, int flags, int fd,</p>

<pre><code>         off_t offset);
</code></pre>

<p>```</p>

<p>DRM identifies the GEM object to be mapped by a fake offset passed through the mmap offset argument. Prior to being mapped, a GEM object must thus be associated with a fake offset. To do so, drivers must call drm_gem_create_mmap_offset on the object. The function allocates a fake offset range from a pool and stores the offset divided by PAGE_SIZE in obj->map_list.hash.key. Care must be taken not to call drm_gem_create_mmap_offset if a fake offset has already been allocated for the object. This can be tested by obj->map_list.map being non-NULL.</p>

<p>Once allocated, the fake offset value (obj->map_list.hash.key &lt;&lt; PAGE_SHIFT) must be passed to the application in a driver-specific way and can then be used as the mmap offset argument.</p>

<p>The GEM core provides a helper method drm_gem_mmap to handle object mapping. The method can be set directly as the mmap file operation handler. It will look up the GEM object based on the offset value and set the VMA operations to the drm_driver gem_vm_ops field. Note that drm_gem_mmap doesn&rsquo;t map memory to userspace, but relies on the driver-provided fault handler to map pages individually.</p>

<p>To use drm_gem_mmap, drivers must fill the struct drm_driver gem_vm_ops field with a pointer to VM operations.</p>

<p>``` cpp
struct vm_operations_struct *gem_vm_ops</p>

<p>  struct vm_operations_struct {</p>

<pre><code>      void (*open)(struct vm_area_struct * area);
      void (*close)(struct vm_area_struct * area);
      int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf);
</code></pre>

<p>  };
```</p>

<p>The open and close operations must update the GEM object reference count. Drivers can use the drm_gem_vm_open and drm_gem_vm_close helper functions directly as open and close handlers.</p>

<p>The fault operation handler is responsible for mapping individual pages to userspace when a page fault occurs. Depending on the memory allocation scheme, drivers can allocate pages at fault time, or can decide to allocate memory for the GEM object at the time the object is created.</p>

<p>Drivers that want to map the GEM object upfront instead of handling page faults can implement their own mmap file operation handler.</p>

<p><strong>Memory Coherency</strong></p>

<p>When mapped to the device or used in a command buffer, backing pages for an object are flushed to memory and marked write combined so as to be coherent with the GPU. Likewise, if the CPU accesses an object after the GPU has finished rendering to the object, then the object must be made coherent with the CPU&rsquo;s view of memory, usually involving GPU cache flushing of various kinds. This core CPU&lt;&ndash;>GPU coherency management is provided by a device-specific ioctl, which evaluates an object&rsquo;s current domain and performs any necessary flushing or synchronization to put the object into the desired coherency domain (note that the object may be busy, i.e. an active render target; in that case, setting the domain blocks the client and waits for rendering to complete before performing any necessary flushing operations).</p>

<p><strong>Command Execution</strong></p>

<p>Perhaps the most important GEM function for GPU devices is providing a command execution interface to clients. Client programs construct command buffers containing references to previously allocated memory objects, and then submit them to GEM. At that point, GEM takes care to bind all the objects into the GTT, execute the buffer, and provide necessary synchronization between clients accessing the same buffers. This often involves evicting some objects from the GTT and re-binding others (a fairly expensive operation), and providing relocation support which hides fixed GTT offsets from clients. Clients must take care not to submit command buffers that reference more objects than can fit in the GTT; otherwise, GEM will reject them and no rendering will occur. Similarly, if several objects in the buffer require fence registers to be allocated for correct rendering (e.g. 2D blits on pre-965 chips), care must be taken not to require more fence registers than are available to the client. Such resource management should be abstracted from the client in libdrm.</p>

<p><strong>GEM Function Reference</strong></p>

<p>VMA Offset Manager</p>

<p><code>cpp
drm_vma_offset_manager_init — Initialize new offset-manager
drm_vma_offset_manager_destroy — Destroy offset manager
drm_vma_offset_lookup — Find node in offset space
drm_vma_offset_lookup_locked — Find node in offset space
drm_vma_offset_add — Add offset node to manager
drm_vma_offset_remove — Remove offset node from manager
drm_vma_node_allow — Add open-file to list of allowed users
drm_vma_node_revoke — Remove open-file from list of allowed users
drm_vma_node_is_allowed — Check whether an open-file is granted access
drm_vma_offset_exact_lookup — Look up node by exact address
drm_vma_offset_lock_lookup — Lock lookup for extended private use
drm_vma_offset_unlock_lookup — Unlock lookup for extended private use
drm_vma_node_reset — Initialize or reset node object
drm_vma_node_start — Return start address for page-based addressing
drm_vma_node_size — Return size (page-based)
drm_vma_node_has_offset — Check whether node is added to offset manager
drm_vma_node_offset_addr — Return sanitized offset for user-space mmaps
drm_vma_node_unmap — Unmap offset node
drm_vma_node_verify_access — Access verification helper for TTM
</code></p>

<p>The vma-manager is responsible to map arbitrary driver-dependent memory regions into the linear user address-space. It provides offsets to the caller which can then be used on the address_space of the drm-device. It takes care to not overlap regions, size them appropriately and to not confuse mm-core by inconsistent fake vm_pgoff fields. Drivers shouldn&rsquo;t use this for object placement in VMEM. This manager should only be used to manage mappings into linear user-space VMs.</p>

<p>We use drm_mm as backend to manage object allocations. But it is highly optimized for alloc/free calls, not lookups. Hence, we use an rb-tree to speed up offset lookups.</p>

<p>You must not use multiple offset managers on a single address_space. Otherwise, mm-core will be unable to tear down memory mappings as the VM will no longer be linear.</p>

<p>This offset manager works on page-based addresses. That is, every argument and return code (with the exception of drm_vma_node_offset_addr) is given in number of pages, not number of bytes. That means, object sizes and offsets must always be page-aligned (as usual). If you want to get a valid byte-based user-space address for a given offset, please see drm_vma_node_offset_addr.</p>

<p>Additionally to offset management, the vma offset manager also handles access management. For every open-file context that is allowed to access a given node, you must call drm_vma_node_allow. Otherwise, an mmap call on this open-file with the offset of the node will fail with -EACCES. To revoke access again, use drm_vma_node_revoke. However, the caller is responsible for destroying already existing mappings, if required.</p>

<p><strong>PRIME Buffer Sharing</strong></p>

<p>Overview and Driver Interface
PRIME Helper Functions
PRIME is the cross device buffer sharing framework in drm, originally created for the OPTIMUS range of multi-gpu platforms. To userspace PRIME buffers are dma-buf based file descriptors.</p>

<p><strong>Overview and Driver Interface</strong></p>

<p>Similar to GEM global names, PRIME file descriptors are also used to share buffer objects across processes. They offer additional security: as file descriptors must be explicitly sent over UNIX domain sockets to be shared between applications, they can&rsquo;t be guessed like the globally unique GEM names.</p>

<p>Drivers that support the PRIME API must set the DRIVER_PRIME bit in the struct drm_driver driver_features field, and implement the prime_handle_to_fd and prime_fd_to_handle operations.</p>

<p>``` cpp
int (<em>prime_handle_to_fd)(struct drm_device </em>dev,</p>

<pre><code>                      struct drm_file *file_priv, uint32_t handle,
                      uint32_t flags, int *prime_fd);
</code></pre>

<p>int (<em>prime_fd_to_handle)(struct drm_device </em>dev,</p>

<pre><code>                      struct drm_file *file_priv, int prime_fd,
                      uint32_t *handle);
</code></pre>

<p>```</p>

<p>Those two operations convert a handle to a PRIME file descriptor and vice versa. Drivers must use the kernel dma-buf buffer sharing framework to manage the PRIME file descriptors. Similar to the mode setting API PRIME is agnostic to the underlying buffer object manager, as long as handles are 32bit unsigned integers.</p>

<p>While non-GEM drivers must implement the operations themselves, GEM drivers must use the drm_gem_prime_handle_to_fd and drm_gem_prime_fd_to_handle helper functions. Those helpers rely on the driver gem_prime_export and gem_prime_import operations to create a dma-buf instance from a GEM object (dma-buf exporter role) and to create a GEM object from a dma-buf instance (dma-buf importer role).</p>

<p>``` cpp
struct dma_buf * (<em>gem_prime_export)(struct drm_device </em>dev,</p>

<pre><code>                         struct drm_gem_object *obj,
                         int flags);
</code></pre>

<p>struct drm_gem_object * (<em>gem_prime_import)(struct drm_device </em>dev,</p>

<pre><code>                                        struct dma_buf *dma_buf);
</code></pre>

<p>```</p>

<p>These two operations are mandatory for GEM drivers that support PRIME.</p>

<p><strong>PRIME Helper Functions</strong></p>

<p>Drivers can implement gem_prime_export and gem_prime_import in terms of simpler APIs by using the helper functions drm_gem_prime_export and drm_gem_prime_import. These functions implement dma-buf support in terms of five lower-level driver callbacks:</p>

<p>Export callbacks:</p>

<p><code>cpp
gem_prime_pin (optional): prepare a GEM object for exporting
gem_prime_get_sg_table: provide a scatter/gather table of pinned pages
gem_prime_vmap: vmap a buffer exported by your driver
gem_prime_vunmap: vunmap a buffer exported by your driver
</code></p>

<p>Import callback:</p>

<p><code>cpp
gem_prime_import_sg_table (import): produce a GEM object from another driver's scatter/gather table
</code></p>

<p><strong>PRIME Function References</strong></p>

<p><code>cpp
drm_gem_dmabuf_release — dma_buf release implementation for GEM
drm_gem_prime_export — helper library implementation of the export callback
drm_gem_prime_handle_to_fd — PRIME export function for GEM drivers
drm_gem_prime_import — helper library implementation of the import callback
drm_gem_prime_fd_to_handle — PRIME import function for GEM drivers
drm_prime_pages_to_sg — converts a page array into an sg list
drm_prime_sg_to_page_addr_arrays — convert an sg table into a page array
drm_prime_gem_destroy — helper to clean up a PRIME-imported GEM object
</code></p>

<p><strong>DRM MM Range Allocator</strong></p>

<p>Overview
LRU Scan/Eviction Support
Overview</p>

<p>drm_mm provides a simple range allocator. The drivers are free to use the resource allocator from the linux core if it suits them, the upside of drm_mm is that it&rsquo;s in the DRM core. Which means that it&rsquo;s easier to extend for some of the crazier special purpose needs of gpus.</p>

<p>The main data struct is drm_mm, allocations are tracked in drm_mm_node. Drivers are free to embed either of them into their own suitable datastructures. drm_mm itself will not do any allocations of its own, so if drivers choose not to embed nodes they need to still allocate them themselves.</p>

<p>The range allocator also supports reservation of preallocated blocks. This is useful for taking over initial mode setting configurations from the firmware, where an object needs to be created which exactly matches the firmware&rsquo;s scanout target. As long as the range is still free it can be inserted anytime after the allocator is initialized, which helps with avoiding looped depencies in the driver load sequence.</p>

<p>drm_mm maintains a stack of most recently freed holes, which of all simplistic datastructures seems to be a fairly decent approach to clustering allocations and avoiding too much fragmentation. This means free space searches are O(num_holes). Given that all the fancy features drm_mm supports something better would be fairly complex and since gfx thrashing is a fairly steep cliff not a real concern. Removing a node again is O(1).</p>

<p>drm_mm supports a few features: Alignment and range restrictions can be supplied. Further more every drm_mm_node has a color value (which is just an opaqua unsigned long) which in conjunction with a driver callback can be used to implement sophisticated placement restrictions. The i915 DRM driver uses this to implement guard pages between incompatible caching domains in the graphics TT.</p>

<p>Two behaviors are supported for searching and allocating: bottom-up and top-down. The default is bottom-up. Top-down allocation can be used if the memory area has different restrictions, or just to reduce fragmentation.</p>

<p>Finally iteration helpers to walk all nodes and all holes are provided as are some basic allocator dumpers for debugging.</p>

<p><strong>LRU Scan/Eviction Support</strong></p>

<p>Very often GPUs need to have continuous allocations for a given object. When evicting objects to make space for a new one it is therefore not most efficient when we simply start to select all objects from the tail of an LRU until there&rsquo;s a suitable hole: Especially for big objects or nodes that otherwise have special allocation constraints there&rsquo;s a good chance we evict lots of (smaller) objects unecessarily.</p>

<p>The DRM range allocator supports this use-case through the scanning interfaces. First a scan operation needs to be initialized with drm_mm_init_scan or drm_mm_init_scan_with_range. The the driver adds objects to the roaster (probably by walking an LRU list, but this can be freely implemented) until a suitable hole is found or there&rsquo;s no further evitable object.</p>

<p>The the driver must walk through all objects again in exactly the reverse order to restore the allocator state. Note that while the allocator is used in the scan mode no other operation is allowed.</p>

<p>Finally the driver evicts all objects selected in the scan. Adding and removing an object is O(1), and since freeing a node is also O(1) the overall complexity is O(scanned_objects). So like the free stack which needs to be walked before a scan operation even begins this is linear in the number of objects. It doesn&rsquo;t seem to hurt badly.</p>

<p><strong>DRM MM Range Allocator Function References</strong></p>

<p><code>cpp
drm_mm_reserve_node — insert an pre-initialized node
drm_mm_insert_node_generic — search for space and insert node
drm_mm_insert_node_in_range_generic — ranged search for space and insert node
drm_mm_remove_node — Remove a memory node from the allocator.
drm_mm_replace_node — move an allocation from old to new
drm_mm_init_scan — initialize lru scanning
drm_mm_init_scan_with_range — initialize range-restricted lru scanning
drm_mm_scan_add_block — add a node to the scan list
drm_mm_scan_remove_block — remove a node from the scan list
drm_mm_clean — checks whether an allocator is clean
drm_mm_init — initialize a drm-mm allocator
drm_mm_takedown — clean up a drm_mm allocator
drm_mm_debug_table — dump allocator state to dmesg
drm_mm_dump_table — dump allocator state to a seq_file
drm_mm_node_allocated — checks whether a node is allocated
drm_mm_initialized — checks whether an allocator is initialized
drm_mm_hole_node_start — computes the start of the hole following node
drm_mm_hole_node_end — computes the end of the hole following node
drm_mm_for_each_node — iterator to walk over all allocated nodes
drm_mm_for_each_hole — iterator to walk over all holes
drm_mm_insert_node — search for space and insert node
drm_mm_insert_node_in_range — ranged search for space and insert node
</code></p>

<p><strong>CMA Helper Functions Reference</strong></p>

<p><code>cpp
drm_gem_cma_create — allocate an object with the given size
drm_gem_cma_free_object — free resources associated with a CMA GEM object
drm_gem_cma_dumb_create_internal — create a dumb buffer object
drm_gem_cma_dumb_create — create a dumb buffer object
drm_gem_cma_dumb_map_offset — return the fake mmap offset for a CMA GEM object
drm_gem_cma_mmap — memory-map a CMA GEM object
drm_gem_cma_describe — describe a CMA GEM object for debugfs
drm_gem_cma_prime_get_sg_table — provide a scatter/gather table of pinned pages for a CMA GEM object
drm_gem_cma_prime_import_sg_table — produce a CMA GEM object from another driver's scatter/gather table of pinned pages
drm_gem_cma_prime_mmap — memory-map an exported CMA GEM object
drm_gem_cma_prime_vmap — map a CMA GEM object into the kernel's virtual address space
drm_gem_cma_prime_vunmap — unmap a CMA GEM object from the kernel's virtual address space
struct drm_gem_cma_object — GEM object backed by CMA memory allocations
</code></p>

<p>The Contiguous Memory Allocator reserves a pool of memory at early boot that is used to service requests for large blocks of contiguous memory.</p>

<p>The DRM GEM/CMA helpers use this allocator as a means to provide buffer objects that are physically contiguous in memory. This is useful for display drivers that are unable to map scattered buffers via an IOMMU.Memory management</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转载：我的iphone6退货之路]]></title>
    <link href="http://www.markzhang.cn/blog/2015/02/13/iphone6-refund/"/>
    <updated>2015-02-13T10:41:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/02/13/iphone6-refund</id>
    <content type="html"><![CDATA[<p>本文转载自：<a href="http://www.cnblogs.com/Romantic/p/4289363.html">http://www.cnblogs.com/Romantic/p/4289363.html</a></p>

<p>匆匆这一年又快结束了，眼看年关将近，老婆的生日也快到了，正打算给老婆买个礼物，由于现在老婆用的手机是公司的工程机，而且还是低端产品，所以一直想给老婆改善改善，也算是对老婆这一年来辛苦的默默的支持的一种肯定吧，于是我就开始网上找，哎……最近听说iphone6不错啊，火的不得了, 好吧就肾6了。没有多想打开京东，搜索产品，下单，支付一气呵成，比写代码的感觉还流畅还爽。</p>

<!-- more -->


<p>话说京东的物流还是很给力的，带着激动的心情收到iphone6plus，看到外观的确比较惊艳，2.5D屏幕，纤细的机身，结果操作了几下发现 home按键, 和power按键，手感及其的差劲，嘎巴嘎巴的脆脆的声音有异响，我本身也是从事手机行业的开发设计的，对于这个价格和这种按键质量，一下子让我失望到极点，根本无法容忍一款6000元的手机还存在这种按键异响，原本是买给老婆的礼物, 这种质量我自己都接受不了，于是第一个念头就是退货。但是由于之前知道苹果的手机是具有一些特殊性的，比如激活之类的。所以事先咨询了苹果上海总部的客服，以及了解了一些消费者权益保护法，关于7天无理由退货的细则，但是我查了网上很多人都退不了，关于苹果退货是个难啃的骨头，所以我不能轻视必须做足了功课，我从苹果官方，消费者权益保障法，京东政策三个方面出发，经过一番精心的准备, 梳理了一下要点和对策, 于是拿起了电话第一次拨通了京东客服电话……</p>

<p>跟客服沟通之后电话被直接京东售后那边，京东总部售后说他们处理不了，但是可以帮我转到成都售后那边，结果5分钟后成都售后给我打来电话，说要求我需要带着产品去苹果售后出具一份问题检验报告，拿到检测报告后才能给我办理退货，其实他说到这里我心里依然有底了，我事先做了些准备，之前早就咨询过苹果官方客服了，而且从官网上记了一些关于检测的一些政策，政策是这样说的：</p>

<blockquote><p>苹果所有产品在中国大陆是享有三包政策的, 无论是否激活使用, 只要在7天内, 任何经销商都应无理由, 无条件退换货。 而且如果15日内有质量问题, 可以直接退换货, 无需检测报告, 而且我查的结果是维修点不具备开具检测单的能力, 这明显是个陷阱</p></blockquote>

<p>另外我还准备了一些关于2014年3月是15号新的消费者权益保障法关于7天无理由退货的实施细则:</p>

<blockquote><p>新《消法》第二十五条规定：“经营者采用网络、电视、电话、邮购等方式销售商品，消费者有权自收到商品之日起七日内退货，且无需说明理由，但下列商品除外：由消费者定作的、鲜活易腐的、数字化商品、报纸期刊等商品，以及其他经消费者在购买时确认不宜退货的商品，不适用无理由退货。“</p></blockquote>

<p>令人想不到的是，客服又说了说呃，苹果手机一旦激活就属于私人定制产品，所以我们不能给你退，我说苹果官方条款是说不管激活与否都可以支持七天无理由退货，你们的网站上不仅没有在明显的位置标注而且根本就没有标注，这属于信息不完整误导消费者，并且我已经看过了你们京东自己的七天无理由退货政策中并不包含此项，我说大家咱都别浪费时间，他一听我是有备而来的，吱吱呜呜之后，说我们还是需要检测但是你可以先退回给我们。最终协商结果是两个小时之内上门取货, 7-10个工作日内给我办理退货退款。</p>

<p>听到这里是不是有大快人心的感觉，昨天我查了很多退不了的，要求出具检测报告的，说苹果产品不是7天无理由退货的商品, 激活了就不能退的等等各种拒绝的理由，而我今天的对策是不要按照他们给你设计的线路走，否则会被折腾死，因为苹果出具问题检测需要3-7个工作日，这样极有可能就不符合7天无理由退货了。</p>

<p>但是事情到这里远远没有结束，更大的麻烦在后面等着我……</p>

<p>下午3点左右京东上门取件的小伙如约打来了电话，我早就准备好了，就等上门收货了，高高兴兴带给了快递哥，我以为快递哥让我签个字收下手机就完了，可是快递哥，从兜里掏出一个小手电，我站在一边心底嘀咕着，这是手机又不是古董, 难道还得用手电来检查, 果不其然快递哥，撸了撸袖子摆好了姿势, 拿着那个小手电，开始先从手机的边缘开始照，然后又从手机正面，背面照了一遍，我则站在一边抽着烟，慢慢的等着，在我来看这不过是个流程而已，突然快递哥，说兄弟你这手机边框有一道划痕啊， 我一下子愣住了，嘴了的烟还没吐出来，我说什么，不可能怎么会有划痕呢，我昨天下午才刚刚收到的，膜我都没揭掉………… 快递哥根本不听我解释说你来看，让我盯着那个边框看，我看了一下划痕不不敢说没有，但是基本上属于指甲之类的东西滑的，不用他带的小灯肉眼很难分辨。</p>

<p>快递哥说， 对不起这个手机我可能收不了，我说那不行，这个手机有质量问题，跟划痕是两码事。 快递哥说，兄弟我理解你的心情，可是我也是按规矩办事，如果我就这样拿回去，一旦查出来有划痕，这手机就落我头上了，你这手机这么贵我一个月也挣不了多少钱，之前我同事曾经遇到过类似的一桩事，当时我同事上门收件的时候，有个小伙子也是买的苹果手机，当时外观有轻微的划痕，当然比你的要轻的多了，我同事也是拒收说你这个我收回去也入不了库的，可是小伙子说，你收吧入不了库你再给我拿回来不就完了吗，结果我同事就答应了，最后事情如大家所料，手机库管不收有划痕，当回头再找当初买手机的小伙子的时候, 无凭无据人家不承认最终，我这个可怜的哥们当了替罪羊，所以我现在也不敢给你收了。</p>

<p>要不这样吧，我现在打个电话给你报备一下把这个情况说明一下，如果他们说让我收我马上就收了，如果他们不让我收呢我也说了不算。 话说到这里，我心里这个堵得慌啊，当初我记得我收货的时候，刷卡交了钱，看了看发票，扭头就走了，根本没在现场验货，可是人家上门取货的时候，却是带着手电来了，不能说这不公平，只能怪自己大意啊。  于是我说哥们，如果你一报备的话，客服他们肯定不会让你收的，这不就小题大做了吗，而且这种轻微的划痕肉眼根本不好分辨，何必斤斤计较呢，咱们大家心里都清楚这绝对不影响二次销售。 结果快递哥说，兄弟我理解你的心情，可是你也别难为我，这样吧，我描述的时候说的轻微点，最后看着快递哥，我说好吧…………</p>

<p>一分钟后，快递哥拨通了售后，说我这边的顾客的手机有一道很小的划痕，但是特别轻微，跟头发丝似的，不好好瞅根本瞅不出来。 快递哥描述完后，电话那头隐隐约约的一阵子声音，只见快递哥不停的，嗯、嗯、嗯…………电话挂了，快递哥朝我笑了笑，我基本上知道答案了，快递哥说兄弟不好意思，他们说这单取件让停止，不让我收，我也不敢收。 不过你放心，你这个手机肯定能退掉的，我之前遇到过这种情况，我心里在想你TMD的这不扯蛋吗，你这一关都不收我咋退啊…………</p>

<p>手机照例还给我了，我一下子凉了半截子，5998，六千块钱呢，我再tmd的任性，也不能拿着六千块不当回事吧。 再说了日后我老婆拿这个手机，用的不痛快心里得有多么堵得慌啊。 不行，这个手机我还得退…………</p>

<p>400-606-5500 京东客服我再次拨通了，我把事情原委描述了一遍，客服说我们很快会派售后跟您联系的，我说我要的不是“很快”你具体给我个时间吧，客服不慌不忙的说24小时之内，我说那不行，我这个事急，你也听好了电话我录音了，耽误了时间就算你了。客服一听说先生您别生气，我会尽快的。</p>

<p>看来这帮子客服，不给点颜色看看，她不给你老老实实办事，过了二十来分钟，江苏宿迁的客服 打来了电话，听说您的手机退货的时候发现有划痕是这样吗，我说快递哥带着手电来的，他拿着手电看着划痕了，我拿肉眼还真没看到，幸亏那快递哥带的是手电，如果扛着显微镜来的话，没准我还能看到雅鲁藏布大峡谷呢，你信不信。如果顾客去买手机多少人都带着手电筒，那我承认是有划痕，如果像你们这样刁钻的话，这个划痕我不认，再有告诉你，划痕和质量问题可是两码事，如果你准备借划痕把质量问题给我忽略了，你会觉得我就此罢休吗，那客服听了，怎么会呢，这样吧，我们再派取货的上门再取吧。 具体情况我们拿回来再看…………</p>

<p>没过30分钟, 我手机又响了，果不其然又是那个快递哥，电话里问我请问您还在吗，我现在过去取货。 我说在，我再一次我把手机装好准备好，一会儿快递哥驾着小三轮又到了楼下，快递哥上来第一句话，你跟客服说啥了！我都快到家了客服又给我打电话， 我说我说啥了你不用管，不过客服有话让我转给你，快递小哥马上停下手中的活，转过身来问我说呀客服她说啥了，客服让我转告你，“有问题的不用照也能发现，没问题的你也照不出来问题，所以赶紧把兜里的手电赶紧扔了，别没事拿着瞎照”。快递小哥听着嘿嘿一笑，这次快递小哥没再掏手电。 大体检查了一下塞进了袋子, 给我一张回执单。 匆匆消失在夜色中…………此时已经是晚上7点多。</p>

<p>由于之前的沟通一直态度明确强硬，所以接下来的流程没再出什么麻烦，最后一次客服打来电话，说钱是退到余额还是退到银行卡，我立即要求退到银行卡，因为京东是不支持余额自己转到银行卡。</p>

<p>……</p>

<p>……</p>

<p>……</p>

<p>经过这一次经历，我总结了几条经验，</p>

<p>一，有时间的时候可以多了解《消费者权益保护法》《劳动权益保障法》等一些日常大家都能用到的法律条款。</p>

<p>二，在购买在网上购买东西的时候一定提前要看清楚，比如是否支持七天退货是否是属于特殊的商品，或者是咨询一下客服把自己关心的问题问清楚。</p>

<p>三，收到货物后，一定要打开包裹当场验货，很多人习惯性的拿着包裹回去再拆，其实这样是很有风险的，如果要是产品有质量问题，并且对方想抵赖的话，那就很容易吃哑巴亏。</p>

<p>四，在跟他们客服沟通的时候，尽量的多引用一些法律方面的知识，让对方知道你并不是这么容易被忽悠的，而且一定要有自己的态度，如果要是涉及到回头回复的话，一定跟客服要一个最晚的答复时间。</p>

<p>五，树立一个很强的法律观念和很强的证据意识，所有的沟通记录聊天记录，包括一些商品图片，最好做好保存。</p>

<p>最后给你大家推荐几个投诉并且管用的方式，每个投诉都会有人回你回复，并且会协调商家解决，最后给你一个回访。</p>

<p>有关消费者的投诉包括网购</p>

<p><a href="http://www.315online.com.cn/">http://www.315online.com.cn/</a></p>

<p>快递行业的投诉，因为网购很重要的一个环节就是快递</p>

<p><a href="http://sswz.chinapost.gov.cn/">http://sswz.chinapost.gov.cn/</a></p>

<p>同时，不得不说中国法制化虽然不像西方国家一样健全发达，但从我们自身时间的轨迹上来对比中国相比以前也算是有了很大的改善，</p>

<p>这就是一种进步！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[捷克武器那么好，二战面对德国为什么没一点抵抗？]]></title>
    <link href="http://www.markzhang.cn/blog/2014/11/27/czech-world-war-ii/"/>
    <updated>2014-11-27T17:39:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/11/27/czech-world-war-ii</id>
    <content type="html"><![CDATA[<p>转载自铁血社区：<a href="http://bbs.tiexue.net/post_5621844_1.html">http://bbs.tiexue.net/post_5621844_1.html</a></p>

<p>捷克斯洛伐克虽然有很好的军事工业基础，但是其人口和军队都和纳粹德国没得比，并且之前并没有为战争做好准备，不过这是次要原因。</p>

<!-- more -->


<p>最主要的原因是当时的地缘政治环境将捷克逼到了绝路。尽管现代只着重宣传纳粹德国对捷克斯洛伐克的野心，但实际上由于一战结束后中欧、东南欧版图发生巨变，这个地区聚集了大量民族矛盾和领土纠纷。如原奥匈帝国解体、波兰重新独立、南斯拉夫成立、特兰西瓦尼亚并入罗马尼亚、德国领土萎缩，这就使得中欧的国际关系变得错综复杂。各国往往呈现国土内有大量邻国主体民族国民的状况，如捷克境内有大量的德意志人（毕竟是当初奥匈的主体民族）、匈牙利人、波兰人，罗马尼亚境内有德意志人、匈牙利人，而匈牙利境内又有大量德意志人等等。其结果就是各国的矛盾套成了连环套，希望瓜分捷克的并不仅仅只有德国，而是出于各自的利益考虑，包括德国、波兰、匈牙利等邻国，还有意大利这不接壤的国家都希望肢解掉捷克，南斯拉夫态度暧昧，罗马尼亚在德国和苏联间左右摇摆。</p>

<p>法国曾经试图联合中欧小国建立一个同盟共同遏制德国扩张，甚至不惜与苏联结盟。但是这个努力显然被潜在同盟国各自的矛盾消解得一干二净。匈牙利接在德国之后试图肢解捷克，对罗马尼亚有特兰西瓦尼亚争议。后来他们如愿将捷克的有匈牙利人居住的领土吞并，顺带划走了20%捷克人。</p>

<p>波兰试图以反正捷克要被肢解，那不如让波兰也乘机收复切欣地区扩充领土好对抗德国为借口，与纳粹德国一起共同对捷克施压，其张牙舞爪的姿态比德国还生猛。波兰甚至为了消除罗马尼亚同意苏军过境的可能，撺掇本来对捷克无野心的罗马尼亚共同参与瓜分捷克。而那个壮大波兰的借口也被波兰用来解释他们威胁吞并立陶宛的举动，立陶宛是因有苏联撑腰才顶住了压力，由于有德国的威胁，此时的苏联还是很仗义的（颇为黑色幽默，40年恰是苏联同意德国吞并立陶宛）。后来波兰获得了捷克的切欣地区。</p>

<p>罗马尼亚的态度最能说明问题，各国认为如历史上那样对付捷克最符合自己利益。首先罗马尼亚与苏联接壤，并且有西乌克兰领土争议。其次罗马尼亚与匈牙利态度紧张，尽管它与德国不接壤，但是匈牙利明显准备做德国的跟班。因此罗马尼亚做出了最符合自身利益的决定：支持匈牙利吞并捷克的匈牙利人地区，但是坚决反对匈牙利吞并整个斯洛伐克，当然这意味着放苏军过境。同时声明当苏联进攻波兰时坚决站在波兰一边，但要是波兰不入侵捷克，苏联不会进攻波兰。</p>

<p>这样捷克就变得非常令人崩溃了。苏联提出只要法国履行对捷克的保护义务它就绝对出兵。法国提出帮捷克要英国人一起进攻德国，至少波兰人得站在法国一边。而要波兰人此时还反过来帮法国避免捷克被肢解，那除非母猪会上树。英国人则见机不妙提出它只对法国有同盟义务，虽然英国人很不想捷克被肢解，但是当初破坏法国人的中欧同盟的恰恰又是他们，他们是有苦说不出。转回到苏联，他们虽然确实想保护捷克，但苦于有力无处使，也不能当真进攻波兰。</p>

<p>于是尽管捷克都开始过总动员，预计自身可以至少抵抗德国3到6个月，必要时也能顶住匈牙利的攻击，甚至被迫同意波兰的要求以使其退出战争，但他们抵抗成功的前提是西边的法国和东边的苏联都有实质性的援助，这两者最终都只是水中月。最后压垮了捷克的稻草是波兰的态度，波兰甚至根本不屑于见好就收，他们公开要求肢解掉捷克。这就是一个小国的悲哀，捷克如何能够在被两个大国抛弃，三个邻国重兵压境，外边还有两个看热闹的一个扇风点火的外加一个虽然热心帮忙但很可能居心叵测的国家共同侵凌下幸存呢？这就叫弱国无外交。于是最终，捷克斯洛伐克同意了三个邻国的领土要求，倒向德国成了一个卫星国。</p>
]]></content>
  </entry>
  
</feed>
