<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: repost | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/repost/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2015-06-27T18:23:21+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一篇文章学会电工：火线 零线 地线 中线]]></title>
    <link href="http://www.markzhang.cn/blog/2015/06/27/live-naught-earth-wires/"/>
    <updated>2015-06-27T18:20:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/06/27/live-naught-earth-wires</id>
    <content type="html"><![CDATA[<p>首先你要知道电为什么分为火线.&lt;也叫相线>零线&lt;也叫中性线>和接地线.&lt;也叫保护线>是从那里来的.各起什么作用的.</p>

<p>电自然是从发电机出来的这个大家都知道.发电机分为单相发电机和三相发电机.现在在电厂基本都用三相发电机.单相基本已不用&lt;当然应急发电机除外>.</p>

<p>因为三相发电机在发电机的定子上嵌放三个相同的线圈.当转子在原动机&lt;如汽轮机.水轮机>带动下切割磁感应线而在线圈中产生感生电动势.也就是电.有于三相发电机定子上有三个线圈所以会产生三相电.如果在三相发电机每个线圈各接上一个负载的话那么就会产生三个独立和单相电路.就构成了三相六线制了.如果是这样的话我要输电的话需要六根导线,很不经济,也没有实用价值.但是我们目前低压供电系统多数用三相四线制供电.三相四线是把发电机三个线圈的末端连接在一起,成为一个公共端点&lt;称为中性点这也就是为什么人们把零线称为中性线的原因>从中性线引出的输电线称为中性线,中性线通常与大地相接,并把接大地和中性点称为零点.始终保持与相线的零地位&lt;这也就是人们为什么把中性线称为零线的原因>.</p>

<p>第一.从电厂的发电机出来后经变电站加压后通过输电网进入工厂或用电处到工厂或用电处后再经过变压器降压后进入负载&lt;用电器>一般为三相四线制即用线色表示为黄.绿.红和蓝&lt;黄.绿.红为相线蓝为中性线也就零线>用字幕表示为A.B.C和N.但是现在国家提倡新的工厂用三相五线制也就是在原来四根线上再加根接地线&lt;不是从电厂过来的是在要用电器的地方如居民住宅楼国家强制规定必须要有接地线自己加的.主要作用为当设备漏电时把电导入大地防止人体触电>也叫PE线色为黄绿双色线&lt;IEC标准全球通用></p>

<p>第二.这五根线中中性线&lt;零线>和接地线<PE>没有电压其他三根线<ABC>电压一般为线与线之间任意二根线为400V&lt;即ABC三线中任意二根线实际为 390V左右用电时有压降被称为线电压>线与中性线之间为230V&lt;即ABC与N之间任意二根线实际为225V左右被称为相电压>.</p>

<p>第三接地线也叫保护线.那为什么要叫它保护线.你想在家里的家用电器或工厂的设备很多都是用金属做外壳的吧.那么如果万一当我电器或设备发生漏电的话那么我的电器或是设备那不是要带电了吗?如果人碰一下的话是不是要触电啊?是不是很危险啊?那么有没有方法可以当我的电器或是设备漏电时避免发生触电的事故. 有!接地线就是一种很好的保护方法.人为什么会触电.首先人是导电体,第二因为有电流流过.为什么会有电流过.因为有电压.我想欧姆定律你应当知道吧?I=U/R也就是说在电压相同的情况下电阻越大电流就越小是吧!电流还有一个特征就是那边电阻小它向那边走.人体的电阻一般为1700欧姆.那么如果接地线电阻只有4欧姆的话你看那大部分的电流会向那里走啊.没有电流流过的话那人也就不会触电了吧?其实说白了就是一句话.那就是接地线的作用就是当用电器发生漏电时把电导入大地防止人体触电!这也就是人们为什么把接地线叫为保护线的原因!</p>

<p>第四以三相电源为例如果有三条相线，一条零线和一条地线。&lt;在电路图中用字幕L1 L2 L3 表示为A B C三相.用N 表示零线或中性线.用PE表示接地线>
那就是三相五线制也就是人们通常说的TN-S系统。就是中性线《零线N》和保护线《接地线PE》是分开的。
如果三相线加一零线的那种是三相四线制也就是人们通常说的TN-C系统。就是中性线《零线N》和保护线《接地线PE》是合一的，称为PEN线。通常用保护接零的方法.共用PEN线.</p>

<p>现在国家提倡新开的工厂使用TN-S系统。如果你用三相五线制的去接三相四线制的话那要看你设备上需要了。如果在你设备上要用220V电源的话那就接中性线《零线N》。用保护接零使用。禁止把接地线当中性线《零线N》使用。如果设备上没有用220V的电源那就接接地线就可以了。</p>

<p>照明电路里的两根电线，一根叫火线，另一根则叫零线。火线和零线的区别在于它们对地的电压不同：火线的对地电压等于220V；零线的对地的电压等于零（它本身跟大地相连接在一起的）。所以当人的一部分碰上了火线，另一部分站在地上，人的这两个部分这间的电压等于220V，就有触电的危险了。反之人即使用手去抓零线，如果人是站在地上的话，由于零线的对地的电压等于零，所以人的身体各部分之间的电压等于零，人就没有触电的危险。</p>

<p>如果火线和零线一旦碰起来，由于两者之间的电压等于220伏，而两接触点间的电阻几乎等于零，这时的电流非常大，在火线和零线的接触点处将产生巨大的热量，从而发出电火花，火花处的温度高到足以把金属导线烧得熔化。</p>

<p>接地是电器设备安全技术中最重要的工作，应该认真对待。那种不加考虑随意接地的做法常常会给计算机设备造成不良的后果，严重时会烧毁整个设备应用系统，甚至造成人身伤害。正确接地可提高整个系统的抗干扰能力。</p>

<p>要正确使用计算机的电源线。目前，我们使用的电源插座大多是单相三线插座或单相二线插座。单相三线插座中，中间为接地线，也作定位用，另外两端分别接火线和零线，接线顺序是左零右火，即左边为零线，右边为火线.凡外壳是金属的家用电器都采用的是单相三线制电源插头。三个插头呈正三解形排列，其中上面最长最粗的铜制插头就是地线。地线下面两个分别是火线（标志字母为"L"Live Wire）、零线（标志字母为"N"Naught wire），顺序是左零右火，（插头背面对着自己本人时）。</p>

<p>使用中千万不要将零线端和定位用的地线端连在一起，因为有的设备采用二线插头，如果设备的电源火线、零线接反或使用中插错位置，必将造成火线、零线短路，烧坏设备，造成不可弥补的损失。因此，即使家里或单位的三线插座中没有接地，也最好使用三线电源插头和三线插座。</p>

<p>区分：
1.用颜色区分：在动力电缆中黄色绿色红色分别代表A相B相C相（三相火线）蓝色代表零线，黄绿双色代表接地线。
2.用电笔区分：火线用电笔测试时会发光，而零线则不会。
3.用电压表区分：不同相线（即火线）之间的电压为线电压380V，相线（火线）与零线（或良好的接地体）之间的电压为相电压220V，零线与良好的接地体的电压为0V。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[高压输电：为什么高压输电压升高了，电流会变小呢]]></title>
    <link href="http://www.markzhang.cn/blog/2015/06/27/power-transfer/"/>
    <updated>2015-06-27T18:13:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/06/27/power-transfer</id>
    <content type="html"><![CDATA[<p>转载自：<a href="http://iask.sina.com.cn/b/11686110.html">http://iask.sina.com.cn/b/11686110.html</a></p>

<p>为什么高压输电线路上电压升高了，电流会变小呢，不是I=U/R么，照理说电压升高了，电流也大了，损耗也就多了啊？</p>

<!-- more -->


<p>因为输出功率是固定的。而功率等于电流乘以电压，即P=IU。这样，乘积固定，一个因数（电压U）变大，另一个因数（电流I）就要变小。</p>

<p>你引用的那个公式（I=U/R），隐含的前提是功率是可变的，所以在此不适用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GEM - Graphics Execution Manager 介绍]]></title>
    <link href="http://www.markzhang.cn/blog/2015/03/02/gem-introduction/"/>
    <updated>2015-03-02T11:15:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/03/02/gem-introduction</id>
    <content type="html"><![CDATA[<p>本文来自：<a href="http://lwn.net/Articles/283798/">http://lwn.net/Articles/283798/</a></p>

<p>NOTE: Currently the buffer creation/read/write are implemented by driver specified ioctls. So right now you can&rsquo;t find functions like &ldquo;drm_gem_create&rdquo; in kernel sources.
And that&rsquo;s also why we need &ldquo;dumb buffer&rdquo; in drm&rsquo;s ioctls(dumb_create, dumb_destroy&hellip;)</p>

<!-- more -->


<p>原文请看：<a href="http://lwn.net/Articles/283798/">http://lwn.net/Articles/283798/</a></p>

<p>GEM是Intel建议提出并实现的，所以这篇文章是GEM maintainer写的introduction，非常详尽，只是对照现在的kernel来说，内容已经有一点outdate（所以我写了上面的NOTE），但是大部分内容都是OK的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转载：GEM vs TTM]]></title>
    <link href="http://www.markzhang.cn/blog/2015/03/02/gem-vs-ttm/"/>
    <updated>2015-03-02T11:09:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/03/02/gem-vs-ttm</id>
    <content type="html"><![CDATA[<p>本文来自: <a href="http://lwn.net/Articles/283793/">http://lwn.net/Articles/283793/</a></p>

<p>Getting high-performance, three-dimensional graphics working under Linux is quite a challenge even when the fundamental hardware programming information is available.  One component of this problem is memory management: a graphics processor (GPU) is, essentially, a computer of its own with a distinct view of memory.  Managing the GPU&rsquo;s memory &ndash; and its view of system RAM &ndash; must be done carefully if the resulting system is intended to work at all, much less with acceptable performance.</p>

<p>Not that long ago, it appeared that this problem had been solved with thetranslation table maps (TTM) subsystem.  TTM remains outside of the mainline kernel, though, as do all drivers which use it.  A recent queryabout what would be required to get TTM merged led to an interesting discussion where it turned out that, in fact, TTM may not be the future of graphics memory management after all.</p>

<!-- more -->


<p></p>

<p>A number of complaints about TTM have been raised.  Its API is far larger than is needed for any free Linux driver; it has, in other words, a certain amount of code dedicated to the needs of binary-only drivers.  The fencing mechanism (which manages concurrency between the host CPUs and the GPU) is seen as being complex, difficult to work with, and not always yielding the best performance.  Heavy use of memory-mapped buffers can create performance problems of its own.  The TTM API is an exercise in trying to provide for everything in all situations;  as a result it is, according to some driver developers, hard to match to any specific hardware, hard to get started with, and still insufficiently flexible.  And, importantly, there is a distinct shortage of working free drivers which use TTM.  So Dave Airlie worries:</p>

<blockquote><p>I was hoping that by now, one of the radeon or nouveau drivers would have adopted TTM, or at least demoed something working using it, this hasn&rsquo;t happened which worries me&hellip;  The real question is whether TTM suits the driver writers for use in Linux desktop and embedded environments, and I think so far I&rsquo;m not seeing enough positive feedback from the desktop side
All of these worries would seem to be moot, since TTM is available and there is nothing else out there.  Except, as it turns out, there issomething out there: it&rsquo;s called the Graphics Execution Manager, or GEM. The Intel-sponsored GEM project is all of one month old, as of this writing. The GEM developers had not really intended to announce their work quite yet, but the TTM discussion brought the issue to the fore.</p></blockquote>

<p>Keith Packard&rsquo;s introduction to GEM includes a document describing the API as it exists so far.  There are a number of significant differences in how GEM does things.  To begin with, GEM allocates graphical buffer objects using normal, anonymous, user-space memory.  That means that these buffers can be forced out to swap when memory gets tight.  There are clear advantages to this approach, and not just in memory flexibility: it also makes the implementation of suspend and resume easier by automatically providing backing store for all buffer objects.</p>

<p>The GEM API tries to do away with the mapping of buffers into user space. That mapping is expensive to do and brings all sorts of interesting issues with cache coherency between the CPU and GPU.  So, instead, buffer objects are accessed with simple read() and write() calls.  Or, at least, that&rsquo;s the way it would be if the GEM developers could attach a file descriptor to each buffer object.  The kernel, however, does not make the management of that many file descriptors easy (yet), so the real API uses separate handles for buffer objects and a series of ioctl()calls.</p>

<p>That said, it is possible to map a buffer object into user space.  But then the user-space driver must take explicit responsibility for the management of cache coherency.  To that end there is a set of ioctl()calls for managing the &ldquo;domain&rdquo; of a buffer; the domain, essentially, describes which component of the system owns the buffer and is entitled to operate on it.  Changing the domains (there are two, one for read access and one for writes) of a buffer will perform the necessary cache flushes.  In a sense, this mechanism resembles the streaming DMA API, where the ownership of DMA buffers can be switched between the CPU and the peripheral controller. That is not entirely surprising, as a very similar problem is being solved.</p>

<p>This API also does away with the need for explicit fence operations. Instead, a CPU operation which requires access to a buffer will simply wait, if necessary, for the GPU to finish any outstanding operations involving that buffer.</p>

<p>Finally, the GEM API does not try to solve the entire problem; a number of important operations (such as the execution of a set of GPU commands) are left for the hardware-specific driver to implement.  GEM is, thus, quite specific to the needs of Intel&rsquo;s driver at this time; it does not try for the same sort of generality that was a goal of TTM.  As describedby Eric Anholt:</p>

<blockquote><p>The problem with TTM is that it&rsquo;s designed to expose one general API for all hardware, when that&rsquo;s not what our drivers want&hellip; We&rsquo;re trying to come at it from the other direction: Implement one driver well.  When someone else implements another driver and finds that there&rsquo;s code that should be common, make it into a support library and share it.</p></blockquote>

<p>The advantage to this approach is that it makes it relatively easy to create something which works well with Intel drivers.  And that may well be a good start; one working set of drivers is better than none.  On the other hand, that means that a significant amount of work may be required to get GEM to the point where it can support drivers for other hardware.  There seem to be two points of view on how that might be done: (1) add capabilities to GEM when needed by other drivers, or (2) have each driver use its own memory manager.</p>

<p>The first approach is, in many ways, more pleasing.  But it implies that the GEM API could change significantly over time.  And that, in turn, could delay the merging of the whole thing; the GEM API is exported to user space, and, as a result, must remain compatible as things change.  So there may be resistance to a quick merge of an API which looks like it may yet have to evolve for some time.</p>

<p>The second approach, instead, is best describedby Dave Airlie:</p>

<blockquote><p>Well the thing is I can&rsquo;t believe we don&rsquo;t know enough to do this in some way generically, but maybe the TTM vs GEM thing proves its not possible.  So we can then punt to having one memory manager per driver, but I suspect this will be a maintenance nightmare, so if people decide this is the way forward, I&rsquo;m happy to see it happen. However the person submitting the memory manager n+1 must damn well be willing to stand behind the interface until time ends, and explain why they couldn&rsquo;t re-use 1..n memory managers.</p></blockquote>

<p>One other remaining issue is performance.  Keith Whitwell posted some benchmark results showing that the i915 driver performs significantly worse with either TTM or GEM than without.  Keith Packard gets different results, though; his tests show that the GEM-based driver is significantly faster.  Clearly there is a need for a set of consistent benchmarks; performance of graphics drivers is important, but performance cannot be optimized if it cannot be reliably measured.</p>

<p>The use of anonymous memory also raises some performance concerns: a first-person shooter game will not provide the same experience if its blood-and-gore textures must be continually paged in.  Anonymous memory can also be high memory, and, thus, not necessarily accessible via a 32-bit pointer.  Some GPU hardware cannot address high memory; that will likely force the use of bounce buffers within the kernel.  In the end, GEM will have to prove that it can deliver good performance; GEM&rsquo;s developers are highly motivated to make their hardware look good, so there is a reasonable chance that things will work out on this front.</p>

<p>The conclusion to draw from all of this is that the GPU memory management problem cannot yet be considered solved.  GEM might eventually become that solution, but it is a very new API which still needs a fair amount of work.  There is likely to be a lot of work yet to be done in this area.</p>

<p>(Thanks to Timo Jyrinki for suggesting this topic.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DRM memory management - 最好的GEM/TTM/PRIME解释]]></title>
    <link href="http://www.markzhang.cn/blog/2015/03/02/drm-memory-management/"/>
    <updated>2015-03-02T10:37:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2015/03/02/drm-memory-management</id>
    <content type="html"><![CDATA[<p>本文转载自：<a href="https://www.kernel.org/doc/htmldocs/drm/drm-memory-management.html">https://www.kernel.org/doc/htmldocs/drm/drm-memory-management.html</a></p>

<p><strong>Memory management</strong></p>

<ul>
<li>The Translation Table Manager (TTM)</li>
<li>The Graphics Execution Manager (GEM)</li>
<li>VMA Offset Manager</li>
<li>PRIME Buffer Sharing</li>
<li>PRIME Function References</li>
<li>DRM MM Range Allocator</li>
<li>DRM MM Range Allocator Function References</li>
<li>CMA Helper Functions Reference</li>
</ul>


<!-- more -->


<p>Modern Linux systems require large amount of graphics memory to store frame buffers, textures, vertices and other graphics-related data. Given the very dynamic nature of many of that data, managing graphics memory efficiently is thus crucial for the graphics stack and plays a central role in the DRM infrastructure.</p>

<p>The DRM core includes two memory managers, namely Translation Table Maps (TTM) and Graphics Execution Manager (GEM). TTM was the first DRM memory manager to be developed and tried to be a one-size-fits-them all solution. It provides a single userspace API to accommodate the need of all hardware, supporting both Unified Memory Architecture (UMA) devices and devices with dedicated video RAM (i.e. most discrete video cards). This resulted in a large, complex piece of code that turned out to be hard to use for driver development.</p>

<p>GEM started as an Intel-sponsored project in reaction to TTM&rsquo;s complexity. Its design philosophy is completely different: instead of providing a solution to every graphics memory-related problems, GEM identified common code between drivers and created a support library to share it. GEM has simpler initialization and execution requirements than TTM, but has no video RAM management capabilities and is thus limited to UMA devices.</p>

<p><strong>The Translation Table Manager (TTM)</strong></p>

<p>TTM initialization</p>

<p>Drivers wishing to support TTM must fill out a drm_bo_driver structure. The structure contains several fields with function pointers for initializing the TTM, allocating and freeing memory, waiting for command completion and fence synchronization, and memory migration. See the radeon_ttm.c file for an example of usage.</p>

<p>The ttm_global_reference structure is made up of several fields:</p>

<p>``` cpp
struct ttm_global_reference {</p>

<pre><code>enum ttm_global_types global_type;
size_t size;
void *object;
int (*init) (struct ttm_global_reference *);
void (*release) (struct ttm_global_reference *);
</code></pre>

<p>};
```</p>

<p>There should be one global reference structure for your memory manager as a whole, and there will be others for each object created by the memory manager at runtime. Your global TTM should have a type of TTM_GLOBAL_TTM_MEM. The size field for the global object should be sizeof(struct ttm_mem_global), and the init and release hooks should point at your driver-specific init and release routines, which probably eventually call ttm_mem_global_init and ttm_mem_global_release, respectively.</p>

<p>Once your global TTM accounting structure is set up and initialized by calling ttm_global_item_ref() on it, you need to create a buffer object TTM to provide a pool for buffer object allocation by clients and the kernel itself. The type of this object should be TTM_GLOBAL_TTM_BO, and its size should be sizeof(struct ttm_bo_global). Again, driver-specific init and release functions may be provided, likely eventually calling ttm_bo_global_init() and ttm_bo_global_release(), respectively. Also, like the previous object, ttm_global_item_ref() is used to create an initial reference count for the TTM, which will call your initialization function.</p>

<p><strong>The Graphics Execution Manager (GEM)</strong></p>

<p>GEM Initialization
GEM Objects Creation
GEM Objects Lifetime
GEM Objects Naming
GEM Objects Mapping
Memory Coherency
Command Execution
GEM Function Reference</p>

<p>The GEM design approach has resulted in a memory manager that doesn&rsquo;t provide full coverage of all (or even all common) use cases in its userspace or kernel API. GEM exposes a set of standard memory-related operations to userspace and a set of helper functions to drivers, and let drivers implement hardware-specific operations with their own private API.</p>

<p>The GEM userspace API is described in the GEM &ndash; the Graphics Execution Manager article on LWN. While slightly outdated, the document provides a good overview of the GEM API principles. Buffer allocation and read and write operations, described as part of the common GEM API, are currently implemented using driver-specific ioctls.</p>

<p>GEM is data-agnostic. It manages abstract buffer objects without knowing what individual buffers contain. APIs that require knowledge of buffer contents or purpose, such as buffer allocation or synchronization primitives, are thus outside of the scope of GEM and must be implemented using driver-specific ioctls.</p>

<p>On a fundamental level, GEM involves several operations:</p>

<ul>
<li>Memory allocation and freeing</li>
<li>Command execution</li>
<li>Aperture management at command execution time</li>
</ul>


<p>Buffer object allocation is relatively straightforward and largely provided by Linux&rsquo;s shmem layer, which provides memory to back each object.</p>

<p>Device-specific operations, such as command execution, pinning, buffer read &amp; write, mapping, and domain ownership transfers are left to driver-specific ioctls.</p>

<p><strong>GEM Initialization</strong></p>

<p>Drivers that use GEM must set the DRIVER_GEM bit in the struct drm_driver driver_features field. The DRM core will then automatically initialize the GEM core before calling the load operation. Behind the scene, this will create a DRM Memory Manager object which provides an address space pool for object allocation.</p>

<p>In a KMS configuration, drivers need to allocate and initialize a command ring buffer following core GEM initialization if required by the hardware. UMA devices usually have what is called a &ldquo;stolen&rdquo; memory region, which provides space for the initial framebuffer and large, contiguous memory regions required by the device. This space is typically not managed by GEM, and must be initialized separately into its own DRM MM object.</p>

<p><strong>GEM Objects Creation</strong></p>

<p>GEM splits creation of GEM objects and allocation of the memory that backs them in two distinct operations.</p>

<p>GEM objects are represented by an instance of struct drm_gem_object. Drivers usually need to extend GEM objects with private information and thus create a driver-specific GEM object structure type that embeds an instance of struct drm_gem_object.</p>

<p>To create a GEM object, a driver allocates memory for an instance of its specific GEM object type and initializes the embedded struct drm_gem_object with a call to drm_gem_object_init. The function takes a pointer to the DRM device, a pointer to the GEM object and the buffer object size in bytes.</p>

<p>GEM uses shmem to allocate anonymous pageable memory. drm_gem_object_init will create an shmfs file of the requested size and store it into the struct drm_gem_object filp field. The memory is used as either main storage for the object when the graphics hardware uses system memory directly or as a backing store otherwise.</p>

<p>Drivers are responsible for the actual physical pages allocation by calling shmem_read_mapping_page_gfp for each page. Note that they can decide to allocate pages when initializing the GEM object, or to delay allocation until the memory is needed (for instance when a page fault occurs as a result of a userspace memory access or when the driver needs to start a DMA transfer involving the memory).</p>

<p>Anonymous pageable memory allocation is not always desired, for instance when the hardware requires physically contiguous system memory as is often the case in embedded devices. Drivers can create GEM objects with no shmfs backing (called private GEM objects) by initializing them with a call to drm_gem_private_object_init instead of drm_gem_object_init. Storage for private GEM objects must be managed by drivers.</p>

<p>Drivers that do not need to extend GEM objects with private information can call the drm_gem_object_alloc function to allocate and initialize a struct drm_gem_object instance. The GEM core will call the optional driver gem_init_object operation after initializing the GEM object with drm_gem_object_init.</p>

<p>int (<em>gem_init_object) (struct drm_gem_object </em>obj);</p>

<p>No alloc-and-init function exists for private GEM objects.</p>

<p><strong>GEM Objects Lifetime</strong></p>

<p>All GEM objects are reference-counted by the GEM core. References can be acquired and release by calling drm_gem_object_reference and drm_gem_object_unreference respectively. The caller must hold the drm_device struct_mutex lock. As a convenience, GEM provides the drm_gem_object_reference_unlocked and drm_gem_object_unreference_unlocked functions that can be called without holding the lock.</p>

<p>When the last reference to a GEM object is released the GEM core calls the drm_driver gem_free_object operation. That operation is mandatory for GEM-enabled drivers and must free the GEM object and all associated resources.</p>

<p>void (<em>gem_free_object) (struct drm_gem_object </em>obj);</p>

<p>Drivers are responsible for freeing all GEM object resources, including the resources created by the GEM core. If an mmap offset has been created for the object (in which case drm_gem_object::map_list::map is not NULL) it must be freed by a call to drm_gem_free_mmap_offset. The shmfs backing store must be released by calling drm_gem_object_release (that function can safely be called if no shmfs backing store has been created).</p>

<p><strong>GEM Objects Naming</strong></p>

<p>Communication between userspace and the kernel refers to GEM objects using local handles, global names or, more recently, file descriptors. All of those are 32-bit integer values; the usual Linux kernel limits apply to the file descriptors.</p>

<p>GEM handles are local to a DRM file. Applications get a handle to a GEM object through a driver-specific ioctl, and can use that handle to refer to the GEM object in other standard or driver-specific ioctls. Closing a DRM file handle frees all its GEM handles and dereferences the associated GEM objects.</p>

<p>To create a handle for a GEM object drivers call drm_gem_handle_create. The function takes a pointer to the DRM file and the GEM object and returns a locally unique handle. When the handle is no longer needed drivers delete it with a call to drm_gem_handle_delete. Finally the GEM object associated with a handle can be retrieved by a call to drm_gem_object_lookup.</p>

<p>Handles don&rsquo;t take ownership of GEM objects, they only take a reference to the object that will be dropped when the handle is destroyed. To avoid leaking GEM objects, drivers must make sure they drop the reference(s) they own (such as the initial reference taken at object creation time) as appropriate, without any special consideration for the handle. For example, in the particular case of combined GEM object and handle creation in the implementation of the dumb_create operation, drivers must drop the initial reference to the GEM object before returning the handle.</p>

<p>GEM names are similar in purpose to handles but are not local to DRM files. They can be passed between processes to reference a GEM object globally. Names can&rsquo;t be used directly to refer to objects in the DRM API, applications must convert handles to names and names to handles using the DRM_IOCTL_GEM_FLINK and DRM_IOCTL_GEM_OPEN ioctls respectively. The conversion is handled by the DRM core without any driver-specific support.</p>

<p>GEM also supports buffer sharing with dma-buf file descriptors through PRIME. GEM-based drivers must use the provided helpers functions to implement the exporting and importing correctly. See the section called “PRIME Buffer Sharing”. Since sharing file descriptors is inherently more secure than the easily guessable and global GEM names it is the preferred buffer sharing mechanism. Sharing buffers through GEM names is only supported for legacy userspace. Furthermore PRIME also allows cross-device buffer sharing since it is based on dma-bufs.</p>

<p><strong>GEM Objects Mapping</strong></p>

<p>Because mapping operations are fairly heavyweight GEM favours read/write-like access to buffers, implemented through driver-specific ioctls, over mapping buffers to userspace. However, when random access to the buffer is needed (to perform software rendering for instance), direct access to the object can be more efficient.</p>

<p>The mmap system call can&rsquo;t be used directly to map GEM objects, as they don&rsquo;t have their own file handle. Two alternative methods currently co-exist to map GEM objects to userspace. The first method uses a driver-specific ioctl to perform the mapping operation, calling do_mmap under the hood. This is often considered dubious, seems to be discouraged for new GEM-enabled drivers, and will thus not be described here.</p>

<p>The second method uses the mmap system call on the DRM file handle.</p>

<p>``` cpp
void <em>mmap(void </em>addr, size_t length, int prot, int flags, int fd,</p>

<pre><code>         off_t offset);
</code></pre>

<p>```</p>

<p>DRM identifies the GEM object to be mapped by a fake offset passed through the mmap offset argument. Prior to being mapped, a GEM object must thus be associated with a fake offset. To do so, drivers must call drm_gem_create_mmap_offset on the object. The function allocates a fake offset range from a pool and stores the offset divided by PAGE_SIZE in obj->map_list.hash.key. Care must be taken not to call drm_gem_create_mmap_offset if a fake offset has already been allocated for the object. This can be tested by obj->map_list.map being non-NULL.</p>

<p>Once allocated, the fake offset value (obj->map_list.hash.key &lt;&lt; PAGE_SHIFT) must be passed to the application in a driver-specific way and can then be used as the mmap offset argument.</p>

<p>The GEM core provides a helper method drm_gem_mmap to handle object mapping. The method can be set directly as the mmap file operation handler. It will look up the GEM object based on the offset value and set the VMA operations to the drm_driver gem_vm_ops field. Note that drm_gem_mmap doesn&rsquo;t map memory to userspace, but relies on the driver-provided fault handler to map pages individually.</p>

<p>To use drm_gem_mmap, drivers must fill the struct drm_driver gem_vm_ops field with a pointer to VM operations.</p>

<p>``` cpp
struct vm_operations_struct *gem_vm_ops</p>

<p>  struct vm_operations_struct {</p>

<pre><code>      void (*open)(struct vm_area_struct * area);
      void (*close)(struct vm_area_struct * area);
      int (*fault)(struct vm_area_struct *vma, struct vm_fault *vmf);
</code></pre>

<p>  };
```</p>

<p>The open and close operations must update the GEM object reference count. Drivers can use the drm_gem_vm_open and drm_gem_vm_close helper functions directly as open and close handlers.</p>

<p>The fault operation handler is responsible for mapping individual pages to userspace when a page fault occurs. Depending on the memory allocation scheme, drivers can allocate pages at fault time, or can decide to allocate memory for the GEM object at the time the object is created.</p>

<p>Drivers that want to map the GEM object upfront instead of handling page faults can implement their own mmap file operation handler.</p>

<p><strong>Memory Coherency</strong></p>

<p>When mapped to the device or used in a command buffer, backing pages for an object are flushed to memory and marked write combined so as to be coherent with the GPU. Likewise, if the CPU accesses an object after the GPU has finished rendering to the object, then the object must be made coherent with the CPU&rsquo;s view of memory, usually involving GPU cache flushing of various kinds. This core CPU&lt;&ndash;>GPU coherency management is provided by a device-specific ioctl, which evaluates an object&rsquo;s current domain and performs any necessary flushing or synchronization to put the object into the desired coherency domain (note that the object may be busy, i.e. an active render target; in that case, setting the domain blocks the client and waits for rendering to complete before performing any necessary flushing operations).</p>

<p><strong>Command Execution</strong></p>

<p>Perhaps the most important GEM function for GPU devices is providing a command execution interface to clients. Client programs construct command buffers containing references to previously allocated memory objects, and then submit them to GEM. At that point, GEM takes care to bind all the objects into the GTT, execute the buffer, and provide necessary synchronization between clients accessing the same buffers. This often involves evicting some objects from the GTT and re-binding others (a fairly expensive operation), and providing relocation support which hides fixed GTT offsets from clients. Clients must take care not to submit command buffers that reference more objects than can fit in the GTT; otherwise, GEM will reject them and no rendering will occur. Similarly, if several objects in the buffer require fence registers to be allocated for correct rendering (e.g. 2D blits on pre-965 chips), care must be taken not to require more fence registers than are available to the client. Such resource management should be abstracted from the client in libdrm.</p>

<p><strong>GEM Function Reference</strong></p>

<p>VMA Offset Manager</p>

<p><code>cpp
drm_vma_offset_manager_init — Initialize new offset-manager
drm_vma_offset_manager_destroy — Destroy offset manager
drm_vma_offset_lookup — Find node in offset space
drm_vma_offset_lookup_locked — Find node in offset space
drm_vma_offset_add — Add offset node to manager
drm_vma_offset_remove — Remove offset node from manager
drm_vma_node_allow — Add open-file to list of allowed users
drm_vma_node_revoke — Remove open-file from list of allowed users
drm_vma_node_is_allowed — Check whether an open-file is granted access
drm_vma_offset_exact_lookup — Look up node by exact address
drm_vma_offset_lock_lookup — Lock lookup for extended private use
drm_vma_offset_unlock_lookup — Unlock lookup for extended private use
drm_vma_node_reset — Initialize or reset node object
drm_vma_node_start — Return start address for page-based addressing
drm_vma_node_size — Return size (page-based)
drm_vma_node_has_offset — Check whether node is added to offset manager
drm_vma_node_offset_addr — Return sanitized offset for user-space mmaps
drm_vma_node_unmap — Unmap offset node
drm_vma_node_verify_access — Access verification helper for TTM
</code></p>

<p>The vma-manager is responsible to map arbitrary driver-dependent memory regions into the linear user address-space. It provides offsets to the caller which can then be used on the address_space of the drm-device. It takes care to not overlap regions, size them appropriately and to not confuse mm-core by inconsistent fake vm_pgoff fields. Drivers shouldn&rsquo;t use this for object placement in VMEM. This manager should only be used to manage mappings into linear user-space VMs.</p>

<p>We use drm_mm as backend to manage object allocations. But it is highly optimized for alloc/free calls, not lookups. Hence, we use an rb-tree to speed up offset lookups.</p>

<p>You must not use multiple offset managers on a single address_space. Otherwise, mm-core will be unable to tear down memory mappings as the VM will no longer be linear.</p>

<p>This offset manager works on page-based addresses. That is, every argument and return code (with the exception of drm_vma_node_offset_addr) is given in number of pages, not number of bytes. That means, object sizes and offsets must always be page-aligned (as usual). If you want to get a valid byte-based user-space address for a given offset, please see drm_vma_node_offset_addr.</p>

<p>Additionally to offset management, the vma offset manager also handles access management. For every open-file context that is allowed to access a given node, you must call drm_vma_node_allow. Otherwise, an mmap call on this open-file with the offset of the node will fail with -EACCES. To revoke access again, use drm_vma_node_revoke. However, the caller is responsible for destroying already existing mappings, if required.</p>

<p><strong>PRIME Buffer Sharing</strong></p>

<p>Overview and Driver Interface
PRIME Helper Functions
PRIME is the cross device buffer sharing framework in drm, originally created for the OPTIMUS range of multi-gpu platforms. To userspace PRIME buffers are dma-buf based file descriptors.</p>

<p><strong>Overview and Driver Interface</strong></p>

<p>Similar to GEM global names, PRIME file descriptors are also used to share buffer objects across processes. They offer additional security: as file descriptors must be explicitly sent over UNIX domain sockets to be shared between applications, they can&rsquo;t be guessed like the globally unique GEM names.</p>

<p>Drivers that support the PRIME API must set the DRIVER_PRIME bit in the struct drm_driver driver_features field, and implement the prime_handle_to_fd and prime_fd_to_handle operations.</p>

<p>``` cpp
int (<em>prime_handle_to_fd)(struct drm_device </em>dev,</p>

<pre><code>                      struct drm_file *file_priv, uint32_t handle,
                      uint32_t flags, int *prime_fd);
</code></pre>

<p>int (<em>prime_fd_to_handle)(struct drm_device </em>dev,</p>

<pre><code>                      struct drm_file *file_priv, int prime_fd,
                      uint32_t *handle);
</code></pre>

<p>```</p>

<p>Those two operations convert a handle to a PRIME file descriptor and vice versa. Drivers must use the kernel dma-buf buffer sharing framework to manage the PRIME file descriptors. Similar to the mode setting API PRIME is agnostic to the underlying buffer object manager, as long as handles are 32bit unsigned integers.</p>

<p>While non-GEM drivers must implement the operations themselves, GEM drivers must use the drm_gem_prime_handle_to_fd and drm_gem_prime_fd_to_handle helper functions. Those helpers rely on the driver gem_prime_export and gem_prime_import operations to create a dma-buf instance from a GEM object (dma-buf exporter role) and to create a GEM object from a dma-buf instance (dma-buf importer role).</p>

<p>``` cpp
struct dma_buf * (<em>gem_prime_export)(struct drm_device </em>dev,</p>

<pre><code>                         struct drm_gem_object *obj,
                         int flags);
</code></pre>

<p>struct drm_gem_object * (<em>gem_prime_import)(struct drm_device </em>dev,</p>

<pre><code>                                        struct dma_buf *dma_buf);
</code></pre>

<p>```</p>

<p>These two operations are mandatory for GEM drivers that support PRIME.</p>

<p><strong>PRIME Helper Functions</strong></p>

<p>Drivers can implement gem_prime_export and gem_prime_import in terms of simpler APIs by using the helper functions drm_gem_prime_export and drm_gem_prime_import. These functions implement dma-buf support in terms of five lower-level driver callbacks:</p>

<p>Export callbacks:</p>

<p><code>cpp
gem_prime_pin (optional): prepare a GEM object for exporting
gem_prime_get_sg_table: provide a scatter/gather table of pinned pages
gem_prime_vmap: vmap a buffer exported by your driver
gem_prime_vunmap: vunmap a buffer exported by your driver
</code></p>

<p>Import callback:</p>

<p><code>cpp
gem_prime_import_sg_table (import): produce a GEM object from another driver's scatter/gather table
</code></p>

<p><strong>PRIME Function References</strong></p>

<p><code>cpp
drm_gem_dmabuf_release — dma_buf release implementation for GEM
drm_gem_prime_export — helper library implementation of the export callback
drm_gem_prime_handle_to_fd — PRIME export function for GEM drivers
drm_gem_prime_import — helper library implementation of the import callback
drm_gem_prime_fd_to_handle — PRIME import function for GEM drivers
drm_prime_pages_to_sg — converts a page array into an sg list
drm_prime_sg_to_page_addr_arrays — convert an sg table into a page array
drm_prime_gem_destroy — helper to clean up a PRIME-imported GEM object
</code></p>

<p><strong>DRM MM Range Allocator</strong></p>

<p>Overview
LRU Scan/Eviction Support
Overview</p>

<p>drm_mm provides a simple range allocator. The drivers are free to use the resource allocator from the linux core if it suits them, the upside of drm_mm is that it&rsquo;s in the DRM core. Which means that it&rsquo;s easier to extend for some of the crazier special purpose needs of gpus.</p>

<p>The main data struct is drm_mm, allocations are tracked in drm_mm_node. Drivers are free to embed either of them into their own suitable datastructures. drm_mm itself will not do any allocations of its own, so if drivers choose not to embed nodes they need to still allocate them themselves.</p>

<p>The range allocator also supports reservation of preallocated blocks. This is useful for taking over initial mode setting configurations from the firmware, where an object needs to be created which exactly matches the firmware&rsquo;s scanout target. As long as the range is still free it can be inserted anytime after the allocator is initialized, which helps with avoiding looped depencies in the driver load sequence.</p>

<p>drm_mm maintains a stack of most recently freed holes, which of all simplistic datastructures seems to be a fairly decent approach to clustering allocations and avoiding too much fragmentation. This means free space searches are O(num_holes). Given that all the fancy features drm_mm supports something better would be fairly complex and since gfx thrashing is a fairly steep cliff not a real concern. Removing a node again is O(1).</p>

<p>drm_mm supports a few features: Alignment and range restrictions can be supplied. Further more every drm_mm_node has a color value (which is just an opaqua unsigned long) which in conjunction with a driver callback can be used to implement sophisticated placement restrictions. The i915 DRM driver uses this to implement guard pages between incompatible caching domains in the graphics TT.</p>

<p>Two behaviors are supported for searching and allocating: bottom-up and top-down. The default is bottom-up. Top-down allocation can be used if the memory area has different restrictions, or just to reduce fragmentation.</p>

<p>Finally iteration helpers to walk all nodes and all holes are provided as are some basic allocator dumpers for debugging.</p>

<p><strong>LRU Scan/Eviction Support</strong></p>

<p>Very often GPUs need to have continuous allocations for a given object. When evicting objects to make space for a new one it is therefore not most efficient when we simply start to select all objects from the tail of an LRU until there&rsquo;s a suitable hole: Especially for big objects or nodes that otherwise have special allocation constraints there&rsquo;s a good chance we evict lots of (smaller) objects unecessarily.</p>

<p>The DRM range allocator supports this use-case through the scanning interfaces. First a scan operation needs to be initialized with drm_mm_init_scan or drm_mm_init_scan_with_range. The the driver adds objects to the roaster (probably by walking an LRU list, but this can be freely implemented) until a suitable hole is found or there&rsquo;s no further evitable object.</p>

<p>The the driver must walk through all objects again in exactly the reverse order to restore the allocator state. Note that while the allocator is used in the scan mode no other operation is allowed.</p>

<p>Finally the driver evicts all objects selected in the scan. Adding and removing an object is O(1), and since freeing a node is also O(1) the overall complexity is O(scanned_objects). So like the free stack which needs to be walked before a scan operation even begins this is linear in the number of objects. It doesn&rsquo;t seem to hurt badly.</p>

<p><strong>DRM MM Range Allocator Function References</strong></p>

<p><code>cpp
drm_mm_reserve_node — insert an pre-initialized node
drm_mm_insert_node_generic — search for space and insert node
drm_mm_insert_node_in_range_generic — ranged search for space and insert node
drm_mm_remove_node — Remove a memory node from the allocator.
drm_mm_replace_node — move an allocation from old to new
drm_mm_init_scan — initialize lru scanning
drm_mm_init_scan_with_range — initialize range-restricted lru scanning
drm_mm_scan_add_block — add a node to the scan list
drm_mm_scan_remove_block — remove a node from the scan list
drm_mm_clean — checks whether an allocator is clean
drm_mm_init — initialize a drm-mm allocator
drm_mm_takedown — clean up a drm_mm allocator
drm_mm_debug_table — dump allocator state to dmesg
drm_mm_dump_table — dump allocator state to a seq_file
drm_mm_node_allocated — checks whether a node is allocated
drm_mm_initialized — checks whether an allocator is initialized
drm_mm_hole_node_start — computes the start of the hole following node
drm_mm_hole_node_end — computes the end of the hole following node
drm_mm_for_each_node — iterator to walk over all allocated nodes
drm_mm_for_each_hole — iterator to walk over all holes
drm_mm_insert_node — search for space and insert node
drm_mm_insert_node_in_range — ranged search for space and insert node
</code></p>

<p><strong>CMA Helper Functions Reference</strong></p>

<p><code>cpp
drm_gem_cma_create — allocate an object with the given size
drm_gem_cma_free_object — free resources associated with a CMA GEM object
drm_gem_cma_dumb_create_internal — create a dumb buffer object
drm_gem_cma_dumb_create — create a dumb buffer object
drm_gem_cma_dumb_map_offset — return the fake mmap offset for a CMA GEM object
drm_gem_cma_mmap — memory-map a CMA GEM object
drm_gem_cma_describe — describe a CMA GEM object for debugfs
drm_gem_cma_prime_get_sg_table — provide a scatter/gather table of pinned pages for a CMA GEM object
drm_gem_cma_prime_import_sg_table — produce a CMA GEM object from another driver's scatter/gather table of pinned pages
drm_gem_cma_prime_mmap — memory-map an exported CMA GEM object
drm_gem_cma_prime_vmap — map a CMA GEM object into the kernel's virtual address space
drm_gem_cma_prime_vunmap — unmap a CMA GEM object from the kernel's virtual address space
struct drm_gem_cma_object — GEM object backed by CMA memory allocations
</code></p>

<p>The Contiguous Memory Allocator reserves a pool of memory at early boot that is used to service requests for large blocks of contiguous memory.</p>

<p>The DRM GEM/CMA helpers use this allocator as a means to provide buffer objects that are physically contiguous in memory. This is useful for display drivers that are unable to map scattered buffers via an IOMMU.Memory management</p>
]]></content>
  </entry>
  
</feed>
