<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reprints | Make Things Cool]]></title>
  <link href="http://www.markzhang.cn/blog/categories/reprints/atom.xml" rel="self"/>
  <link href="http://www.markzhang.cn/"/>
  <updated>2014-12-09T18:10:09+08:00</updated>
  <id>http://www.markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[捷克武器那么好，二战面对德国为什么没一点抵抗？]]></title>
    <link href="http://www.markzhang.cn/blog/2014/11/27/czech-world-war-ii/"/>
    <updated>2014-11-27T17:39:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/11/27/czech-world-war-ii</id>
    <content type="html"><![CDATA[<p>转载自铁血社区：<a href="http://bbs.tiexue.net/post_5621844_1.html">http://bbs.tiexue.net/post_5621844_1.html</a></p>

<p>捷克斯洛伐克虽然有很好的军事工业基础，但是其人口和军队都和纳粹德国没得比，并且之前并没有为战争做好准备，不过这是次要原因。</p>

<!-- more -->


<p>最主要的原因是当时的地缘政治环境将捷克逼到了绝路。尽管现代只着重宣传纳粹德国对捷克斯洛伐克的野心，但实际上由于一战结束后中欧、东南欧版图发生巨变，这个地区聚集了大量民族矛盾和领土纠纷。如原奥匈帝国解体、波兰重新独立、南斯拉夫成立、特兰西瓦尼亚并入罗马尼亚、德国领土萎缩，这就使得中欧的国际关系变得错综复杂。各国往往呈现国土内有大量邻国主体民族国民的状况，如捷克境内有大量的德意志人（毕竟是当初奥匈的主体民族）、匈牙利人、波兰人，罗马尼亚境内有德意志人、匈牙利人，而匈牙利境内又有大量德意志人等等。其结果就是各国的矛盾套成了连环套，希望瓜分捷克的并不仅仅只有德国，而是出于各自的利益考虑，包括德国、波兰、匈牙利等邻国，还有意大利这不接壤的国家都希望肢解掉捷克，南斯拉夫态度暧昧，罗马尼亚在德国和苏联间左右摇摆。</p>

<p>法国曾经试图联合中欧小国建立一个同盟共同遏制德国扩张，甚至不惜与苏联结盟。但是这个努力显然被潜在同盟国各自的矛盾消解得一干二净。匈牙利接在德国之后试图肢解捷克，对罗马尼亚有特兰西瓦尼亚争议。后来他们如愿将捷克的有匈牙利人居住的领土吞并，顺带划走了20%捷克人。</p>

<p>波兰试图以反正捷克要被肢解，那不如让波兰也乘机收复切欣地区扩充领土好对抗德国为借口，与纳粹德国一起共同对捷克施压，其张牙舞爪的姿态比德国还生猛。波兰甚至为了消除罗马尼亚同意苏军过境的可能，撺掇本来对捷克无野心的罗马尼亚共同参与瓜分捷克。而那个壮大波兰的借口也被波兰用来解释他们威胁吞并立陶宛的举动，立陶宛是因有苏联撑腰才顶住了压力，由于有德国的威胁，此时的苏联还是很仗义的（颇为黑色幽默，40年恰是苏联同意德国吞并立陶宛）。后来波兰获得了捷克的切欣地区。</p>

<p>罗马尼亚的态度最能说明问题，各国认为如历史上那样对付捷克最符合自己利益。首先罗马尼亚与苏联接壤，并且有西乌克兰领土争议。其次罗马尼亚与匈牙利态度紧张，尽管它与德国不接壤，但是匈牙利明显准备做德国的跟班。因此罗马尼亚做出了最符合自身利益的决定：支持匈牙利吞并捷克的匈牙利人地区，但是坚决反对匈牙利吞并整个斯洛伐克，当然这意味着放苏军过境。同时声明当苏联进攻波兰时坚决站在波兰一边，但要是波兰不入侵捷克，苏联不会进攻波兰。</p>

<p>这样捷克就变得非常令人崩溃了。苏联提出只要法国履行对捷克的保护义务它就绝对出兵。法国提出帮捷克要英国人一起进攻德国，至少波兰人得站在法国一边。而要波兰人此时还反过来帮法国避免捷克被肢解，那除非母猪会上树。英国人则见机不妙提出它只对法国有同盟义务，虽然英国人很不想捷克被肢解，但是当初破坏法国人的中欧同盟的恰恰又是他们，他们是有苦说不出。转回到苏联，他们虽然确实想保护捷克，但苦于有力无处使，也不能当真进攻波兰。</p>

<p>于是尽管捷克都开始过总动员，预计自身可以至少抵抗德国3到6个月，必要时也能顶住匈牙利的攻击，甚至被迫同意波兰的要求以使其退出战争，但他们抵抗成功的前提是西边的法国和东边的苏联都有实质性的援助，这两者最终都只是水中月。最后压垮了捷克的稻草是波兰的态度，波兰甚至根本不屑于见好就收，他们公开要求肢解掉捷克。这就是一个小国的悲哀，捷克如何能够在被两个大国抛弃，三个邻国重兵压境，外边还有两个看热闹的一个扇风点火的外加一个虽然热心帮忙但很可能居心叵测的国家共同侵凌下幸存呢？这就叫弱国无外交。于是最终，捷克斯洛伐克同意了三个邻国的领土要求，倒向德国成了一个卫星国。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux netfilter概述，mangle/nat/filter, prerouting/input/forward...到底是啥]]></title>
    <link href="http://www.markzhang.cn/blog/2014/07/23/netfilter-overview/"/>
    <updated>2014-07-23T18:30:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/07/23/netfilter-overview</id>
    <content type="html"><![CDATA[<p>本文转载自：</p>

<p><a href="http://shorewall.net/NetfilterOverview.html">http://shorewall.net/NetfilterOverview.html</a></p>

<!-- more -->


<p>Netfilter consists of three tables: Filter, Nat and Mangle. Each table has a number of build-in chains: PREROUTING, INPUT, FORWARD, OUTPUT and POSTROUTING.</p>

<p>Rules in the various tables are used as follows:</p>

<p>Filter
Packet filtering (rejecting, dropping or accepting packets)</p>

<p>Nat
Network Address Translation including DNAT, SNAT and Masquerading</p>

<p>Mangle
General packet header modification such as setting the TOS value or marking packets for policy routing and traffic shaping.</p>

<p>Raw
Used primarily for creating exemptions from connection tracking with the NOTRACK target. Also used for stateless DNAT.</p>

<p>Rawpost
Used for stateless SNAT.</p>

<p>The following diagram shows how packets traverse the various builtin chains within Netfilter. Note that not all table/chain combinations are used.</p>

<p><img src="/downloads/image/netfilter-overview.png" alt="Netfilter Overview" /></p>

<p>&ldquo;Local Process” means a process running on the Shorewall system itself.</p>

<p>A more elaborate version of this flow is available here and this one contrasts the Netfilter flow with that of ipchains.</p>

<p>In the above diagram are boxes similar to this:</p>

<p><img src="/downloads/image/netfilter-input-chain.png" alt="Input chain" /></p>

<p>The above box gives the name of the built-in chain (INPUT) along with the names of the tables (Mangle and Filter) that the chain exists in and in the order that the chains are traversed. The above sample indicates that packets go first through the INPUT chain of the Mangle table then through the INPUT chain of the Filter table. When a chain is enclosed in parentheses, Shorewall does not use the named chain (INPUT) in that table (Mangle).</p>

<p><strong> Keep in mind that chains in the Nat table are only traversed for new connection requests (including those related to existing connections) while the chains in the other tables are traversed on every packet. </strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[需要齐次坐标的原因之二 - 所有的变换运算（平移、旋转、缩放）都可以用矩阵乘法来搞定]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/23/translation-rotation-scale-in-homogeneous-coordinate/"/>
    <updated>2014-04-23T13:55:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/23/translation-rotation-scale-in-homogeneous-coordinate</id>
    <content type="html"><![CDATA[<p>本文中的三张图片来自网络，但是我不记得当初的来源了，所以没有能给出出处。确定来源后将给出图片出处。</p>

<p>看三个图就清楚了。分别是平移、旋转和缩放的矩阵计算。如果没有额外的第四个量w（也就是齐次坐标），那么这三种变换是无法都使用矩阵乘法来解决的。变换都统一成矩阵乘法之后，就给硬件设计和软件架构带来了巨大的好处。</p>

<!-- more -->


<p>下面的三组公式就分别对应使用矩阵来实现平移（Translation）、旋转（Rotation）、缩放（Scale）：</p>

<p><img src="/downloads/image/matrix-translation.png" alt="Translation" /></p>

<p><img src="/downloads/image/matrix-rotation.png" alt="Rotation" /></p>

<p><img src="/downloads/image/matrix-scale.png" alt="Scale" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[需要齐次坐标的原因]]></title>
    <link href="http://www.markzhang.cn/blog/2014/04/23/homogeneous-coordinates/"/>
    <updated>2014-04-23T13:40:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2014/04/23/homogeneous-coordinates</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.songho.ca/math/homogeneous/homogeneous.html">http://www.songho.ca/math/homogeneous/homogeneous.html</a></p>

<p>翻译：罗朝辉 <a href="http://www.cnblogs.com/kesalin/">http://www.cnblogs.com/kesalin/</a></p>

<!-- more -->


<p>在欧几里得几何空间里，两条平行线永远都不会相交。但是在投影空间中，两条铁轨在地平线处却是会相交的，因为在无限远处它们看起来相交于一点。</p>

<p>在欧几里得（或称笛卡尔）空间里描述2D/3D 几何物体是很理想的，但在投影空间里面却并不见得。我们用 (x, y) 表示笛卡尔空间中的一个 2D 点，而处于无限远处的点 (∞,∞) 在笛卡尔空间里是没有意义的。投影空间里的两条平行线会在无限远处相交于一点，但笛卡尔空间里面无法搞定这个问题（因为无限远处的点在笛卡尔空间里是没有意义的）。</p>

<p>由 August Ferdinand Möbius 提出的齐次坐标（Homogeneous coordinates）让我们能够在投影空间里进行图像和几何处理，齐次坐标用N + 1个分量来描述 N 维坐标。比如，2D 齐次坐标是在笛卡尔坐标(X, Y)的基础上增加一个新分量 w，变成(x, y, w)，其中笛卡尔坐标系中的大X，Y 与齐次坐标中的小x，y有如下对应关系：</p>

<p><code>bash
X = x / w
Y = y / w
</code></p>

<p>笛卡尔坐标中的点 (1, 2) 在齐次坐标中就是 (1, 2, 1) 。如果这点移动到无限远(∞,∞)处，在齐次坐标中就是 (1, 2, 0) ，这样我们就避免了用没意义的"∞" 来描述无限远处的点。</p>

<p><strong> 证明: 两平行线可以相交 </strong></p>

<p>笛卡尔坐标系中，对于如下两个直线方程：</p>

<p><img src="/downloads/image/linear-formula.png" alt="直线方程" /></p>

<p>如果 C ≠ D，以上方程组无解；如果 C = D，那这两条线就是同一条线了。</p>

<p>下面我们用 x/w, y/w 代替 x, y 放到投影空间里来求解：</p>

<p><img src="/downloads/image/linear-formula-homogeneous.png" alt="齐次坐标直线方程" /></p>

<p>现在我们就可以在 C ≠ D 的情况得到一组解 (x, y, 0)，代入得 (C &ndash; D)w = 0，因为 C ≠ D，所以 w = 0。因而，两条平行线相交于投影空间中无限远处的一点 (x, y, 0)。</p>

<p>齐次坐标在计算机图形学中是有用的，将 3D 场景投影到 2D 平面的过程中就用到它了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X 如何截屏]]></title>
    <link href="http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot/"/>
    <updated>2013-12-25T21:54:00+08:00</updated>
    <id>http://www.markzhang.cn/blog/2013/12/25/macosx-screen-shot</id>
    <content type="html"><![CDATA[<p><em>文章是从网上找来的，但是忘记当初的网址了，所以没写上转载的地址。如果您发现这是您的原创，请告知，我会加上转载信息，谢谢。</em></p>

<p>在Mac OS X下有很强大的截屏功能，它不仅仅是对屏幕的全屏COPY，而是包括很多细节在里面，就从这点来看，已经比过所有版本的Windows了。</p>

<p>下面我来向大家详细介绍一下： 　　</p>

<!-- more -->


<p>对全屏的截图我们可以通过按 苹果键（花键）+ Shift键 + 3来执行，之后伴随着清脆的一声提示音后，在桌面上就会生成一个图片文件，这就是刚刚截屏的图片了，默认文件类型是PNG的。</p>

<p>自定义截屏是很方便的一个功能，是可以通过按 苹果键（花键）+ Shift键 + 4来执行，当执行组合按键之后鼠标指针的光标会变成十字，现在你就可以画出你想要截取屏幕的范围了，画好后截出的图片也会放在桌面上。</p>

<p>另外，如果在按 苹果键（花键）+ Shift键 + 4后按下 空格键，鼠标指针就会变成一个小照相机，这时是截取对象方式的截屏，把小照相机放在你想截图的窗口上按鼠标左键后就执行了对该窗口的截屏，很方便吧，</p>

<p>还有一个用法就是苹果键（花键）+Shift键再 + Ctrl键 + 4，这样截出的文件就放入系统的剪贴板了，不会生成文件出来，在做文档时直接粘贴就很方便了。</p>
]]></content>
  </entry>
  
</feed>
