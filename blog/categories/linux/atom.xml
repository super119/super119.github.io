<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Make Things Cool]]></title>
  <link href="http://markzhang.cn/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2015-12-25T11:04:44+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux通过sendmsg在进程中共享FD]]></title>
    <link href="http://markzhang.cn/blog/2015/12/25/share-fd-by-sendmsg/"/>
    <updated>2015-12-25T10:57:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/25/share-fd-by-sendmsg</id>
    <content type="html"><![CDATA[<p>对于现代Linux来说，FD的使用变的越来越广泛。FD不光用于一个文件或设备的打开句柄，现在FD还往往会用于一些其他数据类型的句柄，比如一块buffer。</p>

<p>对于一些要避免拷贝的buffer来说（比如一块用于display的buffer，或者一块用于render的buffer），使用FD来表示这块buffer并在不同进程中传递就被使用的越来越广泛。而且进程退出（不管是正常退出还是被杀）的时候，FD还能被kernel回收，再加上 <code>reference count</code>，这块buffer就不会有泄漏的问题。看看Android和Linux kernel的代码就会发现，现在使用FD的这种例子是越来越多了。</p>

<p>在userspace，进程共享FD可以通过 <code>sendmsg</code> 来实现：</p>

<!-- more -->


<p>man 7 unix</p>

<p>man sendmsg</p>

<p>sendmsg可以发送control message，也就是不是普通的regular数据。看sendmsg的manual可以知道。</p>

<p>control message其实也是指定一个指针和一个长度，和普通数据一样。</p>

<p>有趣的事，control message可以发送一个FD（或一组，以数组方式组织）给另外一个进程。不是说把FD这个数字发给了别人，而是这个FD真正的另外一个进程中存在，而且和发送进程的FD指向的是一个struct file</p>

<p>简单来说，就好象接收进程dup了发送进程的那个FD一样。事实上嘛，大家都懂的，其实就是kernel帮助接收进程dup了一下而已。。。</p>

<p>在man 7 unix中搜索SCM_RIGHTS可以看到具体用法和信息。</p>

<p>有个条件是：必须工作在UNIX这个socket domain上（AF_UNIX），TCP/IP socket domain是不行的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 12.04安装Microsoft lifecam studio摄像头]]></title>
    <link href="http://markzhang.cn/blog/2015/12/24/ubuntu-install-microsoft-camera/"/>
    <updated>2015-12-24T09:20:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/24/ubuntu-install-microsoft-camera</id>
    <content type="html"><![CDATA[<p>这是一个UVC摄像头，所以可以使用uvcvideo这个kernel驱动，一般kernel都编译了这个module。</p>

<p>什么是UVC？</p>

<p>UVC，全称为：USB video class 或USB video device class</p>

<!-- more -->


<p>UVC是Microsoft与另外几家设备厂商联合推出的为USB视频捕获设备定义的协议标准，目前已成为USB org标准之一。</p>

<p>如今的主流操作系统(如Windows XP SP2 and later, Linux 2.4.6 and later, MacOS 10.5 and later)都已提供UVC设备驱动，因此符合UVC规格的硬件设备在不需要安装任何的驱动程序下即可在主机中正常使用。使用UVC技术的包括摄像头、数码相机、类比影像转换器、电视棒及静态影像相机等设备。</p>

<p>最新的UVC版本为UVC 1.1，由USB Implementers Forum定义包括基本协议及负载格式。</p>

<p>网络摄像头是第一个支持UVC而且也是数量最多的UVC设备，目前，操作系统只要是 Windows XP SP2 之后的版本都可以支持 UVC，当然 Vista 就更不用说了。Linux系统自2.4以后的内核都支持了大量的设备驱动，其中支持UVC设备。</p>

<p>使用 UVC 的好处 USB 在 Video这块也成为一项标准了之后，硬件在各个程序之间彼此运行会更加顺利，而且也省略了驱动程序安装这一环节。</p>

<p>所以，apt-get一下guvcview就可以看到图像了。</p>

<p>问题：</p>

<p><strong> 第一个问题 </strong></p>

<p>也是uvc驱动官方网站给出的问题，就是有关这款摄像头每次都请求最大USB带宽的问题，需要给uvcvideo这个kernel module添加一个参数，具体做法是：</p>

<p><code>bash
sudo rmmod uvcvideo
sudo modprobe uvcvideo quirks=0x80
重新插拔摄像头
cat /sys/module/uvcvideo/parameters/quirks来检验是否设置成功了。
</code></p>

<p>参考资料：<a href="http://www.ideasonboard.org/uvc/faq/#faq6">http://www.ideasonboard.org/uvc/faq/#faq6</a></p>

<p><strong> 第二个问题 </strong></p>

<p>有的时候会发现好好的图像定格了，或者是整个摄像头设备都没了（在lsusb中看不到了）。此外还有个现象就是，摄像头上的蓝灯会莫名其妙的闪烁起来。Google下，这是由于Chrome中的Peperflash造成的。所以，禁用PeperFlash，安装Adobe的flash即可。做法：</p>

<p>打开chrome，输入about:plugins，点右上角Details，Disable PeperFlash</p>

<p>在Adobe网站下载11.2的flashplayer，可以下载.tar.gz包那个版本，解开，得到libflashplayer.so和一个usr目录。</p>

<p><code>bash
sudo mkdir /opt/google/chrome/plugins
sudo cp &lt;libflashplayer.so&gt; /opt/google/chrome/plugins
sudo cp usr/* /usr
</code></p>

<p>重启Chrome，再次进入about:plugins，发现11.2的Adobe flash是enable的，PeperFlash是disable的，就OK了。</p>

<p>貌似PeperFlash是Chrome自带的一个flashplayer，有GPU加速。</p>

<p>Adobe的Linux flashplayer不会再有新版本，但是会有安全更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thunderbird on Ubuntu 12.04 - 调整邮件列表行间距]]></title>
    <link href="http://markzhang.cn/blog/2015/12/24/thunderbird-change-line-height/"/>
    <updated>2015-12-24T09:14:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/24/thunderbird-change-line-height</id>
    <content type="html"><![CDATA[<p>很不幸必须手动修改配置文件来做到，Thunderbird本身没有提供这样的配置项：</p>

<!-- more -->


<p><code>bash
markz@markz-hp6200:~$ cd .thunderbird/
markz@markz-hp6200:~/.thunderbird$ ls
a8feo3zj.default  Crash Reports  profiles.ini
markz@markz-hp6200:~/.thunderbird$ cd a8feo3zj.default/
markz@markz-hp6200:~/.thunderbird/a8feo3zj.default$ cd chrome/
markz@markz-hp6200:~/.thunderbird/a8feo3zj.default/chrome$ ls
userChrome.css
markz@markz-hp6200:~/.thunderbird/a8feo3zj.default/chrome$ cat userChrome.css
treechildren:-moz-tree-row {
height: 35px !important;
}
markz@markz-hp6200:~/.thunderbird/a8feo3zj.default/chrome$
</code></p>

<p>这里注意如果没有发现那个 <code>chrome</code> 的目录，那就自己创建一个，<code>userChrome.css</code> 也自己创建，然后将内容填入即可。全部做完重启Thunderbird就能看到效果了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH client config Sample]]></title>
    <link href="http://markzhang.cn/blog/2015/12/17/ssh-config/"/>
    <updated>2015-12-17T11:01:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/17/ssh-config</id>
    <content type="html"><![CDATA[<p>man ssh_config，查看~/.ssh/config的语法。</p>

<p>Host可以使用通配符，当ssh的时候如果server的URL能match上这里Host指定的值，则Host下面指定的HostName将被作为最终URL使用。同时该Host下配置的User, Port都将被使用。</p>

<p>当然，User和Port都可以被命令行上指定的override。</p>

<p>附上目前的一份sample配置：</p>

<!-- more -->


<p>``` bash
Host chromium</p>

<pre><code>HostName gerrit.chromium.org
User markz
Port 29418
PubkeyAuthentication yes
IdentityFile ~/.ssh/chromium
</code></pre>

<p>Host bitbucket.*</p>

<pre><code>HostName bitbucket.org
PubkeyAuthentication yes
IdentityFile ~/.ssh/bitbucket
</code></pre>

<p>Host gitorious.*</p>

<pre><code>HostName gitorious.org
PubkeyAuthentication yes
IdentityFile ~/.ssh/gitorious
</code></pre>

<p>Host gitse</p>

<pre><code>HostName gitse.nvidia.com
PubkeyAuthentication yes
IdentityFile ~/.ssh/gitse
</code></pre>

<p>Host github.*</p>

<pre><code>HostName github.com
PubkeyAuthentication yes
IdentityFile ~/.ssh/github
</code></pre>

<p>Host <em>.cyanogenmod.</em></p>

<pre><code>HostName review.cyanogenmod.org
PubkeyAuthentication yes
IdentityFile ~/.ssh/cmreview
</code></pre>

<p>Host *</p>

<pre><code>PubkeyAuthentication no
</code></pre>

<p>```</p>

<p>在最末尾默认禁止Public key的验证方式，也就是说，优先采用password验证。否则有些ssh server就会登录不上，因为有些ssh server优先验证public key，而我们这里有很多public key，一个一个验证失败之后就会因为验证失败次数太多从而连不上server。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mmap: invalid argument & MAP_PRIVATE]]></title>
    <link href="http://markzhang.cn/blog/2015/12/17/mmap-invalid-arg/"/>
    <updated>2015-12-17T10:53:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/17/mmap-invalid-arg</id>
    <content type="html"><![CDATA[<p>mmap，使用PROT_READ | PROT_WRITE, MAP_SHARED，总是返回EINVAL。</p>

<p>最后发现是因为被mmap的文件是一个network filesystem上的文件。</p>

<!-- more -->


<p>Linux实现MAP_SHARED是通过share文件的page cache做到的。对于一个网络上的文件来说，Linux无法做到文件的某个部分被修改了，同时打开该文件的其他机器上的程序能立马看到。</p>

<p>所以自然就返回EINVAL了。</p>

<p>悲催的是mmap的manual上并没有提到这种情况，所以查了半天。</p>

<p>此外，MAP_PRIVATE其实就是当你修改了文件之后，会copy一个新的page出来，所以自然就无法跟其他进程共享你的修改了。</p>

<p>同时还需要注意的是，MAP_PRIVATE的时候，对文件进行的修改将不会被写到文件中去！</p>
]]></content>
  </entry>
  
</feed>
