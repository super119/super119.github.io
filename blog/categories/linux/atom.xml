<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Make Things Cool]]></title>
  <link href="http://markzhang.cn/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2015-12-21T14:30:43+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSH client config Sample]]></title>
    <link href="http://markzhang.cn/blog/2015/12/17/ssh-config/"/>
    <updated>2015-12-17T11:01:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/17/ssh-config</id>
    <content type="html"><![CDATA[<p>man ssh_config，查看~/.ssh/config的语法。</p>

<p>Host可以使用通配符，当ssh的时候如果server的URL能match上这里Host指定的值，则Host下面指定的HostName将被作为最终URL使用。同时该Host下配置的User, Port都将被使用。</p>

<p>当然，User和Port都可以被命令行上指定的override。</p>

<p>附上目前的一份sample配置：</p>

<!-- more -->


<p>``` bash
Host chromium</p>

<pre><code>HostName gerrit.chromium.org
User markz
Port 29418
PubkeyAuthentication yes
IdentityFile ~/.ssh/chromium
</code></pre>

<p>Host bitbucket.*</p>

<pre><code>HostName bitbucket.org
PubkeyAuthentication yes
IdentityFile ~/.ssh/bitbucket
</code></pre>

<p>Host gitorious.*</p>

<pre><code>HostName gitorious.org
PubkeyAuthentication yes
IdentityFile ~/.ssh/gitorious
</code></pre>

<p>Host gitse</p>

<pre><code>HostName gitse.nvidia.com
PubkeyAuthentication yes
IdentityFile ~/.ssh/gitse
</code></pre>

<p>Host github.*</p>

<pre><code>HostName github.com
PubkeyAuthentication yes
IdentityFile ~/.ssh/github
</code></pre>

<p>Host <em>.cyanogenmod.</em></p>

<pre><code>HostName review.cyanogenmod.org
PubkeyAuthentication yes
IdentityFile ~/.ssh/cmreview
</code></pre>

<p>Host *</p>

<pre><code>PubkeyAuthentication no
</code></pre>

<p>```</p>

<p>在最末尾默认禁止Public key的验证方式，也就是说，优先采用password验证。否则有些ssh server就会登录不上，因为有些ssh server优先验证public key，而我们这里有很多public key，一个一个验证失败之后就会因为验证失败次数太多从而连不上server。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mmap: invalid argument & MAP_PRIVATE]]></title>
    <link href="http://markzhang.cn/blog/2015/12/17/mmap-invalid-arg/"/>
    <updated>2015-12-17T10:53:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/17/mmap-invalid-arg</id>
    <content type="html"><![CDATA[<p>mmap，使用PROT_READ | PROT_WRITE, MAP_SHARED，总是返回EINVAL。</p>

<p>最后发现是因为被mmap的文件是一个network filesystem上的文件。</p>

<!-- more -->


<p>Linux实现MAP_SHARED是通过share文件的page cache做到的。对于一个网络上的文件来说，Linux无法做到文件的某个部分被修改了，同时打开该文件的其他机器上的程序能立马看到。</p>

<p>所以自然就返回EINVAL了。</p>

<p>悲催的是mmap的manual上并没有提到这种情况，所以查了半天。</p>

<p>此外，MAP_PRIVATE其实就是当你修改了文件之后，会copy一个新的page出来，所以自然就无法跟其他进程共享你的修改了。</p>

<p>同时还需要注意的是，MAP_PRIVATE的时候，对文件进行的修改将不会被写到文件中去！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chromium OS相比Chrome OS缩水的地方]]></title>
    <link href="http://markzhang.cn/blog/2015/12/16/chromiumos-chromeos/"/>
    <updated>2015-12-16T14:44:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/16/chromiumos-chromeos</id>
    <content type="html"><![CDATA[<p>关于两者的区别，下面是Google官方的解释：</p>

<!-- more -->


<ol>
<li>Chromium OS人人都可下载、修改，并且免费使用。Chrome OS只提供给品牌厂商的特定笔记本机型（也就是Chromebook）使用。</li>
<li>Chrome OS具有需验证的引导和轻松恢复功能，Chromium OS则没有（也没需要）。</li>
<li>Chrome OS具有自动更新功能，可以保持你的系统是最新状态，Chromium OS则没有，要想更新系统只有下载新版来重装。</li>
<li>Chrome OS针对具体的笔记本硬件有特别优化，运行时性能更高，也更稳定（这个笔者有深刻体会）；Chromium OS则只包含一些早已存在的开源硬件驱动。</li>
<li>Chrome OS由Google公司和笔记本品牌厂商提供技术支持，Chromium OS则由开源社区提供支持。</li>
<li>Chrome OS内置Flash、PDF和Netflix Instant插件，并且有Google Talk软件，支持3G网络，Chromium OS则没有以上特性（没有Flash插件最要命啊）。</li>
<li>图标不一样，Chrome OS的图标是红黄蓝绿四色，Chromium OS只有蓝色。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi + ArchLinux：网络dhcp不稳定，经常无法获取IP地址]]></title>
    <link href="http://markzhang.cn/blog/2015/12/16/raspberrypi-dhcp-timeout/"/>
    <updated>2015-12-16T14:40:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/16/raspberrypi-dhcp-timeout</id>
    <content type="html"><![CDATA[<p>经常发现树莓派开机之后网络没有起来，最终发现是因为dhcpcd的-t参数，也就是等待dhcp server响应的timeout时间太短导致的。</p>

<p>默认是30秒，但是ArchLinux中配置的是10秒。</p>

<p>查看了脚本，调用dhcpcd的是netcfg，netcfg本身也是一个脚本，所以最终发现这个-t是在/usr/lib/network/connections/ethernet中设置的。</p>

<p>于是在这个文件的开头加上了：<code>DHCP_TIMEOUT=300</code></p>

<p>这样超时就变成了5分钟，足够了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NVIDIA Linux驱动在Ubuntu 12.04上的安装]]></title>
    <link href="http://markzhang.cn/blog/2015/06/03/nvidia-linux-driver-on-ubuntu/"/>
    <updated>2015-06-03T21:35:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/06/03/nvidia-linux-driver-on-ubuntu</id>
    <content type="html"><![CDATA[<p>在Ubuntu上安装显卡驱动不是一件容易的事情，安装不是Ubuntu官方认证过的NVIDIA自家的驱动就更是困难，而我选择在一个老的Ubuntu版本上安装显卡驱动，事情就变的更加麻烦起来。</p>

<p>其实一开始我也不想安装NVIDIA自家的驱动，首先想尝试用 <code>nouveau</code>，但是悲剧的发现Ubuntu 12.04上的nouveau无法驱动我的GTX970，可能需要新版本的Ubuntu才可以。所以，被迫选择安装NVIDIA自家的驱动。</p>

<!-- more -->


<p>安装和使用N卡驱动中途遇到了很多的问题，这里来个总结。</p>

<h2>第一次安装</h2>

<p>现在总结起来，可以按照如下步骤来：</p>

<ul>
<li>禁用nouveau和其他相关的module：</li>
</ul>


<p>``` bash
sudo vi /etc/modprobe.d/blacklist.conf</p>

<p>添加：</p>

<p>blacklist vga16fb
blacklist nouveau
blacklist rivafb
blacklist nvidiafb
blacklist rivatv
```</p>

<ul>
<li>卸载nvidia相关的package，否则NVIDIA驱动安装的时候会报错：</li>
</ul>


<p><code>bash
dpkg -l|grep nvidia
sudo apt-get remove &lt;nvidia packages&gt;
</code></p>

<ul>
<li>安装一些常用的package，比如：</li>
</ul>


<p><code>bash
sudo apt-get install build-essential
sudo apt-get install ia32-libs
</code></p>

<p>这是因为NVIDIA驱动安装的时候，会编译kernel module（nvidia.ko），所以需要一些常用的开发用的package。</p>

<ul>
<li><p>NVIDIA驱动安装的时候，X server不能运行，所以我是这么做的：</p></li>
<li><p>重启系统，在grub界面选择进入 <code>Recovery</code> 模式</p></li>
<li>进入Recovery之后，选择 <code>Enable Network</code></li>
<li>重新返回到Recovery界面，选择 <code>Drop to root console</code></li>
<li>运行NVIDIA驱动安装包，按照提示操作即可</li>
</ul>


<p>之所以要做一次 <code>Enable Network</code> 是因为，这个选项会mount一些必要的文件系统，比如 <code>/tmp</code>，NVIDIA驱动安装的时候是需要 <code>/tmp</code> 的。</p>

<h2>Ubuntu更新kernel之后</h2>

<p>如果你使用了Ubuntu的 <code>Update Manager</code> 更新了package之后，一定要注意是否有升级kernel，如果升级了kernel，那么很可能你需要重新安装一次NVIDIA的驱动。</p>

<p>这是因为上面也提到了，<code>nvidia.ko</code> 需要重新编译。所以，如果你更新了kernel，发现X server起不来了，那么就可以尝试这么来：</p>

<ol>
<li>重启系统，在grub界面选择进入 <code>Recovery</code> 模式</li>
<li>进入Recovery之后，选择 <code>Enable Network</code></li>
<li>重新返回到Recovery界面，选择 <code>Drop to root console</code></li>
<li>运行 <code>nvidia-uninstall</code> 卸载当前的NVIDIA驱动</li>
<li>重新运行NVIDIA驱动安装包，再安装一遍驱动</li>
</ol>


<p>之前我尝试过不运行 <code>nvidia-uninstall</code>，直接再次安装一遍驱动，发现这样做的话，安装包也会提醒你说发现当前已经安装了驱动，说是否需要卸载再重新安装。然后我就选择OK，但是发现这样操作下来之后有的时候还是不行，所以还是自己手动uninstall，然后再安装吧。</p>

<h2>如何看出错日志</h2>

<p>主要就是要看两个东西：</p>

<ul>
<li>dmesg：这是kernel的log，看nvidia的内核驱动是否有什么错误，crash，如果有，就Google一下错误信息看是否有帮助</li>
</ul>


<p>这里提一下，看到这个信息是正常的：</p>

<p><code>bash
[    1.222765] nvidia: module license 'NVIDIA' taints kernel.
[    1.225367] nvidia: module verification failed: signature and/or  required key missing - tainting kernel
</code></p>

<ul>
<li>/var/log/Xorg.0.log：这里主要是看NVIDIA的X server driver（nvidia_drv.so）是否有错误，crash</li>
</ul>


<h2>万般无奈怎么办</h2>

<ul>
<li><p>去 <a href="http://www.geforce.com/drivers">http://www.geforce.com/drivers</a> 看看有没有BETA版本的驱动下载，有的话下载下来试试。再说一次，记得先uninstall当前的驱动再安装新的。</p></li>
<li><p>去NVIDIA的论坛报bug，我没这么干，因为本身我用的Ubuntu就是老版本了，估计NVIDIA也不会理我，如果去报告Ubuntu 14.04上的bug，可能NVIDIA会创建bug并派人fix。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
