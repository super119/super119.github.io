<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Make Things Cool]]></title>
  <link href="http://markzhang.cn/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2016-09-16T11:40:29+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[安装Ubuntu/Windows双系统后恢复grub]]></title>
    <link href="http://markzhang.cn/blog/2016/06/09/restore-grub-tutorial/"/>
    <updated>2016-06-09T19:38:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/06/09/restore-grub-tutorial</id>
    <content type="html"><![CDATA[<p>重装系统这个事情发现每两年就要搞一次，windows经常莫名其妙的就起不来了。。。</p>

<p>而对于安装了双系统的机器来说，重装了windows之后如何恢复grub重新实现双启动就是一个问题。网上的方法很多，但是一直没有总结一套能完全解决问题的步骤。所以这次在重装完windows之后将步骤记录如下。</p>

<!-- more -->


<p>这次我是删掉了原来安装的windows 7，换成了windows 10。话说现在windows 10可以在微软的官方网站下载的到，激活码上某宝花个几十块钱也就轻松搞定了。毫无意外的，windows 10安装完成之后，机器启动就看不到grub了，只能启动到windows。接下来就是恢复grub的步骤了。</p>

<ul>
<li>首先需要一个恢复系统，或者说Live ISO，或者说rescue system，都是一个意思。以前我都是用Ubuntu的安装ISO，这次Google了一下，发现有一个boot repair的系统也不错，是开源项目，在这里：</li>
</ul>


<p><a href="https://sourceforge.net/projects/boot-repair-cd/">https://sourceforge.net/projects/boot-repair-cd/</a></p>

<p>下载这个ISO，然后烧录到U盘上从U盘启动即可。Linux下烧录U盘可以用：<code>Universal USB installer</code>，windows下可以用：<code>UltraISO</code>。<code>Universal USB installer</code> 有针对boot repair的支持，烧录的时候选择boot repair即可。</p>

<ul>
<li>U盘启动之后，就能看到一个图形界面（U盘启动会看到一个普通启动项和一个EFI启动项，如果普通启动项不工作那就选择EFI启动），在这里能看到boot repair提供了一个一键修复的按钮，但是这个一键修复对于我的机器不行，有Error报错：<code>GPT detected. Please create a BIOS-Boot partition......</code>，Google了一下貌似要解决还挺麻烦，所以决定还是手工来做：</li>
</ul>


<p><code>bash
sudo umount /mnt/boot-sav/sd*   # boot-repair会将机器上所有它发现的分区都自动mount起来，所以我们先全部umount，然后我们自己操作
sudo mount /dev/sda2 /mnt  # mount Ubuntu root分区，可以用boot repair自带的GParted工具来查看具体是哪个分区
for i in /sys /proc /run /dev; do sudo mount --bind "$i" "/mnt$i"; done
sudo chroot /mnt
update-grub
grub-install /dev/sdb  # 按照自己机器的配置，看把grub安装到哪个硬盘上
update-grub
grub-mkconfig -o /boot/grub/grub.cfg
exit
sudo reboot
</code></p>

<p>这样重启就OK了，注意这样做了之后默认是不会出现grub界面的，第一次要在BIOS启动完毕之后，按住 <code>左shift</code> ，然后就能看到grub界面了，做过一次之后以后每次启动都会自动出现grub界面，等待读秒。</p>

<p>还有就是上面有一句：<code>grub-mkconfig</code>，这是一定要做的，否则你在grub的界面中会看不到windows的启动项。<code>grub-mkconfig</code> 会自动分析机器中所有的分区然后给出一个完整的启动列表，非常的好用。</p>

<p>如果担心 <code>grub-mkconfig</code> 会覆盖之前的 <code>/boot/grub/grub.cfg</code>，可以将之前的 <code>grub.cfg</code> 先备份然后再操作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[链接装载和库读书笔记 - 未初始化的全局变量是弱符号]]></title>
    <link href="http://markzhang.cn/blog/2016/01/12/uninitialized-global-variable/"/>
    <updated>2016-01-12T09:43:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/12/uninitialized-global-variable</id>
    <content type="html"><![CDATA[<p>代码见文章末尾。</p>

<p>a是未初始化的全局变量，编译成.o的时候不会被放入.bss段，是一个弱符号。当有2个或多个弱符号的时候，linkder会挑选占用空间最大的弱符号。所以，这里最后链接完成后，a占用8个字节。但是在a.c中，a的类型仍然是int，在b.c中，a的类型是double。只是占用空间是8个字节。</p>

<!-- more -->


<p>至于输出结果，由于b.c给a赋值了300，而且b.c中a是double类型，所以内存中a是：</p>

<p><code>bash
(gdb) x/1xg 0x601030
0x601030 &lt;a&gt;:    0x4072c00000000000
</code></p>

<p>这就是为什么最后在a.c中打印a，出来的值是0。</p>

<p>更多解释看链接装载和库的P111 &mdash; common块。</p>

<p>BTW：如果两个a都是初始化了的全局变量，则链接会失败，因为两个强符号无法共存。如果一个初始化一个不初始化，则一个强符号一个弱符号，则以强符号占用的空间为准。</p>

<p>测试代码如下：</p>

<p>``` cpp
super@super-desktop:~$ cat a.c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &ldquo;b.h&rdquo;</h1>

<p>int a;</p>

<p>int main()
{</p>

<pre><code>a = 100;
b_process();
printf("A in main is: %d\n", a);
return 0;
</code></pre>

<p>}
super@super-desktop:~$ cat b.c</p>

<h1>include &lt;stdio.h></h1>

<p>double a;</p>

<p>void b_process()
{</p>

<pre><code>a = 300;
printf("A in b is: %f\n", a);
</code></pre>

<p>}
super@super-desktop:~$ cat b.h</p>

<h1>ifndef _B_H</h1>

<h1>define _B_H</h1>

<p>void b_process();</p>

<h1>endif</h1>

<p>```</p>

<p>输出是：</p>

<p>A in b is: 300.000000</p>

<p>A in main is: 0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[链接装载和库读书笔记 - 在动态库中尽量少使用全局变量，要使用请加上static]]></title>
    <link href="http://markzhang.cn/blog/2016/01/12/global-variable-in-shared-lib/"/>
    <updated>2016-01-12T09:39:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/12/global-variable-in-shared-lib</id>
    <content type="html"><![CDATA[<p>动态共享库编译的时候，对于全局变量，一律视为模块间变量访问。变量会通过数据段的GOT表来访问。而且，当可执行文件中（由于可执行文件不是PIC的）有同名全局变量时，共享库中定义的变量会被ignore，进程中只会存在可执行程序中的super_a。</p>

<!-- more -->


<p>所以，编写动态库的时候，尽量少用全局变量，如果要用，请加上static，这样就不会有问题。</p>

<p>参考链接装载和库的P198 &mdash; 共享模块的全局变量问题。</p>

<p>BTW：如果是静态链接，链接会失败报错 &mdash; multiple definition of super_a。</p>

<p>以下是测试代码：</p>

<p>``` cpp
super@super-desktop:~$ cat lib.h</p>

<h1>ifndef _LIB_H</h1>

<h1>define _LIB_H</h1>

<p>void lib_func();</p>

<h1>endif</h1>

<p>super@super-desktop:~$ cat lib.c</p>

<h1>include &lt;stdio.h></h1>

<p>int super_a = 0;</p>

<p>void lib_func()
{</p>

<pre><code>printf("A is: %d\n", super_a);
return;
</code></pre>

<p>}
super@super-desktop:~$ cat main.c</p>

<h1>include &lt;stdio.h></h1>

<h1>include &ldquo;lib.h&rdquo;</h1>

<p>int super_a = 0;</p>

<p>int main()
{</p>

<pre><code>super_a = 100;
lib_func();
printf("A in main is: %d\n", super_a);
return 0;
</code></pre>

<p>}
```</p>

<p>输出是：</p>

<p><code>bash
super@super-desktop:~$ gcc -shared -fPIC -g -o liblib.so lib.c
super@super-desktop:~$ gcc -o main main.c -L. -llib
super@super-desktop:~$ ./main
A is: 100
A in main is: 100
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[netstat -na输出中Recv-Q和Send-Q两项的值不为零需要注意程序是否有问题]]></title>
    <link href="http://markzhang.cn/blog/2016/01/07/recv-q-send-q/"/>
    <updated>2016-01-07T10:59:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/07/recv-q-send-q</id>
    <content type="html"><![CDATA[<p>Recv-Q：表示收到的数据中还有多少没有被进程取走（通过recv）</p>

<p>Send-Q：表示需要发送的数据还有多少没有被发出</p>

<p>所以，一般来说这两个值都是0，如果不为0且持续增长，那就表明程序出现了问题。</p>

<p>比如Recv-Q的数字持续增长，表示没有进程去取这些收到的数据。比如使用select+recv来收数据的时候，由于select有1024这个限制，所以如果socket的FD大于1024的时候，就会导致这个socket FD上的数据不会被select检测到从而导致recv不会被调用。</p>

<p>所以，通过netstat的这两个值就可以简单判断程序收不到包到底是包没到还是包没有被进程recv。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Cron的一些小Tips]]></title>
    <link href="http://markzhang.cn/blog/2016/01/04/cron-tips/"/>
    <updated>2016-01-04T10:08:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/04/cron-tips</id>
    <content type="html"><![CDATA[<ul>
<li><p>crontab -e编辑定时任务，crontab -l查看。最后的cron任务文件保存在/var/spool/cron/crontab目录下</p></li>
<li><p>cron会切换到/var/spool/cron/crontab目录下cron文件的owner这个用户，然后执行定义的定时任务。</p></li>
<li><p>但是cron切换用户的时候，任何环境变量，包括.bashrc都不会被执行到。所以诸如$HOME这样的变量也是没有定义的。所以，一般在定时任务的脚本中，我们会这样处理：</p></li>
</ul>


<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>HOME=/home/markz
source ${HOME}/.bashrc
export PATH=/usr/local/bin:$PATH
&hellip;. <tasks>
```</p>

<p>有一点注意，~/.bashrc往往都含有大量的定义和脚本执行，这有可能会影响到source的成功执行。我们之所以在需要cron的脚本中加入这句source，大多数情况下是为了定义一些环境变量。所以为了让source能保证成功，一般我们都会把需要的环境变量单独存放到一个文件中，然后去source那个文件即可。直接source ~/.bashrc不是一个好的做法。</p>

<ul>
<li>/var/log/syslog保存了cron的log，查看该log可以方便的知道定时任务执行的一些情况。</li>
</ul>

]]></content>
  </entry>
  
</feed>
