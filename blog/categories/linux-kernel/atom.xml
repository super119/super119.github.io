<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux-kernel | Make Things Cool]]></title>
  <link href="http://markzhang.cn/blog/categories/linux-kernel/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2016-02-15T10:32:03+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Top中是如何取到Linux内核中的Hertz的？CPU使用率到底是怎么算出来的？]]></title>
    <link href="http://markzhang.cn/blog/2016/02/15/top-calculation-linux-hz/"/>
    <updated>2016-02-15T10:29:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/02/15/top-calculation-linux-hz</id>
    <content type="html"><![CDATA[<p>首先来看CPU使用率到底是怎么算出来的。依据的是这个公式：</p>

<!-- more -->


<p><code>bash
(process jiffies) * 100.0f / ((float)Hertz * (float)et * (Rc.mode_irixps ? 1 : Cpu_tot));
</code></p>

<p>process jiffies是内核提供的该进程在DeltaT时间内消耗的jiffies。具体是/proc/<pid>/stat文件的第14-17 token。14－17token分别是utime, stime, cutime, cstime。cutime/cstime分别是该进程spawn的子进程在用户态和内核态消耗的jiffies。/proc/<pid>/task目录下有该进程所有线程的数据，也是在stat文件中读取，格式和process的是一样的，因为Linux内核中线程和进程区别不大的。所以 也完全可以将该进程所有线程消耗的jiffies累加起来，从而得到该进程的jiffies。man proc可以看到/proc下所有内容的解释。</p>

<p>注意stat中的jiffies是一个绝对累计值，所以要取两个时间点，算DeltaT中消耗的jiffies。</p>

<p>那 什么是jiffies呢？其实就是Linux内核定义的一个时间单位，值就是1/Hertz。Linux内核中，进程/线程消耗的时间，单位都是这个 jiffies。Linux内核没有开放什么系统调用，让程序可以直接取得这个Hertz，从而算出jiffies，为此，Top自己写了一个函数来算 Hertz这个值（不同的硬件平台，这个Hertz是不一样的。而且这个jiffies就是Linux内核调度进程的时间片大小）。最后会给出这个 Hertz在top中是如何计算出来的函数。</p>

<p>OK，回到上面的公式。et表示流逝的时间，单位是秒。最后一个部分是CPU/core数。</p>

<p>所以，总结来看，CPU使用率其实就是在DeltaT时间内，进程一共消耗了多少jiffies，消耗的越多，自然该进程的CPU使用率就越高了。更抽象一点来说，一个进程在单位时间内，被分配到的时间片越多，那么这个进程的CPU占用率就越高。</p>

<p>最后给出Top中是如何计算这个Hertz的，一般现在这个Hertz都是100，也就是jiffies就代表10ms，这也是linux内核中调度时间片的大小。</p>

<p>``` cpp</p>

<pre><code>/***********************************************************************
* Some values in /proc are expressed in units of 1/HZ seconds, where HZ
* is the kernel clock tick rate. One of these units is called a jiffy.
* The HZ value used in the kernel may vary according to hacker desire.
* According to Linus Torvalds, this is not true. He considers the values
* in /proc as being in architecture-dependant units that have no relation
* to the kernel clock tick rate. Examination of the kernel source code
* reveals that opinion as wishful thinking.
*
* In any case, we need the HZ constant as used in /proc. (the real HZ value
* may differ, but we don't care) There are several ways we could get HZ:
*
* 1. Include the kernel header file. If it changes, recompile this library.
* 2. Use the sysconf() function. When HZ changes, recompile the C library!
* 3. Ask the kernel. This is obviously correct...
*
* Linus Torvalds won't let us ask the kernel, because he thinks we should
* not know the HZ value. Oh well, we don't have to listen to him.
* Someone smuggled out the HZ value. :-)
*
* This code should work fine, even if Linus fixes the kernel to match his
* stated behavior. The code only fails in case of a partial conversion.
*
* Recent update: on some architectures, the 2.4 kernel provides an
* ELF note to indicate HZ. This may be for ARM or user-mode Linux
* support. This ought to be investigated. Note that sysconf() is still
* unreliable, because it doesn't return an error code when it is
* used with a kernel that doesn't support the ELF note. On some other
* architectures there may be a system call or sysctl() that will work.
*/
unsigned long long Hertz;
static void old_Hertz_hack(void){
  unsigned long long user_j, nice_j, sys_j, other_j;  /* jiffies (clock ticks) */
  double up_1, up_2, seconds;
  unsigned long long jiffies;
  unsigned h;
  char *restrict savelocale;
  savelocale = setlocale(LC_NUMERIC, NULL);
  setlocale(LC_NUMERIC, "C");
  do{
    FILE_TO_BUF(UPTIME_FILE,uptime_fd);  sscanf(buf, "%lf", &amp;up_1);
    /* uptime(&amp;up_1, NULL); */
    FILE_TO_BUF(STAT_FILE,stat_fd);
    sscanf(buf, "cpu %Lu %Lu %Lu %Lu", &amp;user_j, &amp;nice_j, &amp;sys_j, &amp;other_j);
    FILE_TO_BUF(UPTIME_FILE,uptime_fd);  sscanf(buf, "%lf", &amp;up_2);
    /* uptime(&amp;up_2, NULL); */
  } while((long long)( (up_2-up_1)*1000.0/up_1 )); /* want under 0.1% error */
  setlocale(LC_NUMERIC, savelocale);
  jiffies = user_j + nice_j + sys_j + other_j;
  seconds = (up_1 + up_2) / 2;
  h = (unsigned)( (double)jiffies/seconds/smp_num_cpus );
  /* actual values used by 2.4 kernels: 32 64 100 128 1000 1024 1200 */
  switch(h){
  case    9 ...   11 :  Hertz =   10; break; /* S/390 (sometimes) */
  case   18 ...   22 :  Hertz =   20; break; /* user-mode Linux */
  case   30 ...   34 :  Hertz =   32; break; /* ia64 emulator */
  case   48 ...   52 :  Hertz =   50; break;
  case   58 ...   61 :  Hertz =   60; break;
  case   62 ...   65 :  Hertz =   64; break; /* StrongARM /Shark */
  case   95 ...  105 :  Hertz =  100; break; /* normal Linux */
  case  124 ...  132 :  Hertz =  128; break; /* MIPS, ARM */
  case  195 ...  204 :  Hertz =  200; break; /* normal &lt;&lt; 1 */
  case  253 ...  260 :  Hertz =  256; break;
  case  393 ...  408 :  Hertz =  400; break; /* normal &lt;&lt; 2 */
  case  790 ...  808 :  Hertz =  800; break; /* normal &lt;&lt; 3 */
  case  990 ... 1010 :  Hertz = 1000; break; /* ARM */
  case 1015 ... 1035 :  Hertz = 1024; break; /* Alpha, ia64 */
  case 1180 ... 1220 :  Hertz = 1200; break; /* Alpha */
  default:
#ifdef HZ
    Hertz = (unsigned long long)HZ;    /* &lt;asm/param.h&gt; */
#else
    /* If 32-bit or big-endian (not Alpha or ia64), assume HZ is 100. */
    Hertz = (sizeof(long)==sizeof(int) || htons(999)==999) ? 100UL : 1024UL;
#endif
    fprintf(stderr, "Unknown HZ value! (%d) Assume %Ld.\n", h, Hertz);
  }
}
</code></pre>

<p>```</p>

<p>代码很简单，其实就是计算单位1秒内，每CPU/core产生了多少了jiffies。这个方法就和具体的硬件平台没有关系了。所以这是一个取得Linux内核Hertz的好方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么包含多句代码的宏要用do while包括起来？]]></title>
    <link href="http://markzhang.cn/blog/2016/01/07/kernel-do-while-macro/"/>
    <updated>2016-01-07T11:05:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/07/kernel-do-while-macro</id>
    <content type="html"><![CDATA[<p>为了看起来更清晰，这里用一个简单点的宏来演示：</p>

<p>``` cpp</p>

<h1>define SAFE_DELETE(p) do{ delete p; p = NULL} while(0)</h1>

<p>```</p>

<!-- more -->


<p>假设这里去掉 <code>do...while(0)</code>,</p>

<p>``` cpp</p>

<h1>define SAFE_DELETE(p) delete p; p = NULL;</h1>

<p>```</p>

<p>那么以下代码：</p>

<p><code>cpp
if(NULL != p) SAFE_DELETE(p)
else   ...do sth...
</code></p>

<p>就有两个问题，</p>

<ol>
<li><p>因为if分支后有两个语句，else分支没有对应的if，编译失败</p></li>
<li><p>假设没有else, SAFE_DELETE中的第二个语句无论if测试是否通过，会永远执行。</p></li>
</ol>


<p>你可能发现，为了避免这两个问题，我不一定要用这个令人费解的do&hellip;while,  我直接用{}括起来就可以了</p>

<p>``` cpp</p>

<h1>define SAFE_DELETE(p) { delete p; p = NULL;}</h1>

<p>```</p>

<p>的确，这样的话上面的问题是不存在了，但是我想对于C++程序员来讲，在每个语句后面加分号是一种约定俗成的习惯，这样的话，以下代码:</p>

<p><code>cpp
if(NULL != p) SAFE_DELETE(p);
else   ...do sth...
</code></p>

<p>其else分支就无法通过编译了（原因同上），所以采用 <code>do...while(0)</code> 是做好的选择了。</p>

<p>也许你会说，我们代码的习惯是在每个判断后面加上{}, 就不会有这种问题了，也就不需要do&hellip;while了，如：</p>

<p><code>cpp
if(...)
{
}
else
{
}
</code></p>

<p>诚然，这是一个好的，应该提倡的编程习惯，但一般这样的宏都是作为library的一部分出现的，而对于一个library的作者，他所要做的就是让其库具有通用性，强壮性，因此他不能有任何对库的使用者的假设，如其编码规范，技术水平等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel suspend的逻辑]]></title>
    <link href="http://markzhang.cn/blog/2016/01/06/kernel-suspend-description/"/>
    <updated>2016-01-06T09:44:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/06/kernel-suspend-description</id>
    <content type="html"><![CDATA[<p>代码位于：power/suspend.c，从函数pm_suspend开始。</p>

<p>suspend的逻辑和driver相关的主要就是遍历所有device，并调用他们相关driver的suspend函数指针（包括该device的class，bus这些的suspend函数指针）。</p>

<!-- more -->


<p>至于device调用的先后次序是这样的：当我们执行device_add的时候，这些device会被加到一个dpm_list的list中，而且晚add的device会出现在list的靠前位置。也就是说，早add的device会晚一点被suspend，最后add的device会第一个被suspend。</p>

<p>resume的时候就正好反过来，最后add的device会第一个被resume。</p>

<p>而具体在suspend一个device的时候，会依次调用这些函数指针：device所属的power domain，device的type，device所属的class，device所属的bus。</p>

<p>在上述的逻辑之前，会有一个名为suspend_prepare的调用，在这里会freeze userspace（不schedule了就OK了），会freeze有freezable属性的workqueue。在上述逻辑之后，kernel就会转到arch层继续做suspend的动作。在这里就是每种arch，每种mach各不相同了。在这里一般就是针对具体的硬件，做state saving，clock gate，power gate，prepare cpu reset handler这样的一些动作了。</p>

<p>上面提到的有Freezable属性的这个workqueue比较实用，在suspend的时候会freeze，这样就会避免当suspend的时候，一些设备被关闭（或者clock被gate，或者power被gate），但是workqueue中还有work在运行从而导致一些问题。</p>

<p>跟了一下代码，这个system_freezable_wq主要就是在create workqueue的时候加上了一个FREEZABLE的flag，然后当suspend发生的时候，在没有开始真正suspend device之前，有一个suspend_prepare会调用suspend_freeze_processes，这样一路调用下来，最终会调用到freeze_workqueues_begin，在这里会将workqueue的maxactive设成0，这样workqueue里面的work就无法执行到了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel resume的逻辑]]></title>
    <link href="http://markzhang.cn/blog/2016/01/05/kernel-suspend-resume-description/"/>
    <updated>2016-01-05T15:59:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/05/kernel-suspend-resume-description</id>
    <content type="html"><![CDATA[<p>Resume的时候，其实最开始是从bootrom启动，再到uboot，然后再到kernel，到kernel的common code的时候，arch相关的代码都已经跑完，此时CPU已经起来了（其实CPU起来之后执行的第一句代码位于设定好的CPU reset handler指定地方的代码，一般这是一段汇编，在这里会去读取suspend结束的时候的一些系统状态，从而可以顺利的转到kernel层继续）。</p>

<!-- more -->


<p>所以到了kernel这边的时候，是从suspend结束时的下一条指令开始继续执行。具体就位于suspend.c的suspend_enter的下半部分代码。</p>

<p>在这里就可以看到，比如dpm_resume_noirq就是关键函数。在这里就会依次去调用所有device对应的driver的resume方法，顺序是先suspend的后被resume，后suspend的先resume。</p>

<p>结合之前说的suspend的逻辑，综合一下就是：</p>

<p>device_add的时候：</p>

<p>先被add的device，后被suspend，先被resume</p>

<p>后被add的device，先被suspend，后被resume</p>

<p>不过这不是绝对的，细节一点来说，这里面还分noirq的device resume list和irq enabled device resume list，具体的可以去看源代码。</p>

<p>然后suspend_enter函数就会被执行完成，按照之前suspend时候的调用栈，就会回到函数：suspend_devices_and_enter这个函数中调用suspend_enter的下一句继续执行，在这里又会做一些resume的工作，比如console resume就在这里。</p>

<p>最后就回到了调用suspend_devices_and_enter的函数enter_state，在这里会调用suspend_finish，这个函数里面就会调用到suspend_thaw_processes，这个函数就会thaw workqueues, thaw tasks，然后调用schedule开始进程调度，到这个时候userspace也就活过来了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么linux的TTY登录程序getty/agetty一般都会设置一个-L的option？]]></title>
    <link href="http://markzhang.cn/blog/2016/01/03/getty-l/"/>
    <updated>2016-01-03T11:36:00+08:00</updated>
    <id>http://markzhang.cn/blog/2016/01/03/getty-l</id>
    <content type="html"><![CDATA[<p>-L option表示程序不等待DCD信号。DCD信号是串口通讯时的一个信号，表示Data Carrier Detected，一般是modem连通之后会发送回来的一个信号，表示数据载波OK，可以继续通信了。</p>

<!-- more -->


<p>但是，在现在的串口通信中，特别是嵌入式开发的时候，开发板上的串口，DCD这个pin一般都不会连线的，一般只连tx/rx/cts/rts四根线就OK了。</p>

<p>所以，如果getty或者agetty没有指定-L选项，那么open /dev/ttyS0就会block在那里，因为kernel会wait在一个waitqueue上，等待串口的DCD信号上来（通过中断）。</p>

<p>事实上，在getty/agetty程序中，指定-L option之后，代码中就会以NON_BLOCK的方式来打开/dev/ttyS0，这样kernel就不会去等待DCD信号了，从而打开串口就不会block了。</p>

<p>对于local的开发板上的串口来说，不连DCD线是合理的。因为这是local设备，不是要和远程的一个modem进行通信，所以需要DCD。本地的串口连上述那四根线就OK了。</p>
]]></content>
  </entry>
  
</feed>
