<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux-kernel | Make Things Cool]]></title>
  <link href="http://markzhang.cn/blog/categories/linux-kernel/atom.xml" rel="self"/>
  <link href="http://markzhang.cn/"/>
  <updated>2015-12-29T14:10:56+08:00</updated>
  <id>http://markzhang.cn/</id>
  <author>
    <name><![CDATA[Mark Zhang]]></name>
    <email><![CDATA[super119@139.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux graphics stack 理解]]></title>
    <link href="http://markzhang.cn/blog/2015/12/29/linux-graphics-stack/"/>
    <updated>2015-12-29T14:09:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/29/linux-graphics-stack</id>
    <content type="html"><![CDATA[<p>Display and mode setting: DRM. DRM defines connector/encoder/crtc to support display(including multi-monitor). And KMS makes mode setting happens in kernel space.</p>

<!-- more -->


<hr />

<p>2D acceleration: X server EXA/UXA extension. Vendor should write a X server driver which implements EXA or UXA(should be upstreamed). UXA is an enhancement design of EXA, proposed by intel, so GEM is used in UXA. DRM has no direct 2D acceleration interface definitions(e.g: memory copy/move, blit, color space conversion&hellip;), this is defined in EXA/UXA extensions. But vendor&rsquo;s X server driver will use drm functions, mostly is buffer manipulations.</p>

<p>3D acceleration: via Mesa. Mesa has 2 parts:</p>

<p>libGL.so &mdash; the implementation of OpenGL spec, the default OpenGL implementation library in Linux. This libGL.so translates OpenGL callings to Mesa-specified instructions.</p>

<p>DRI driver &mdash; the driver accepts the Mesa-specified instructions generated by libGL.so and call drm functions to get them accelerated in GPU. Should be upstreamed.</p>

<p>DRM: has userspace libdrm &amp; kernel space drm driver.</p>

<p>libdrm: Implemented drm APIs. Vendor can hook it&rsquo;s implementations as well as add more APIs which used by EXA/UXA driver(2D) or DRI driver(3D). That&rsquo;s why the build result of libdrm normally has 2 libraries(e.g: libdrm.so &amp; libdrm_intel.so). Vendor codes of libdrm should be upstreamed.</p>

<p>Kernel drm driver: Works under kernel drm framework, should be upstreamed. Cause vendor can add APIs in libdrm, so kernel drm driver can handle vendor specified ioctls.</p>

<p>GLX: X server extension of OpenGL. X server has DRI/DRI2 extensions as well.</p>

<p>They&rsquo;re working with libGL.so in Mesa. By these extensions, Mesa can do:</p>

<ol>
<li><p>Direct rendering: libGL.so in Mesa try to figure out whether DRI driver is ready in Mesa. If so, GLX returns some infos(such as window size, position&hellip;) or create off-screen buffers(via DRI/DRI2 X extension) for Mesa. The rendering is handled in Mesa&rsquo;s DRI driver &mdash; no relations with X server.</p></li>
<li><p>Indirect rendering: libGL.so in Mesa can&rsquo;t find out Mesa&rsquo;s DRI driver. So it queries whether DRI is available in X server. If so, it pass the Mesa-specified instructions which generated by libGL.so to X server. And GLX/DRI/DRI2 extensions of X server handles the rest things. Normally it&rsquo;s software rendering which implemented by Mesa as well. AIGLX(Accelerated Indirect GLX) seems has some solutions to accelerate this.</p></li>
</ol>


<p>So Mesa handles a lot of works in linux 3D graphics stack. And it has lots of relations with X server as well(GLX and DRI X extensions).</p>

<p>An important reason that why we involve so many components is, decouple the dependencies of all of these guys. According to this design, DRM is not related with X server so it works with other programs as well(e.g: Wayland). Mesa is the same.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel: 怎么通过struct file *得到文件名]]></title>
    <link href="http://markzhang.cn/blog/2015/12/25/get-file-name-by-struct-file-star/"/>
    <updated>2015-12-25T10:54:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/25/get-file-name-by-struct-file-star</id>
    <content type="html"><![CDATA[<p>只是一个小Tip，代码如下：</p>

<!-- more -->


<p>``` cpp
char <em>tmp;
char </em>pathname;</p>

<p>path_get(&amp;file->f_path);</p>

<p>tmp = (char *)__get_free_page(GFP_TEMPORARY);
if (!tmp) {</p>

<pre><code>return -ENOMEM;
</code></pre>

<p>}</p>

<p>pathname = d_path(&amp;file->f_path, tmp, PAGE_SIZE);
path_put(&amp;file->f_path);</p>

<p>if (IS_ERR(pathname)) {</p>

<pre><code>free_page((unsigned long)tmp);
return PTR_ERR(pathname);
</code></pre>

<p>}</p>

<p>printk(KERN_WARNING &ldquo;File name: %s\n&rdquo;, pathname);
free_page((unsigned long)tmp);
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KGDB配置使用]]></title>
    <link href="http://markzhang.cn/blog/2015/12/25/setup-kgdb/"/>
    <updated>2015-12-25T10:49:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/25/setup-kgdb</id>
    <content type="html"><![CDATA[<p>KGDB可以用于linux kernel的调试，具体的配置步骤是：</p>

<!-- more -->


<p>make menuconfig, under &ldquo;Kernel Hacking&rdquo;, enable &ldquo;KGDB&rdquo; &amp; &ldquo;KGDB over serial line&rdquo;. Enable &ldquo;compile kernel with debug info&rdquo;(CONFIG_DEBUG_INFO) &amp; &ldquo;enable frame pointer&rdquo;(CONFIG_FRAME_POINTER) options(both are under &ldquo;Kernel Hacking&rdquo;).</p>

<p>有关CONFIG_FRAME_POINTER这个option，需要在enable了ARCH_CONFIG_FRAME_POINTERS这个option之后才会出现在Kernel hacking下面。</p>

<p>这ARCH_CONFIG_FRAME_POINTERS在make menuconfig里面是找不到的。这个option是专门给其他人select用的。一般都是在ARCH config的时候会去select这个option</p>

<p>比如x86下，一般会enable这个option。而ARM则不会（可能是考虑到生成的kernel文件尺寸和性能）。</p>

<p>所以，在ARM下，可以编辑arch/arm/Kconfig，在CONFIG_ARM下面的一堆select的最后，添加上一句select CONFIG_ARCH_FRAME_POINTERS就可以了。</p>

<p>从实验结果来看，只要enable了CONFIG_DEBUG_INFO，基本上就差不多了，能看到代码了。</p>

<hr />

<p>Add kernel option: <code>kgdboc=ttyS0,38400 kgdbwait</code> into kernel command line.</p>

<p>根据我的实验，这里115200不行。在后面gdb设置target remote /dev/ttyS0的时候，会被告知最高支持到38400.</p>

<p>所以，这里如果115200不行，就改成38400。</p>

<hr />

<p>Start kernel, kernel will wait for connection from remote PC&rsquo;s gdb.</p>

<p>On remote machine, &ldquo;<gdb path> ./vmlinux&rdquo; &mdash; this &ldquo;vmlinux&rdquo; mostly is under the root directory of kernel(a big kernel image with debug infos, not the one under arch/arm/boot, that is stripped version).</p>

<p>需要注意的是，这里的GDB必须使用host是x86-64，target是ARM的那种GDB。我们PC上的gdb一般host和target都是x86-64。</p>

<p>这样的GDB可以在一些常见的toolchain网站找到，比如linaro。</p>

<hr />

<p>Enter gdb commands:</p>

<p><code>bash
set remotebaud 38400
target remote /dev/ttyS0
</code></p>

<hr />

<p>Done. You can list source codes, set breakpoints now. Continue the debugging after finished.</p>

<p>CAUTION: Close any other programs(normally it&rsquo;s minicom which we use to monitor serial outputs) which may occupy &ldquo;/dev/ttyS0&rdquo; before running gdb on remote machine. Otherwise gdb can&rsquo;t connect with target board.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kernel barrier/wmb/mb宏的作用]]></title>
    <link href="http://markzhang.cn/blog/2015/12/23/kernel-barrier-mb-wmb/"/>
    <updated>2015-12-23T10:28:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/23/kernel-barrier-mb-wmb</id>
    <content type="html"><![CDATA[<p>内存屏障主要解决的问题是编译器的优化和CPU的乱序执行。</p>

<p>编译器在优化的时候，生成的汇编指令可能和c语言程序的执行顺序不一样，在需要程序严格按照c语言顺序执行时，需要显式的告诉编译不需要优化，这在linux下是通过barrier()宏完成的，它依靠volidate关键字和memory关键字，前者告诉编译barrier()周围的指令不要被优化，后者作用是告诉编译器汇编代码会使内存里面的值更改，编译器应使用内存里的新值而非寄存器里保存的老值。</p>

<p>同样，CPU执行会通过乱序以提高性能。汇编里的指令不一定是按照我们看到的顺序执行的。linux中通过mb()系列宏来保证执行的顺序。具体做法是通过mfence/lfence指令（它们是奔4后引进的，早期x86没有）以及x86指令中带有串行特性的指令（这样的指令很多，例如linux中实现时用到的lock指令，I/O指令，操作控制寄存器、系统寄存器、调试寄存器的指令、iret指令等等）。简单的说，如果在程序某处插入了mb()/rmb()/wmb()宏，则宏之前的程序保证比宏之后的程序先执行，从而实现串行化。wmb的实现和barrier()类似，是因为在x86平台上，写内存的操作不会被乱序执行。</p>

<p>实际上在RSIC平台上，这些串行工作都有专门的指令由程序员显式的完成，比如在需要的地方调用串行指令，而不像x86上有这么多隐性的带有串行特性指令（例如lock指令）。所以在risc平台下工作的朋友通常对串行化操作理解的容易些。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux kernel data types, alignment, compat_ioctl 数据类型，对齐问题和compat_ioctl]]></title>
    <link href="http://markzhang.cn/blog/2015/12/23/kernel-data-type-compat-ioctl/"/>
    <updated>2015-12-23T10:21:00+08:00</updated>
    <id>http://markzhang.cn/blog/2015/12/23/kernel-data-type-compat-ioctl</id>
    <content type="html"><![CDATA[<p>特别是在写IOCTL的时候，由于有32bit userspace + 64bit kernel的问题，而且由于architecture的不同，不同data type的length也不同，所以在IOCTL中建议用u32, u64, s32这样无视architecture fix size的data type。</p>

<p>这里是来自LDD的不同的architecture的data type的size：</p>

<!-- more -->


<p><img src="/downloads/image/kernel-u32-s32.png" alt="kernel architecture indepedent data types" /></p>

<p>此外有关IOCTL中structure的alignment的问题，注意添加padding使数据长度alignment，现在一般来说都是添加padding到64bit对齐。这里是为什么需要这么做（针对ARM，x86更不用说，因为x86-64早就有了）：</p>

<blockquote><p>Q: I&rsquo;m new in kernel development. Could you tell me or give me some
materials to read that why we need to align the size of IOCTL structures
to 64bit? I can understand if we&rsquo;re working in a 64bit kernel but why we
need to do this if we&rsquo;re in a 32bit arm kernel? Besides, why the
pointers in IOCTL structure should be declared as u64?</p>

<p>A: Because in a few years/months you&rsquo;ll have arm64, but still the same
driver with the same ioctls &hellip; and if the ioctls are not <em>exactly</em>
the same you get to write compat ioctl code which copies the old 32bit
struct into the 64bit struct the kernel understands. Hence your ioctl
must be laid out exactly the same for both 32bit and 64bit, which
happens if you naturally align/pad everything to 64bits and only use
fixed-sized integers and no pointers.</p>

<p>Mark: Ah, I see. Thanks. Yes, u64 still works as 32 bit pointer.</p></blockquote>

<p>参看LDD十一章中有关Nature Alignment的描述。Alignment主要是牵涉到性能问题，不对齐的数据在fetch的时候会有exception，从而降低performance。</p>

<p>这里是网上搜到的一些建议：</p>

<p>There are some rules that should be followed regardless:</p>

<ul>
<li><p>ioctl commands should never be written in an architecture specific
way. In the example of the OMAP driver, you definitely want to be
able ot use the same command when running Linux on the C6x DSP.</p></li>
<li><p>If possible, use only scalar values as ioctl arguments</p></li>
<li><p>Avoid types that are register sized: &lsquo;long&rsquo;, &lsquo;size_t&rsquo;, pointer.
Instead use only <strong>u8, </strong>u16, <strong>u32 and </strong>u64 and their signed
versions.</p></li>
<li><p>If you use structures, try very hard to avoid pointers in them,
it messes up all sorts of tools.</p></li>
<li><p>If you use structures, make all members naturally aligned, and pad
the size of the structures to a multiple of the maximum member size.</p></li>
<li><p>Never put sub-command numbers into a structure.</p></li>
</ul>


<p>有关compat_ioctl：支持64bit的driver必须要实现的ioctl，当有32bit的userspace application call 64bit kernel的IOCTL的时候，这个callback会被调用到。</p>

<p>Q: Suppose I have defined the following.</p>

<p>``` cpp</p>

<h1>define MY_IOCTL_CMD1 _IOR(MAGIC_NUMBER, 0x01, arg1)</h1>

<h1>define MY_IOCTL_CMD2 _IOW(MAGIC_NUMBER, 0x02, arg2)</h1>

<h1>ifdef CONFIG_COMPAT</h1>

<h1>define MY_COMPAT_IOCTL_CMD1 _IOR(MAGIC_NUMBER, 0x01, compat_arg1)</h1>

<h1>define MY_COMPAT_IOCTL_CMD2 _IOW(MAGIC_NUMBER, 0x02, compat_arg2)</h1>

<h1>endif</h1>

<p>```</p>

<p>Now when we do ioctl from user space, we usually do</p>

<p>ioctl(fd, MY_IOCTL_CMD1, &amp;arg1)</p>

<p>So do we really need to have an ioctl with MY_COMPAT_IOCTL_CMD1 as request?</p>

<p>In the devide code I have handlers defined as follows. ioctl: device_ioctl</p>

<p>``` cpp</p>

<h1>ifdef CONFIG_COMPAT</h1>

<p>compat_ioctl: device_compat_ioctl</p>

<h1>endif</h1>

<p>```</p>

<p>Can anybody please provide some explanations around this?</p>

<hr />

<p>A: This compat stuff is for running a 32-bit program in a 64-bit kernel. When you call the ioctl(fd, MY_IOCTL_CMD1, &amp;arg1) from a 32-bit program on a 64-bit kernel, the kernel will divert the ioctl to the .compat_ioctl function in the file_operations struct. This compat_ioctl function is responsible for copying the user argument arg1 as if it were compat_arg1, which uses the 32-bit layout. The compat_arg1 typedef is defined in the kernel so that when compiled for 64-bit, the structure is exactly the same layout as the arg1 compiled for 32-bit.</p>

<p>The definition of MY_IOCTL_CMD1 will take the sizeof arg1 into account when creating the cmd id. When you compile a program for a 32-bit machine, the value for MY_IOCTL_CMD1 will be different than if you compiled it for a 64-bit machine. The 32-bit MY_IOCTL_CMD1 should have the same value as the 64-bit MY_COMPAT_IOCTL_CMD1 in the kernel, however.</p>

<p>There&rsquo;s never a need to use compat_arg1 or MY_COMPAT_IOCTL_CMD1 in a user-space application. Those are only for code compiled in the kernel.</p>
]]></content>
  </entry>
  
</feed>
