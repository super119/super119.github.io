---
layout: post
title: "Git都在说些啥（二）"
date: 2014-04-21 21:33
comments: true
categories: git
---

这一次我们来说说 `git pull` 的时候经常会碰到的一段信息。

<!-- more -->

``` bash
Marks-RMBP:~/Graphics/OpenGL-ProgrammingGuide$ git pull
You asked me to pull without telling me which branch you
want to merge with, and 'branch.tmp.merge' in
your configuration file does not tell me, either. Please
specify which branch you want to use on the command line and
try again (e.g. 'git pull <repository> <refspec>').

See git-pull(1) for details.
 
If you often merge with the same branch, you may want to
use something like the following in your configuration file:

    [branch "tmp"]  
    remote = <nickname>  
    merge = <remote-ref>  

    [remote "<nickname>"]  
    url = <url>  
    fetch = <refspec>  
 
See git-config(1) for details.
```

首先来看一下怎么操作，git就会唠叨上面一段话（假设我们现在在一个git repository的根目录，目前位于master branch）：

``` bash
git branch tmp
git checkout tmp
git pull
```

上面的三个命令很简单，首先就是基于当前的branch，创建一个新的branch叫 `tmp`，然后checkout到这个branch，最后执行 `git pull`。那为什么最后执行 `git pull` 的时候就会出现上面那一大段信息呢？

其实很简单。我们都知道，`git pull` 是做两件事情：首先做 `git fetch`，也就是将远端仓库中的所有改动都取回来；然后就是做 `git merge`，也就是将远端仓库的某个branch和我们当前本地所在的branch做一次merge。

所以，当 `git pull` 做第二件事情，也就是 `git merge` 的时候，它需要知道将本地的当前所在的这个branch和远端的哪个branch进行merge。当git不知道需要和远端的哪个branch进行merge时，就会出现上述的错误信息了。

解决办法有两个：

- 写全 `git pull` 命令，比如 `git pull origin master`。这样git就知道跟 `origin` 这个remote git仓库的master branch进行merge。

- 使用 `git checkout -b <branch name> <remote refs>` 来创建branch，比如 `git checkout -b tmp origin/master`。这里我们在checkout的时候，明确指定了checkout名为origin的remote git仓库中的master branch，所以将来我们在这个tmp branch上进行 `git pull` 的时候，git自然就知道去和哪个远端的branch merge了。

** NOTE：** 事实上，`git branch` / `git checkout`，也可以使用 `-t` 这个参数来明确指定新的本地branch需要”track“哪个branch。

最后提一下，一开头git的那段出错信息中提到的一些所谓的配置项：

``` bash
If you often merge with the same branch, you may want to
use something like the following in your configuration file:

    [branch "tmp"]
    remote = <nickname>
    merge = <remote-ref>
``` 

其实，这段信息的意思就是，git无法在你的git仓库的根目录下的 `.git/config` 中找到tmp这个branch的merge信息，也没有在你的全局git配置：`$HOME/.gitconfig` 中找到。

而对于一个没有上述问题的branch，比如在本文所举的例子中，master branch，在 `.git/config` 中就有这样的设置：

``` bash
[branch "master"]
	remote = origin
	merge = refs/heads/master
```

所以可以看到，其实git的逻辑很简单，只是我们需要确切的知道它究竟在干些啥，这样也就能理解它的抱怨了。