---
layout: post
title: "Git都在说些啥（一）"
date: 2014-04-04 14:28
comments: true
categories: git
---

当我们在做某些git操作的时候，git有的时候会给出一段一段的提示信息，而往往这些信息都是比较重要的。因为按照UNIX的设计哲学，执行成功或是无害操作，这些都是不会有任何提示信息的。做Linux的Hackers也奉行这种哲学，所以当git开始唠叨的时候，你真的需要关注一下它到底在罗嗦些啥。

这篇文章描述的就是某一个git的唠叨。

<!-- more -->

有的时候，特别是当执行 `git checkout` 的时候，你可能会看到这样的信息：

> Warning: you are leaving 30 commits behind, not connected to
> any of your branches:
>
> 2553655 Merge branch 'master' into prod
>
> 6b07300 Fix build
>
> ... and 28 more.
>
> If you want to keep them by creating a new branch, this may be a good time
> to do so with:
>
> git branch new_branch_name 654646464

注：以上信息来自：[https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM](https://groups.google.com/forum/#!topic/git-users/4XC8KhZ-cBM)

所以git的这段罗嗦到底是什么意思？

发生这种情况时，你一般工作在 `no branch` 上，也就是说，这个branch没有名字。也就是说，一旦你发生了 `git checkout` 操作之后，无法你是checkout到了一个有名字的branch，还是没有指定checkout的branch，就是更新本地的文件，这个 `no branch` 就再也回不去了，因为这个branch没有名字，所以你无法告诉git，我需要再回到这个branch上去。

基于此，如果你在 `no branch` 上有一些commit（无论是你自己commit的，还是你cherry-pick的），那么，当发生 `git checkout` 的时候，git就会给出上面的信息，告诉你，如果你现在不做点事的话，之前你所在的 `no branch` 就再也回不去了，所以，这个时候你最好建一个branch来保证你还能回到 `no branch` 上去：

> If you want to keep them by creating a new branch, this may be a good time
> to do so with:
>
> git branch new_branch_name 654646464

事实上，如果你真的碰到了这种情况，而且当git给出上面一段信息告诉了你利害关系之后，你仍然义无反顾的无视了git的警告，没有创建一个有名字的branch来保存之前你在 `no branch` 上的工作成果，最终在某一天你想起来，想要找回N久之前在 `no branch` 上的一些commit的话，你仍然还有一根救命稻草：

`git reflog`

基本上，`git reflog` 将给出所有“失联”的commit。也就是说，这些commit不属于任何branch（no connection），从git数据库中删掉也无所谓。

所以，你最好期望 `git reflog` 中有你需要的commit，因为就像上面所说，这些commit本就是可以被安全删除的commit，如果你做过 `git gc`，或者是git自动做过 `git gc` 的话（git有一套逻辑来判断什么时候应该做一次gc），这些commit就真的没有了。

注：上面一段说的有点严重，事实上，git对待失联的commit，有一个expire time的设定，所以也不是说一旦执行过 `git gc`，这些commit就真的没有了。但是为了安全起见，对于重要的commit，还是需要注意不要丢了。
